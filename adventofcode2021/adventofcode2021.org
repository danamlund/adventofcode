* setup
(require 'ob-org)
(require 'ob-python)
** stdout/stderr on bad exit-code
#+BEGIN_SRC elisp
(defun org-babel-eval (cmd body)
  "Run CMD on BODY.
If CMD succeeds then return its results, otherwise display
STDERR with `org-babel-eval-error-notify'."
(prin1 cmd)
  (let ((err-buff (get-buffer-create " *Org-Babel Error*")) exit-code)
    (with-current-buffer err-buff (erase-buffer))
    (with-temp-buffer
      (insert body)
      (setq exit-code
	    (org-babel--shell-command-on-region
	     (point-min) (point-max) cmd err-buff))
      (if (or (not (numberp exit-code)) (> exit-code 0))
	  (progn
	    (with-current-buffer err-buff
	      (org-babel-eval-error-notify exit-code (buffer-string)))
	    (save-excursion
	      (when (get-buffer org-babel-error-buffer-name)
		(with-current-buffer org-babel-error-buffer-name
		  (unless (derived-mode-p 'compilation-mode)
		    (compilation-mode))
		  ;; Compilation-mode enforces read-only, but Babel expects the buffer modifiable.
		  (setq buffer-read-only nil))))
	    (concat (buffer-string) "STDERR:\n" (with-current-buffer err-buff (buffer-string))))
	(buffer-string)))))
#+END_SRC
* make work
 - tangle file: C-c C-v t
 - C-c C-c code src

** foo
#+BEGIN_SRC cpp :results output
#include <stdio.h>
int main() {
  printf("sdf\n");
  int foo[10];
  foo[11] = 2;
  printf("z\n");
  return 0;
}
#+END_SRC

#+RESULTS:
: STDERR:
: *** stack smashing detected ***: terminated

* day 1
** puzzle
--- Day 1: Sonar Sweep ---

You're minding your own business on a ship at sea when the overboard alarm goes off! You rush to see if you can help. Apparently, one of the Elves tripped and accidentally sent the sleigh keys flying into the ocean!

Before you know it, you're inside a submarine the Elves keep ready for situations like this. It's covered in Christmas lights (because of course it is), and it even has an experimental antenna that should be able to track the keys if you can boost its signal strength high enough; there's a little meter that indicates the antenna's signal strength by displaying 0-50 stars.

Your instincts tell you that in order to save Christmas, you'll need to get all fifty stars by December 25th.

Collect stars by solving puzzles. Two puzzles will be made available on each day in the Advent calendar; the second puzzle is unlocked when you complete the first. Each puzzle grants one star. Good luck!

As the submarine drops below the surface of the ocean, it automatically performs a sonar sweep of the nearby sea floor. On a small screen, the sonar sweep report (your puzzle input) appears: each line is a measurement of the sea floor depth as the sweep looks further and further away from the submarine.

For example, suppose you had the following report:

199
200
208
210
200
207
240
269
260
263

This report indicates that, scanning outward from the submarine, the sonar sweep found depths of 199, 200, 208, 210, and so on.

The first order of business is to figure out how quickly the depth increases, just so you know what you're dealing with - you never know if the keys will get carried into deeper water by an ocean current or a fish or something.

To do this, count the number of times a depth measurement increases from the previous measurement. (There is no measurement before the first measurement.) In the example above, the changes are as follows:

199 (N/A - no previous measurement)
200 (increased)
208 (increased)
210 (increased)
200 (decreased)
207 (increased)
240 (increased)
269 (increased)
260 (decreased)
263 (increased)

In this example, there are 7 measurements that are larger than the previous measurement.

How many measurements are larger than the previous measurement?

Your puzzle answer was 1167.
--- Part Two ---

Considering every single measurement isn't as useful as you expected: there's just too much noise in the data.

Instead, consider sums of a three-measurement sliding window. Again considering the above example:

199  A      
200  A B    
208  A B C  
210    B C D
200  E   C D
207  E F   D
240  E F G  
269    F G H
260      G H
263        H

Start by comparing the first and second three-measurement windows. The measurements in the first window are marked A (199, 200, 208); their sum is 199 + 200 + 208 = 607. The second window is marked B (200, 208, 210); its sum is 618. The sum of measurements in the second window is larger than the sum of the first, so this first comparison increased.

Your goal now is to count the number of times the sum of measurements in this sliding window increases from the previous sum. So, compare A with B, then compare B with C, then C with D, and so on. Stop when there aren't enough measurements left to create a new three-measurement sum.

In the above example, the sum of each three-measurement window is as follows:

A: 607 (N/A - no previous sum)
B: 618 (increased)
C: 618 (no change)
D: 617 (decreased)
E: 647 (increased)
F: 716 (increased)
G: 769 (increased)
H: 792 (increased)

In this example, there are 5 sums that are larger than the previous sum.

Consider sums of a three-measurement sliding window. How many sums are larger than the previous sum?

Your puzzle answer was 1130.

Both parts of this puzzle are complete! They provide two gold stars: **
** star 1
 - <2021-12-02 Thu 18:15>
#+BEGIN_SRC cpp :results output
#include <stdio.h>

int main() {
  FILE *f = fopen("01.txt", "r");
  int increases = 0;
  int prev = -1;
  int cur;
  while (1 == fscanf(f, "%d", &cur)) {
    if (prev != -1 && cur > prev)
      increases++;
    prev = cur;
  }
  printf("= %d\n", increases);
  return 0;
}
#+END_SRC

#+RESULTS:
: = 1167
 - <2021-12-02 Thu 18:17>

** star 2
#+BEGIN_SRC cpp :results output
#include <stdio.h>

int main() {
  FILE *f = fopen("01.txt", "r");
  int increases = 0;
  int prevprevprev = -1;
  int prevprev = -1;
  int prev = -1;
  int cur;
  while (1 == fscanf(f, "%d", &cur)) {
    if (prev != -1 && prevprev != -1 && prevprevprev != -1 && prevprev + prev + cur > prevprevprev + prevprev + prev)
      increases++;
    prevprevprev = prevprev;
    prevprev = prev;
    prev = cur;
  }
  printf("= %d\n", increases);
  return 0;
}
#+END_SRC

#+RESULTS:
: = 1130
 - <2021-12-02 Thu 18:21>
* day 2
** puzzle
--- Day 2: Dive! ---

Now, you need to figure out how to pilot this thing.

It seems like the submarine can take a series of commands like forward 1, down 2, or up 3:

    forward X increases the horizontal position by X units.
    down X increases the depth by X units.
    up X decreases the depth by X units.

Note that since you're on a submarine, down and up affect your depth, and so they have the opposite result of what you might expect.

The submarine seems to already have a planned course (your puzzle input). You should probably figure out where it's going. For example:

forward 5
down 5
forward 8
up 3
down 8
forward 2

Your horizontal position and depth both start at 0. The steps above would then modify them as follows:

    forward 5 adds 5 to your horizontal position, a total of 5.
    down 5 adds 5 to your depth, resulting in a value of 5.
    forward 8 adds 8 to your horizontal position, a total of 13.
    up 3 decreases your depth by 3, resulting in a value of 2.
    down 8 adds 8 to your depth, resulting in a value of 10.
    forward 2 adds 2 to your horizontal position, a total of 15.

After following these instructions, you would have a horizontal position of 15 and a depth of 10. (Multiplying these together produces 150.)

Calculate the horizontal position and depth you would have after following the planned course. What do you get if you multiply your final horizontal position by your final depth?

Your puzzle answer was 1989014.
--- Part Two ---

Based on your calculations, the planned course doesn't seem to make any sense. You find the submarine manual and discover that the process is actually slightly more complicated.

In addition to horizontal position and depth, you'll also need to track a third value, aim, which also starts at 0. The commands also mean something entirely different than you first thought:

    down X increases your aim by X units.
    up X decreases your aim by X units.
    forward X does two things:
        It increases your horizontal position by X units.
        It increases your depth by your aim multiplied by X.

Again note that since you're on a submarine, down and up do the opposite of what you might expect: "down" means aiming in the positive direction.

Now, the above example does something different:

    forward 5 adds 5 to your horizontal position, a total of 5. Because your aim is 0, your depth does not change.
    down 5 adds 5 to your aim, resulting in a value of 5.
    forward 8 adds 8 to your horizontal position, a total of 13. Because your aim is 5, your depth increases by 8*5=40.
    up 3 decreases your aim by 3, resulting in a value of 2.
    down 8 adds 8 to your aim, resulting in a value of 10.
    forward 2 adds 2 to your horizontal position, a total of 15. Because your aim is 10, your depth increases by 2*10=20 to a total of 60.

After following these new instructions, you would have a horizontal position of 15 and a depth of 60. (Multiplying these produces 900.)

Using this new interpretation of the commands, calculate the horizontal position and depth you would have after following the planned course. What do you get if you multiply your final horizontal position by your final depth?

Your puzzle answer was 2006917119.

Both parts of this puzzle are complete! They provide two gold stars: **
** star 1
  - <2021-12-02 Thu 18:23>
#+BEGIN_SRC cpp :results output
#include <stdio.h>
#include <stdlib.h>
int main() {
  FILE *f = fopen("02.txt", "r");
  int horpos = 0;
  int depth = 0;
  while (true) {
    int val;
    if (fscanf(f, "forward %d\n", &val) == 1) {
      horpos += val;
    } else if (fscanf(f, "down %d\n", &val) == 1) {
      depth += val;
    } else if (fscanf(f, "up %d\n", &val) == 1) {
      depth -= val;
    } else {
      break;
    }
  }

  printf("= %d\n", horpos * depth);
  return 0;
}
#+END_SRC

#+RESULTS:
: = 1989014
 - <2021-12-02 Thu 18:26>
** star 2
  - <2021-12-02 Thu 18:23>
#+BEGIN_SRC cpp :results output
#include <stdio.h>
#include <stdlib.h>
int main() {
  FILE *f = fopen("02.txt", "r");
  int horpos = 0;
  int depth = 0;
  int aim = 0;
  while (true) {
    int val;
    if (fscanf(f, "forward %d\n", &val) == 1) {
      horpos += val;
      depth += val * aim;
    } else if (fscanf(f, "down %d\n", &val) == 1) {
      aim += val;
    } else if (fscanf(f, "up %d\n", &val) == 1) {
      aim -= val;
    } else {
      break;
    }
  }

  printf("= %ld\n", (long)horpos * depth);
  return 0;
}
#+END_SRC

#+RESULTS:
: = 2006917119
 - <2021-12-02 Thu 18:28>

* day 3
** puzzle
--- Day 3: Binary Diagnostic ---

The submarine has been making some odd creaking noises, so you ask it to produce a diagnostic report just in case.

The diagnostic report (your puzzle input) consists of a list of binary numbers which, when decoded properly, can tell you many useful things about the conditions of the submarine. The first parameter to check is the power consumption.

You need to use the binary numbers in the diagnostic report to generate two new binary numbers (called the gamma rate and the epsilon rate). The power consumption can then be found by multiplying the gamma rate by the epsilon rate.

Each bit in the gamma rate can be determined by finding the most common bit in the corresponding position of all numbers in the diagnostic report. For example, given the following diagnostic report:

00100
11110
10110
10111
10101
01111
00111
11100
10000
11001
00010
01010

Considering only the first bit of each number, there are five 0 bits and seven 1 bits. Since the most common bit is 1, the first bit of the gamma rate is 1.

The most common second bit of the numbers in the diagnostic report is 0, so the second bit of the gamma rate is 0.

The most common value of the third, fourth, and fifth bits are 1, 1, and 0, respectively, and so the final three bits of the gamma rate are 110.

So, the gamma rate is the binary number 10110, or 22 in decimal.

The epsilon rate is calculated in a similar way; rather than use the most common bit, the least common bit from each position is used. So, the epsilon rate is 01001, or 9 in decimal. Multiplying the gamma rate (22) by the epsilon rate (9) produces the power consumption, 198.

Use the binary numbers in your diagnostic report to calculate the gamma rate and epsilon rate, then multiply them together. What is the power consumption of the submarine? (Be sure to represent your answer in decimal, not binary.)

Your puzzle answer was 3969000.
--- Part Two ---

Next, you should verify the life support rating, which can be determined by multiplying the oxygen generator rating by the CO2 scrubber rating.

Both the oxygen generator rating and the CO2 scrubber rating are values that can be found in your diagnostic report - finding them is the tricky part. Both values are located using a similar process that involves filtering out values until only one remains. Before searching for either rating value, start with the full list of binary numbers from your diagnostic report and consider just the first bit of those numbers. Then:

    Keep only numbers selected by the bit criteria for the type of rating value for which you are searching. Discard numbers which do not match the bit criteria.
    If you only have one number left, stop; this is the rating value for which you are searching.
    Otherwise, repeat the process, considering the next bit to the right.

The bit criteria depends on which type of rating value you want to find:

    To find oxygen generator rating, determine the most common value (0 or 1) in the current bit position, and keep only numbers with that bit in that position. If 0 and 1 are equally common, keep values with a 1 in the position being considered.
    To find CO2 scrubber rating, determine the least common value (0 or 1) in the current bit position, and keep only numbers with that bit in that position. If 0 and 1 are equally common, keep values with a 0 in the position being considered.

For example, to determine the oxygen generator rating value using the same example diagnostic report from above:

    Start with all 12 numbers and consider only the first bit of each number. There are more 1 bits (7) than 0 bits (5), so keep only the 7 numbers with a 1 in the first position: 11110, 10110, 10111, 10101, 11100, 10000, and 11001.
    Then, consider the second bit of the 7 remaining numbers: there are more 0 bits (4) than 1 bits (3), so keep only the 4 numbers with a 0 in the second position: 10110, 10111, 10101, and 10000.
    In the third position, three of the four numbers have a 1, so keep those three: 10110, 10111, and 10101.
    In the fourth position, two of the three numbers have a 1, so keep those two: 10110 and 10111.
    In the fifth position, there are an equal number of 0 bits and 1 bits (one each). So, to find the oxygen generator rating, keep the number with a 1 in that position: 10111.
    As there is only one number left, stop; the oxygen generator rating is 10111, or 23 in decimal.

Then, to determine the CO2 scrubber rating value from the same example above:

    Start again with all 12 numbers and consider only the first bit of each number. There are fewer 0 bits (5) than 1 bits (7), so keep only the 5 numbers with a 0 in the first position: 00100, 01111, 00111, 00010, and 01010.
    Then, consider the second bit of the 5 remaining numbers: there are fewer 1 bits (2) than 0 bits (3), so keep only the 2 numbers with a 1 in the second position: 01111 and 01010.
    In the third position, there are an equal number of 0 bits and 1 bits (one each). So, to find the CO2 scrubber rating, keep the number with a 0 in that position: 01010.
    As there is only one number left, stop; the CO2 scrubber rating is 01010, or 10 in decimal.

Finally, to find the life support rating, multiply the oxygen generator rating (23) by the CO2 scrubber rating (10) to get 230.

Use the binary numbers in your diagnostic report to calculate the oxygen generator rating and CO2 scrubber rating, then multiply them together. What is the life support rating of the submarine? (Be sure to represent your answer in decimal, not binary.)

Your puzzle answer was 4267809.

Both parts of this puzzle are complete! They provide two gold stars: **
** part 1
#+BEGIN_SRC cpp :results output
#include <stdio.h>
int main() {
  char line[256];
  long gamma = 0;
  long epsilon = 0;
  for (int i = 0; i < 12; i++) {
    gamma = gamma << 1;
    epsilon = epsilon << 1;
    FILE *f = fopen("03.txt", "r");
    int ones = 0;
    int zeros = 0;
    while (fgets(line, sizeof(line), f)) {
      if (line[i] == '1') ones++; else zeros++;
    }
    if (ones > zeros) {
      gamma += 1;
    } else {
      epsilon += 1;
    }
  }
  printf("= %ld\n", gamma * epsilon);
  return 0;
}
#+END_SRC

#+RESULTS:
: = 3969000

 - 16159416000 too high <2021-12-03 Fri 18:26>
 - 3969000 correct <2021-12-03 Fri 18:28>
** part 2
#+BEGIN_SRC cpp :results output
#include <stdio.h>
#define LEN 12
int main() {
  int numbers[1024];
  int numbersi = 0;
  char line[256];

  int oxygen = -1;

  {
  FILE *f = fopen("03.txt", "r");
  while (fgets(line, sizeof(line), f)) {
    int value = 0;
    for (int i = 0; line[i] == '0' || line[i] == '1'; i++) {
      value = value << 1;
      if (line[i] == '1') value += 1;
    }
    numbers[numbersi++] = value;
  }

  for (int i = LEN-1; i >= 0; i--) {
    int ones = 0, zeros = 0;
    for (int ni = 0; ni < numbersi; ni++) {
      if (numbers[ni] == -1) continue;
      if ((numbers[ni] & (1 << i)) >= 1) ones++; else zeros++;
      //printf("'%d' ones=%d, zeros=%d\n", numbers[ni], ones, zeros);
    }
    int found = -1;
    int founds = 0;
    for (int ni = 0; ni < numbersi; ni++) {
      if (numbers[ni] == -1) continue;
      if ((numbers[ni] & (1 << i)) >= 1 != (ones >= zeros) >= 1) numbers[ni] = -1;
      else { found = numbers[ni]; founds++; }
    }
    //printf("i=%d  ones=%d  zeros=%d  founds=%d\n", i, ones, zeros, founds);
    if (founds == 1) { oxygen = found; break; }
  }
  }
  

  int co2 = -1;
  numbersi = 0;
  {
  FILE *f = fopen("03.txt", "r");
  while (fgets(line, sizeof(line), f)) {
    int value = 0;
    for (int i = 0; line[i] == '0' || line[i] == '1'; i++) {
      value = value << 1;
      if (line[i] == '1') value += 1;
    }
    numbers[numbersi++] = value;
  }

  for (int i = LEN-1; i >= 0; i--) {
    int ones = 0, zeros = 0;
    for (int ni = 0; ni < numbersi; ni++) {
      if (numbers[ni] == -1) continue;
      if ((numbers[ni] & (1 << i)) >= 1) ones++; else zeros++;
      //printf("'%d' ones=%d, zeros=%d\n", numbers[ni], ones, zeros);
    }
    int found = -1;
    int founds = 0;
    for (int ni = 0; ni < numbersi; ni++) {
      if (numbers[ni] == -1) continue;
      if ((numbers[ni] & (1 << i)) >= 1 == (ones >= zeros) >= 1) numbers[ni] = -1;
      else { found = numbers[ni]; founds++; }
    }
    //printf("i=%d  ones=%d  zeros=%d  founds=%d\n", i, ones, zeros, founds);
    if (founds == 1) { co2 = found; break; }
  }
  }

  printf("o=%d  co2=%d\n", oxygen, co2);
  printf("= %ld\n", oxygen * co2);
  return 0;
}
#+END_SRC

#+RESULTS:
: o=2509  co2=1701
: = 4267809

 - 819540 too low <2021-12-03 Fri 18:48>
 - 4267809 correct <2021-12-03 Fri 18:58>
* day 4
** puzzle
** part 1
 - <2021-12-04 Sat 11:29>
#+BEGIN_SRC cpp :results output
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
int main() {
  int draws[1024];
  int drawsi = 0;

  char line[1024];
  FILE *f = fopen("04.txt", "r");
  {
    fgets(line, sizeof(line), f);
    line[strlen(line)-1] = 0;
    char *str1, *token, *saveptr;
    str1 = line;
    while (token = strtok_r(str1, ",", &saveptr)) {
      draws[drawsi++] = atoi(token);
      str1 = NULL;
    }
  }

  int boards[100][5][5];
  int boardsi = 0;

  while (fgets(line, sizeof(line), f)) {
    for (int i = 0; i < 5; i++) {
      fgets(line, sizeof(line), f);
      for (int j = 0; j < 5; j++) {
        boards[boardsi][i][j] = atoi(line + j*3);
      }
    }
    boardsi++;
  }
if (false) {
  for (int b = 0; b < boardsi; b++) {
    for (int i = 0; i < 5; i++) {
      for (int j = 0; j < 5; j++) {
        printf("%2d ", boards[b][i][j]);
      }
      printf("\n");
    }
    printf("\n");
  }
}

  for (int d = 0; d < drawsi; d++) {
    for (int b = 0; b < boardsi; b++) {
      for (int i = 0; i < 5; i++) {
        for (int j = 0; j < 5; j++) {
          if (boards[b][i][j] == draws[d]) {
            boards[b][i][j] = -1;
          }
        }
      }
    }
if (false) {
  printf("## draw %d\n", draws[d]);
  for (int b = 0; b < boardsi; b++) {
    for (int i = 0; i < 5; i++) {
      for (int j = 0; j < 5; j++) {
        printf("%2d ", boards[b][i][j]);
      }
      printf("\n");
    }
    printf("\n");
  }
}
    
    for (int b = 0; b < boardsi; b++) {
      int bingoboard = false;
      for (int i = 0; i < 5; i++) {
        int bingo = true;
        for (int j = 0; j < 5; j++) {
          if (boards[b][i][j] != -1) bingo = false;
        }
        if (bingo) bingoboard = true;
      }
      for (int j = 0; j < 5; j++) {
        int bingo = true;
        for (int i = 0; i < 5; i++) {
          if (boards[b][i][j] != -1) bingo = false;
        }
        if (bingo) bingoboard = true;
      }
      if (bingoboard) {
        int unmarkedsum = 0;
        for (int i = 0; i < 5; i++) {
          for (int j = 0; j < 5; j++) {
            if (boards[b][i][j] != -1) unmarkedsum += boards[b][i][j];
          }
        }
        printf("= %d\n", unmarkedsum*draws[d]);
        return 0;
      }
    }
  }
  return 0;
}
#+END_SRC

#+RESULTS:
: = 16716

 - 16716 correct <2021-12-04 Sat 12:01>
** part 2
#+BEGIN_SRC cpp :results output
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
int main() {
  int draws[1024];
  int drawsi = 0;

  char line[1024];
  FILE *f = fopen("04.txt", "r");
  {
    fgets(line, sizeof(line), f);
    line[strlen(line)-1] = 0;
    char *str1, *token, *saveptr;
    str1 = line;
    while (token = strtok_r(str1, ",", &saveptr)) {
      draws[drawsi++] = atoi(token);
      str1 = NULL;
    }
  }

  int boards[100][5][5];
  int boardsi = 0;

  while (fgets(line, sizeof(line), f)) {
    for (int i = 0; i < 5; i++) {
      fgets(line, sizeof(line), f);
      for (int j = 0; j < 5; j++) {
        boards[boardsi][i][j] = atoi(line + j*3);
      }
    }
    boardsi++;
  }
if (false) {
  for (int b = 0; b < boardsi; b++) {
    for (int i = 0; i < 5; i++) {
      for (int j = 0; j < 5; j++) {
        printf("%2d ", boards[b][i][j]);
      }
      printf("\n");
    }
    printf("\n");
  }
}

  int won[1024];
  for (int b = 0; b < boardsi; b++) {
    won[b] = false;
  }
  int wons = 0;

  for (int d = 0; d < drawsi; d++) {
    for (int b = 0; b < boardsi; b++) {
      for (int i = 0; i < 5; i++) {
        for (int j = 0; j < 5; j++) {
          if (boards[b][i][j] == draws[d]) {
            boards[b][i][j] = -1;
          }
        }
      }
    }
if (false) {
  printf("## draw %d\n", draws[d]);
  for (int b = 0; b < boardsi; b++) {
    for (int i = 0; i < 5; i++) {
      for (int j = 0; j < 5; j++) {
        printf("%2d ", boards[b][i][j]);
      }
      printf("\n");
    }
    printf("\n");
  }
}
    
    for (int b = 0; b < boardsi; b++) {
      if (won[b]) continue;
      int bingoboard = false;
      for (int i = 0; i < 5; i++) {
        int bingo = true;
        for (int j = 0; j < 5; j++) {
          if (boards[b][i][j] != -1) bingo = false;
        }
        if (bingo) bingoboard = true;
      }
      for (int j = 0; j < 5; j++) {
        int bingo = true;
        for (int i = 0; i < 5; i++) {
          if (boards[b][i][j] != -1) bingo = false;
        }
        if (bingo) bingoboard = true;
      }
      if (bingoboard) {
        won[b] = true;
        wons++;
        if (wons != boardsi) continue;
        int unmarkedsum = 0;
        for (int i = 0; i < 5; i++) {
          for (int j = 0; j < 5; j++) {
            if (boards[b][i][j] != -1) unmarkedsum += boards[b][i][j];
          }
        }
        printf("= %d\n", unmarkedsum*draws[d]);
        return 0;
      }
    }
  }
  return 0;
}
#+END_SRC

#+RESULTS:
: = 4880

- 4880 correct <2021-12-04 Sat 12:04>

* day 5
** puzzle
--- Day 5: Hydrothermal Venture ---

You come across a field of hydrothermal vents on the ocean floor! These vents constantly produce large, opaque clouds, so it would be best to avoid them if possible.

They tend to form in lines; the submarine helpfully produces a list of nearby lines of vents (your puzzle input) for you to review. For example:

0,9 -> 5,9
8,0 -> 0,8
9,4 -> 3,4
2,2 -> 2,1
7,0 -> 7,4
6,4 -> 2,0
0,9 -> 2,9
3,4 -> 1,4
0,0 -> 8,8
5,5 -> 8,2

Each line of vents is given as a line segment in the format x1,y1 -> x2,y2 where x1,y1 are the coordinates of one end the line segment and x2,y2 are the coordinates of the other end. These line segments include the points at both ends. In other words:

    An entry like 1,1 -> 1,3 covers points 1,1, 1,2, and 1,3.
    An entry like 9,7 -> 7,7 covers points 9,7, 8,7, and 7,7.

For now, only consider horizontal and vertical lines: lines where either x1 = x2 or y1 = y2.

So, the horizontal and vertical lines from the above list would produce the following diagram:

.......1..
..1....1..
..1....1..
.......1..
.112111211
..........
..........
..........
..........
222111....

In this diagram, the top left corner is 0,0 and the bottom right corner is 9,9. Each position is shown as the number of lines which cover that point or . if no line covers that point. The top-left pair of 1s, for example, comes from 2,2 -> 2,1; the very bottom row is formed by the overlapping lines 0,9 -> 5,9 and 0,9 -> 2,9.

To avoid the most dangerous areas, you need to determine the number of points where at least two lines overlap. In the above example, this is anywhere in the diagram with a 2 or larger - a total of 5 points.

Consider only horizontal and vertical lines. At how many points do at least two lines overlap?

Your puzzle answer was 5145.
--- Part Two ---

Unfortunately, considering only horizontal and vertical lines doesn't give you the full picture; you need to also consider diagonal lines.

Because of the limits of the hydrothermal vent mapping system, the lines in your list will only ever be horizontal, vertical, or a diagonal line at exactly 45 degrees. In other words:

    An entry like 1,1 -> 3,3 covers points 1,1, 2,2, and 3,3.
    An entry like 9,7 -> 7,9 covers points 9,7, 8,8, and 7,9.

Considering all lines from the above example would now produce the following diagram:

1.1....11.
.111...2..
..2.1.111.
...1.2.2..
.112313211
...1.2....
..1...1...
.1.....1..
1.......1.
222111....

You still need to determine the number of points where at least two lines overlap. In the above example, this is still anywhere in the diagram with a 2 or larger - now a total of 12 points.

Consider all of the lines. At how many points do at least two lines overlap?

Your puzzle answer was 16518.

Both parts of this puzzle are complete! They provide two gold stars: **
** part 1
 - <2021-12-05 Sun 07:26>
#+BEGIN_SRC cpp :results output
#include <stdio.h>
#define MAX 1000
int main() {
  int grid[MAX][MAX] = { 0 };

  FILE *f = fopen("05.txt", "r");
  int x1, y1, x2, y2;
  int tmp;
  while (fscanf(f, "%d,%d -> %d,%d\n", &x1, &y1, &x2, &y2) == 4) {
    if (x1 == x2) {
      if (y1 > y2) { tmp = y1; y1 = y2; y2 = tmp; }
      for (int y = y1; y <= y2; y++)
        grid[y][x1]++;
    }
    if (y1 == y2) {
      if (x1 > x2) { tmp = x1; x1 = x2; x2 = tmp; }
      for (int x = x1; x <= x2; x++)
        grid[y1][x]++;
    }
  }

  int overlaps = 0;
  for (int y = 0; y < MAX; y++) 
    for (int x = 0; x < MAX; x++)
      if (grid[y][x] >= 2)
        overlaps++;

  if (false)
  for (int y = 0; y < MAX; y++) {
    for (int x = 0; x < MAX; x++) {
      printf("%c", grid[y][x] == 0 ? '.' : '0'+grid[y][x]);
    }
    printf("\n");
  }


  printf("= %d\n", overlaps);
  return 0;
}
#+END_SRC 

#+RESULTS:
: = 5145

 - 10140 too high <2021-12-05 Sun 07:34>
 - 9526 too high <2021-12-05 Sun 07:37>
 - 5145 correct <2021-12-05 Sun 07:38>
** part 2
#+BEGIN_SRC cpp :results output
#include <stdio.h>
#define MAX 1000
int main() {
  int grid[MAX][MAX] = { 0 };

  FILE *f = fopen("05.txt", "r");
  int x1, y1, x2, y2;
  int tmp;
  while (fscanf(f, "%d,%d -> %d,%d\n", &x1, &y1, &x2, &y2) == 4) {
    int x = x1, y = y1;
      grid[y][x]++;
    do {
      if (x < x2) x++; else if (x > x2) x--;
      if (y < y2) y++; else if (y > y2) y--;
      grid[y][x]++;
    } while (x != x2 || y != y2);
    //printf("## %d,%d -> %d,%d\n", x1, y1, x2, y2);
  if (false)
  for (int y = 0; y < MAX; y++) {
    for (int x = 0; x < MAX; x++) {
      printf("%c", grid[y][x] == 0 ? '.' : '0'+grid[y][x]);
    }
    printf("\n");
  }
  }

  int overlaps = 0;
  for (int y = 0; y < MAX; y++) 
    for (int x = 0; x < MAX; x++)
      if (grid[y][x] >= 2)
        overlaps++;

  if (false)
  for (int y = 0; y < MAX; y++) {
    for (int x = 0; x < MAX; x++) {
      printf("%c", grid[y][x] == 0 ? '.' : '0'+grid[y][x]);
    }
    printf("\n");
  }


  printf("= %d\n", overlaps);
  return 0;
}
#+END_SRC 

#+RESULTS:
: = 16518

 - 7074 too low <2021-12-05 Sun 07:40>
 - 16518 correct <2021-12-05 Sun 07:48>
   
* day 6
** puzzle
--- Day 6: Lanternfish ---

The sea floor is getting steeper. Maybe the sleigh keys got carried this way?

A massive school of glowing lanternfish swims past. They must spawn quickly to reach such large numbers - maybe exponentially quickly? You should model their growth rate to be sure.

Although you know nothing about this specific species of lanternfish, you make some guesses about their attributes. Surely, each lanternfish creates a new lanternfish once every 7 days.

However, this process isn't necessarily synchronized between every lanternfish - one lanternfish might have 2 days left until it creates another lanternfish, while another might have 4. So, you can model each fish as a single number that represents the number of days until it creates a new lanternfish.

Furthermore, you reason, a new lanternfish would surely need slightly longer before it's capable of producing more lanternfish: two more days for its first cycle.

So, suppose you have a lanternfish with an internal timer value of 3:

    After one day, its internal timer would become 2.
    After another day, its internal timer would become 1.
    After another day, its internal timer would become 0.
    After another day, its internal timer would reset to 6, and it would create a new lanternfish with an internal timer of 8.
    After another day, the first lanternfish would have an internal timer of 5, and the second lanternfish would have an internal timer of 7.

A lanternfish that creates a new fish resets its timer to 6, not 7 (because 0 is included as a valid timer value). The new lanternfish starts with an internal timer of 8 and does not start counting down until the next day.

Realizing what you're trying to do, the submarine automatically produces a list of the ages of several hundred nearby lanternfish (your puzzle input). For example, suppose you were given the following list:

3,4,3,1,2

This list means that the first fish has an internal timer of 3, the second fish has an internal timer of 4, and so on until the fifth fish, which has an internal timer of 2. Simulating these fish over several days would proceed as follows:

Initial state: 3,4,3,1,2
After  1 day:  2,3,2,0,1
After  2 days: 1,2,1,6,0,8
After  3 days: 0,1,0,5,6,7,8
After  4 days: 6,0,6,4,5,6,7,8,8
After  5 days: 5,6,5,3,4,5,6,7,7,8
After  6 days: 4,5,4,2,3,4,5,6,6,7
After  7 days: 3,4,3,1,2,3,4,5,5,6
After  8 days: 2,3,2,0,1,2,3,4,4,5
After  9 days: 1,2,1,6,0,1,2,3,3,4,8
After 10 days: 0,1,0,5,6,0,1,2,2,3,7,8
After 11 days: 6,0,6,4,5,6,0,1,1,2,6,7,8,8,8
After 12 days: 5,6,5,3,4,5,6,0,0,1,5,6,7,7,7,8,8
After 13 days: 4,5,4,2,3,4,5,6,6,0,4,5,6,6,6,7,7,8,8
After 14 days: 3,4,3,1,2,3,4,5,5,6,3,4,5,5,5,6,6,7,7,8
After 15 days: 2,3,2,0,1,2,3,4,4,5,2,3,4,4,4,5,5,6,6,7
After 16 days: 1,2,1,6,0,1,2,3,3,4,1,2,3,3,3,4,4,5,5,6,8
After 17 days: 0,1,0,5,6,0,1,2,2,3,0,1,2,2,2,3,3,4,4,5,7,8
After 18 days: 6,0,6,4,5,6,0,1,1,2,6,0,1,1,1,2,2,3,3,4,6,7,8,8,8,8

Each day, a 0 becomes a 6 and adds a new 8 to the end of the list, while each other number decreases by 1 if it was present at the start of the day.

In this example, after 18 days, there are a total of 26 fish. After 80 days, there would be a total of 5934.

Find a way to simulate lanternfish. How many lanternfish would there be after 80 days?

Your puzzle answer was 351092.
--- Part Two ---

Suppose the lanternfish live forever and have unlimited food and space. Would they take over the entire ocean?

After 256 days in the example above, there would be a total of 26984457539 lanternfish!

How many lanternfish would there be after 256 days?

Your puzzle answer was 1595330616005.

Both parts of this puzzle are complete! They provide two gold stars: **
** part 1
 - <2021-12-06 Mon 17:07>
#+BEGIN_SRC cpp :results output
#include <stdio.h>
#include <string.h>
int main() {
  FILE *f = fopen("06.txt", "r");

  int dayToCount[9] = {0};
  char line[1024];
  fgets(line, sizeof(line), f);
  for (int i = 0; line[i]; i++) {
    if (line[i] >= '0' && line[i] <= '9')
      dayToCount[line[i]-'0']++;
  }

  for (int i = 0; i < 9; i++) {
    printf("%d=%d\n", i, dayToCount[i]);
  }
  printf("\n");

  for (int day = 0; day < 80; day++) {
    int zeros = dayToCount[0];
    for (int i = 0; i < 9; i++)
      dayToCount[i] = dayToCount[i+1];
    dayToCount[8] = zeros;
    dayToCount[6] += zeros;
  }

  int sum = 0;
  for (int i = 0; i < 9; i++) {
    printf("%d=%d\n", i, dayToCount[i]);
    sum += dayToCount[i];
  }

  printf("= %d\n", sum);
  return 0;
}
#+END_SRC

#+RESULTS:
#+begin_example
0=0
1=83
2=51
3=58
4=54
5=54
6=0
7=0
8=0

0=25532
1=42594
2=31998
3=47322
4=42341
5=47270
6=57495
7=23297
8=33243
= 351092
#+end_example

 - 595118 too high <2021-12-06 Mon 17:19>
 - 351092 correct <2021-12-06 Mon 17:22>
** part 2
#+BEGIN_SRC cpp :results output
#include <stdio.h>
#include <string.h>
int main() {
  FILE *f = fopen("06.txt", "r");

  long dayToCount[9] = {0};
  char line[1024];
  fgets(line, sizeof(line), f);
  for (int i = 0; line[i]; i++) {
    if (line[i] >= '0' && line[i] <= '9')
      dayToCount[line[i]-'0']++;
  }

  for (int i = 0; i < 9; i++) {
    printf("%d=%ld\n", i, dayToCount[i]);
  }
  printf("\n");

  for (int day = 0; day < 256; day++) {
    long zeros = dayToCount[0];
    for (int i = 0; i < 9; i++)
      dayToCount[i] = dayToCount[i+1];
    dayToCount[8] = zeros;
    dayToCount[6] += zeros;
  }

  long sum = 0;
  for (int i = 0; i < 9; i++) {
    printf("%d=%ld\n", i, dayToCount[i]);
    sum += dayToCount[i];
  }

  printf("= %ld\n", sum);
  return 0;
}
#+END_SRC

#+RESULTS:
#+begin_example
0=0
1=83
2=51
3=58
4=54
5=54
6=0
7=0
8=0

0=140304164138
1=162039539115
2=170391060831
3=188187916968
4=208218433266
5=218720012046
6=252082120574
7=117783213814
8=137604155253
= 1595330616005
#+end_example

 - 1595330616005 correct <2021-12-06 Mon 17:24>
* day 7
** puzzle
--- Day 7: The Treachery of Whales ---

A giant whale has decided your submarine is its next meal, and it's much faster than you are. There's nowhere to run!

Suddenly, a swarm of crabs (each in its own tiny submarine - it's too deep for them otherwise) zooms in to rescue you! They seem to be preparing to blast a hole in the ocean floor; sensors indicate a massive underground cave system just beyond where they're aiming!

The crab submarines all need to be aligned before they'll have enough power to blast a large enough hole for your submarine to get through. However, it doesn't look like they'll be aligned before the whale catches you! Maybe you can help?

There's one major catch - crab submarines can only move horizontally.

You quickly make a list of the horizontal position of each crab (your puzzle input). Crab submarines have limited fuel, so you need to find a way to make all of their horizontal positions match while requiring them to spend as little fuel as possible.

For example, consider the following horizontal positions:

16,1,2,0,4,2,7,1,2,14

This means there's a crab with horizontal position 16, a crab with horizontal position 1, and so on.

Each change of 1 step in horizontal position of a single crab costs 1 fuel. You could choose any horizontal position to align them all on, but the one that costs the least fuel is horizontal position 2:

    Move from 16 to 2: 14 fuel
    Move from 1 to 2: 1 fuel
    Move from 2 to 2: 0 fuel
    Move from 0 to 2: 2 fuel
    Move from 4 to 2: 2 fuel
    Move from 2 to 2: 0 fuel
    Move from 7 to 2: 5 fuel
    Move from 1 to 2: 1 fuel
    Move from 2 to 2: 0 fuel
    Move from 14 to 2: 12 fuel

This costs a total of 37 fuel. This is the cheapest possible outcome; more expensive outcomes include aligning at position 1 (41 fuel), position 3 (39 fuel), or position 10 (71 fuel).

Determine the horizontal position that the crabs can align to using the least fuel possible. How much fuel must they spend to align to that position?

Your puzzle answer was 337833.
--- Part Two ---

The crabs don't seem interested in your proposed solution. Perhaps you misunderstand crab engineering?

As it turns out, crab submarine engines don't burn fuel at a constant rate. Instead, each change of 1 step in horizontal position costs 1 more unit of fuel than the last: the first step costs 1, the second step costs 2, the third step costs 3, and so on.

As each crab moves, moving further becomes more expensive. This changes the best horizontal position to align them all on; in the example above, this becomes 5:

    Move from 16 to 5: 66 fuel
    Move from 1 to 5: 10 fuel
    Move from 2 to 5: 6 fuel
    Move from 0 to 5: 15 fuel
    Move from 4 to 5: 1 fuel
    Move from 2 to 5: 6 fuel
    Move from 7 to 5: 3 fuel
    Move from 1 to 5: 10 fuel
    Move from 2 to 5: 6 fuel
    Move from 14 to 5: 45 fuel

This costs a total of 168 fuel. This is the new cheapest possible outcome; the old alignment position (2) now costs 206 fuel instead.

Determine the horizontal position that the crabs can align to using the least fuel possible so they can make you an escape route! How much fuel must they spend to align to that position?

Your puzzle answer was 96678050.

Both parts of this puzzle are complete! They provide two gold stars: **
** part 1
 - <2021-12-07 Tue 17:31>
#+BEGIN_SRC cpp :results output
#include <stdio.h>
#include <stdlib.h>
int main() {
  int poss[1024];
  int possi = 0;
  FILE *f = fopen("07.txt", "r");
  char line[1024];
  int linei = 0, c;
  while ((c = fgetc(f)) != EOF) {
    if (c >= '0' && c <= '9') {
      line[linei++] = c;
    } else {
      if (linei >= 1) {
        line[linei] = 0;
        poss[possi++] = atoi(line);
      }
      linei = 0;
    }
  }
  int min = 99999, max = 0;
  for (int i = 0; i < possi; i++) {
    if (poss[i] < min) min = poss[i];
    if (poss[i] > max) max = poss[i];
  }
  int mincost = 9999999999;
  int mina = -1;
  for (int a = min; a <= max; a++) {
    int cost = 0;
    for (int i = 0; i < possi; i++) {
      cost += poss[i] > a ? poss[i] - a : a - poss[i];
    }
    if (cost < mincost || mina == -1) {
      mincost = cost;
      mina = a;
    }
  }

  printf("= %d\n", mincost);
  return 0;
}
#+END_SRC

#+RESULTS:
: = 337833

 - 331 too low <2021-12-07 Tue 17:44>
 - 337833 correct <2021-12-07 Tue 17:47>
** part 2
#+BEGIN_SRC cpp :results output
#include <stdio.h>
#include <stdlib.h>
int main() {
  int poss[1024];
  int possi = 0;
  FILE *f = fopen("07.txt", "r");
  char line[1024];
  int linei = 0, c;
  while ((c = fgetc(f)) != EOF) {
    if (c >= '0' && c <= '9') {
      line[linei++] = c;
    } else {
      if (linei >= 1) {
        line[linei] = 0;
        poss[possi++] = atoi(line);
      }
      linei = 0;
    }
  }
  int min = 99999, max = 0;
  for (int i = 0; i < possi; i++) {
    if (poss[i] < min) min = poss[i];
    if (poss[i] > max) max = poss[i];
  }
  int mincost = 9999999999;
  int mina = -1;
  for (int a = min; a <= max; a++) {
    int cost = 0;
    for (int i = 0; i < possi; i++) {
      for (int j = 1; j <= (poss[i] > a ? poss[i] - a : a - poss[i]); j++)
        cost += j;
      //cost += poss[i] > a ? poss[i] - a : a - poss[i];
    }
    if (cost < mincost || mina == -1) {
      mincost = cost;
      mina = a;
    }
  }

  printf("= %d\n", mincost);
  return 0;
}
#+END_SRC

#+RESULTS:
: = 96678050

 - 96678050 correct <2021-12-07 Tue 17:49>
* day 8
** puzzle
--- Day 8: Seven Segment Search ---

You barely reach the safety of the cave when the whale smashes into the cave mouth, collapsing it. Sensors indicate another exit to this cave at a much greater depth, so you have no choice but to press on.

As your submarine slowly makes its way through the cave system, you notice that the four-digit seven-segment displays in your submarine are malfunctioning; they must have been damaged during the escape. You'll be in a lot of trouble without them, so you'd better figure out what's wrong.

Each digit of a seven-segment display is rendered by turning on or off any of seven segments named a through g:

  0:      1:      2:      3:      4:
 aaaa    ....    aaaa    aaaa    ....
b    c  .    c  .    c  .    c  b    c
b    c  .    c  .    c  .    c  b    c
 ....    ....    dddd    dddd    dddd
e    f  .    f  e    .  .    f  .    f
e    f  .    f  e    .  .    f  .    f
 gggg    ....    gggg    gggg    ....

  5:      6:      7:      8:      9:
 aaaa    aaaa    aaaa    aaaa    aaaa
b    .  b    .  .    c  b    c  b    c
b    .  b    .  .    c  b    c  b    c
 dddd    dddd    ....    dddd    dddd
.    f  e    f  .    f  e    f  .    f
.    f  e    f  .    f  e    f  .    f
 gggg    gggg    ....    gggg    gggg

So, to render a 1, only segments c and f would be turned on; the rest would be off. To render a 7, only segments a, c, and f would be turned on.

The problem is that the signals which control the segments have been mixed up on each display. The submarine is still trying to display numbers by producing output on signal wires a through g, but those wires are connected to segments randomly. Worse, the wire/segment connections are mixed up separately for each four-digit display! (All of the digits within a display use the same connections, though.)

So, you might know that only signal wires b and g are turned on, but that doesn't mean segments b and g are turned on: the only digit that uses two segments is 1, so it must mean segments c and f are meant to be on. With just that information, you still can't tell which wire (b/g) goes to which segment (c/f). For that, you'll need to collect more information.

For each display, you watch the changing signals for a while, make a note of all ten unique signal patterns you see, and then write down a single four digit output value (your puzzle input). Using the signal patterns, you should be able to work out which pattern corresponds to which digit.

For example, here is what you might see in a single entry in your notes:

acedgfb cdfbe gcdfa fbcad dab cefabd cdfgeb eafb cagedb ab |
cdfeb fcadb cdfeb cdbaf

(The entry is wrapped here to two lines so it fits; in your notes, it will all be on a single line.)

Each entry consists of ten unique signal patterns, a | delimiter, and finally the four digit output value. Within an entry, the same wire/segment connections are used (but you don't know what the connections actually are). The unique signal patterns correspond to the ten different ways the submarine tries to render a digit using the current wire/segment connections. Because 7 is the only digit that uses three segments, dab in the above example means that to render a 7, signal lines d, a, and b are on. Because 4 is the only digit that uses four segments, eafb means that to render a 4, signal lines e, a, f, and b are on.

Using this information, you should be able to work out which combination of signal wires corresponds to each of the ten digits. Then, you can decode the four digit output value. Unfortunately, in the above example, all of the digits in the output value (cdfeb fcadb cdfeb cdbaf) use five segments and are more difficult to deduce.

For now, focus on the easy digits. Consider this larger example:

be cfbegad cbdgef fgaecd cgeb fdcge agebfd fecdb fabcd edb |
fdgacbe cefdb cefbgd gcbe
edbfga begcd cbg gc gcadebf fbgde acbgfd abcde gfcbed gfec |
fcgedb cgb dgebacf gc
fgaebd cg bdaec gdafb agbcfd gdcbef bgcad gfac gcb cdgabef |
cg cg fdcagb cbg
fbegcd cbd adcefb dageb afcb bc aefdc ecdab fgdeca fcdbega |
efabcd cedba gadfec cb
aecbfdg fbg gf bafeg dbefa fcge gcbea fcaegb dgceab fcbdga |
gecf egdcabf bgf bfgea
fgeab ca afcebg bdacfeg cfaedg gcfdb baec bfadeg bafgc acf |
gebdcfa ecba ca fadegcb
dbcfg fgd bdegcaf fgec aegbdf ecdfab fbedc dacgb gdcebf gf |
cefg dcbef fcge gbcadfe
bdfegc cbegaf gecbf dfcage bdacg ed bedf ced adcbefg gebcd |
ed bcgafe cdgba cbgef
egadfb cdbfeg cegd fecab cgb gbdefca cg fgcdab egfdb bfceg |
gbdfcae bgc cg cgb
gcafb gcf dcaebfg ecagb gf abcdeg gaef cafbge fdbac fegbdc |
fgae cfgab fg bagce

Because the digits 1, 4, 7, and 8 each use a unique number of segments, you should be able to tell which combinations of signals correspond to those digits. Counting only digits in the output values (the part after | on each line), in the above example, there are 26 instances of digits that use a unique number of segments (highlighted above).

In the output values, how many times do digits 1, 4, 7, or 8 appear?

Your puzzle answer was 237.
--- Part Two ---

Through a little deduction, you should now be able to determine the remaining digits. Consider again the first example above:

acedgfb cdfbe gcdfa fbcad dab cefabd cdfgeb eafb cagedb ab |
cdfeb fcadb cdfeb cdbaf

After some careful analysis, the mapping between signal wires and segments only make sense in the following configuration:

 dddd
e    a
e    a
 ffff
g    b
g    b
 cccc

So, the unique signal patterns would correspond to the following digits:

    acedgfb: 8
    cdfbe: 5
    gcdfa: 2
    fbcad: 3
    dab: 7
    cefabd: 9
    cdfgeb: 6
    eafb: 4
    cagedb: 0
    ab: 1

Then, the four digits of the output value can be decoded:

    cdfeb: 5
    fcadb: 3
    cdfeb: 5
    cdbaf: 3

Therefore, the output value for this entry is 5353.

Following this same process for each entry in the second, larger example above, the output value of each entry can be determined:

    fdgacbe cefdb cefbgd gcbe: 8394
    fcgedb cgb dgebacf gc: 9781
    cg cg fdcagb cbg: 1197
    efabcd cedba gadfec cb: 9361
    gecf egdcabf bgf bfgea: 4873
    gebdcfa ecba ca fadegcb: 8418
    cefg dcbef fcge gbcadfe: 4548
    ed bcgafe cdgba cbgef: 1625
    gbdfcae bgc cg cgb: 8717
    fgae cfgab fg bagce: 4315

Adding all of the output values in this larger example produces 61229.

For each entry, determine all of the wire/segment connections and decode the four-digit output values. What do you get if you add up all of the output values?

Your puzzle answer was 1009098.

Both parts of this puzzle are complete! They provide two gold stars: **
** part 1
 - <2021-12-08 Wed 17:04>
#+BEGIN_SRC cpp :results output
#include <stdio.h>
int main() {
  FILE *f = fopen("08.txt", "r");
  char line[1024];
  int knowns = 0;
  while (fgets(line, sizeof(line), f)) {
    int i = 0;
    while (line[i] != '|') i++;
    int len = 0;
    while (line[i] != '\n') {
      i++;
      if (line[i] >= 'a' && line[i] <= 'z') {
        len++;
      } else {
        if (len == 2 || len == 4 || len == 3 || len == 7)
          knowns++;
        len = 0;
      }
    }
  }
  printf("%d\n", knowns);
  return 0;
}
#+END_SRC

#+RESULTS:
: 237


 - 75 wrong <2021-12-08 Wed 17:13>
 - 237 correct <2021-12-08 Wed 17:15>
** part 2
#+BEGIN_SRC cpp :results output
  #include <stdio.h>
  int main() {
    FILE *f = fopen("08.txt", "r");
    char line[1024];
    int knowns = 0;
    int sum = 0;
    while (fgets(line, sizeof(line), f)) {
      // 0=6, 1=2, 2=5, 3=5, 4=4, 5=5, 6=6, 7=3, 8=7, 9=6
      // 2=1
      // 3=7
      // 4=4
      // 5=2,3,5
      // 6=0,6,9
      // 7=8
      
      // acedgfb cdfbe gcdfa fbcad dab cefabd cdfgeb eafb cagedb ab
      // ab = 1 so ab -> cf
      // dab = 7 so abd -> acf so d -> a
      // eafb = 4 so eafb -> bcdf so ef -> bd
      // acedgfb = 8 so nothing
      // look for 0 (has len=6 and cf and one of bd)
      // look for 9 (has len=6 and cf and bd)
      // look for 6 (has len=6 and one of cf and bd)
      // look for 2 (has len=5 and one of cf and one of bd)
      // look for 3 (has len=5 and cf and one of bd)
      // look for 5 (has len=5 and one of cf and bd)

  //   0:  
  //  aaaa    0000
  // b    c  1    2 
  // b    c  1    2
  //  dddd    3333
  // e    f  4    5
  // e    f  4    5
  //  gggg    6666

      char bd[7] = { false };
      char cf[7] = { false };
      char val[7] = { false };
      int vallen = 0;
      for (int state = 0; state < 2; state++) {
      for (int i = 0; line[i] != '|'; i++) {
        if (line[i] >= 'a' && line[i] <= 'z') {
          val[line[i] - 'a'] = true;
          vallen++;
        } else {
          //printf("%d%d %d%d %d%d %d%d\n", val[0], val[1], val[2], val[3], val[4], val[5], val[6], val[7]);

          if (state == 0 && vallen == 2) { // 1
            for (int j = 0; j < 7; j++)
              cf[j] = val[j];
          }
          if (state == 1 && vallen == 4) { // 4
            for (int j = 0; j < 7; j++)
              bd[j] = val[j] && !cf[j];
          }
          for (int j = 0; j < 7; j++) val[j] = false;
          vallen = 0;
        }
      }
      }

      int result = 0;
      int state = 0;
      for (int i = 0; i == 0 || line[i-1] != '\n'; i++) {
        if (state == 0) {
          if (line[i] == '|') {
            state = 1;
            i++;
          }
          continue;
        }
        if (line[i] >= 'a' && line[i] <= 'z') {
          val[line[i] - 'a'] = true;
          vallen++;
        } else {
          //printf("%d%d %d%d %d%d %d\n", val[0], val[1], val[2], val[3], val[4], val[5], val[6]);

          result *= 10;

          int has_cfs = 0;
          int has_bds = 0;
          for (int j = 0; j < 7; j++) {
            if (val[j] && bd[j]) has_bds++;
            if (val[j] && cf[j]) has_cfs++;
          }

          if (vallen == 6 && has_cfs == 2 && has_bds == 1)
            result += 0;
          else if (vallen == 2)
            result += 1;
          else if (vallen == 5 && has_cfs == 1 && has_bds == 1)
            result += 2;
          else if (vallen == 5 && has_cfs == 2 && has_bds == 1)
            result += 3;
          else if (vallen == 4)
            result += 4;
          else if (vallen == 5 && has_cfs == 1 && has_bds == 2)
            result += 5;
          else if (vallen == 6 && has_cfs == 1 && has_bds == 2)
            result += 6;
          else if (vallen == 3)
            result += 7;
          else if (vallen == 7)
            result += 8;
          else if (vallen == 6 && has_cfs == 2 && has_bds == 2)
            result += 9;
          else
            printf("## !\n");

          for (int j = 0; j < 7; j++) val[j] = false;
          vallen = 0;
        }
      }
      //printf("## %d\n", result);
      sum += result;
    }
    printf("%d\n", sum);
    return 0;
  }
#+END_SRC

#+RESULTS:
: 1009098

 - 1009098 correct <2021-12-08 Wed 18:27>
* day 9
** puzzle
** part 1
 - <2021-12-09 Thu 17:40>
#+BEGIN_SRC cpp :results output
#include <stdio.h>
#include <string.h>
int main() {
  FILE *f = fopen("09.txt", "r");
  char grid[110][110];
  int gridx = 0;
  int gridy = 0;
  char line[1024];
  while (fgets(line, sizeof(line), f)) {
    for (int i = 0; line[i] != '\n'; i++) {
      grid[gridy][i] = line[i] - '0';
      gridx = i + 1;
    }
    gridy++;
  }

  if (false) {
  printf("## %dx%d\n", gridy, gridx);
  for (int i = 0; i < gridy; i++) {
    for (int j = 0; j < gridx; j++) {
      printf("%d", grid[i][j]);
    }
    printf("\n");
  }
  }

  int sum = 0;
  for (int i = 0; i < gridy; i++) {
    for (int j = 0; j < gridx; j++) {
      int islow = true;
      if (i > 0 && grid[i-1][j] <= grid[i][j]) islow = false;
      if (i < gridy-1 && grid[i+1][j] <= grid[i][j]) islow = false;
      if (j > 0 && grid[i][j-1] <= grid[i][j]) islow = false;
      if (j < gridx-1 && grid[i][j+1] <= grid[i][j]) islow = false;
      if (islow) {
        sum += 1 + grid[i][j];
        if (false) {
        printf("## %d,%d = %d,", i, j, grid[i][j]);
        if (i > 0) printf(" 1=%d", grid[i-1][j]);
        if (i < gridy-1) printf(" 2=%d", grid[i+1][j]);
        if (j > 0) printf(" 3=%d", grid[i][j-1]);
        if (j < gridx-1) printf(" 4=%d", grid[i][j+1]);
        printf("\n");
        }
      }
    }  
  }

  printf("%d\n", sum);
  return 0;
}
#+END_SRC

#+RESULTS:
: 465

 - 1815 too high <2021-12-09 Thu 17:51>
 - 465 correct <2021-12-09 Thu 18:01>
** part 2
#+BEGIN_SRC cpp :results output
#include <stdio.h>
#include <string.h>
int main() {
  FILE *f = fopen("09.txt", "r");
  char grid[110][110];
  int gridx = 0;
  int gridy = 0;
  char line[1024];
  while (fgets(line, sizeof(line), f)) {
    for (int i = 0; line[i] != '\n'; i++) {
      grid[gridy][i] = line[i] - '0';
      gridx = i + 1;
    }
    gridy++;
  }

  if (false) {
  printf("## %dx%d\n", gridy, gridx);
  for (int i = 0; i < gridy; i++) {
    for (int j = 0; j < gridx; j++) {
      printf("%d", grid[i][j]);
    }
    printf("\n");
  }
  }

  int basin1 = 0, basin2 = 0, basin3 = 0;

  char q[10000];
  int qi = 0;
  char mark[110][110] = {false};
  for (int i = 0; i < gridy; i++) {
    for (int j = 0; j < gridx; j++) {
      if (grid[i][j] == 9) continue;
      if (mark[i][j]) continue;

      int size = 0;
      q[qi++] = i;
      q[qi++] = j;
      while (qi != 0) {
        int ci = q[qi-2];
        int cj = q[qi-1];
        qi -= 2;
        if (mark[ci][cj]) continue;
        mark[ci][cj] = true;
        if (grid[ci][cj] == 9) continue;
        size++;

        if (ci > 0 && !mark[ci-1][cj] && grid[ci-1][cj] != 9) { q[qi++] = ci-1; q[qi++] = cj; }
        if (ci < gridy-1 && !mark[ci+1][cj] && grid[ci+1][cj] != 9) { q[qi++] = ci+1; q[qi++] = cj; }
        if (cj > 0 && !mark[ci][cj-1] && grid[ci][cj-1] != 9) { q[qi++] = ci; q[qi++] = cj-1; }
        if (cj < gridx-1 && !mark[ci][cj+1] && grid[ci][cj+1] != 9) { q[qi++] = ci; q[qi++] = cj+1; }
        if (qi > sizeof(q)) { printf("qi big\n"); return 0; }
      }

      if (size > basin1) {
        basin3 = basin2;
        basin2 = basin1;
        basin1 = size;
      } else if (size > basin2) {
        basin3 = basin2;
        basin2 = size;
      } else if (size > basin3) {
        basin3 = size;
      }
    }
  }

  printf("%d\n", basin1 * basin2 * basin3);
  return 0;
}
#+END_SRC

#+RESULTS:
: 1269555

 - 1269555 correct <2021-12-09 Thu 18:41>
* day 10
** puzzle
--- Day 10: Syntax Scoring ---

You ask the submarine to determine the best route out of the deep-sea cave, but it only replies:

Syntax error in navigation subsystem on line: all of them

All of them?! The damage is worse than you thought. You bring up a copy of the navigation subsystem (your puzzle input).

The navigation subsystem syntax is made of several lines containing chunks. There are one or more chunks on each line, and chunks contain zero or more other chunks. Adjacent chunks are not separated by any delimiter; if one chunk stops, the next chunk (if any) can immediately start. Every chunk must open and close with one of four legal pairs of matching characters:

    If a chunk opens with (, it must close with ).
    If a chunk opens with [, it must close with ].
    If a chunk opens with {, it must close with }.
    If a chunk opens with <, it must close with >.

So, () is a legal chunk that contains no other chunks, as is []. More complex but valid chunks include ([]), {()()()}, <([{}])>, [<>({}){}[([])<>]], and even (((((((((()))))))))).

Some lines are incomplete, but others are corrupted. Find and discard the corrupted lines first.

A corrupted line is one where a chunk closes with the wrong character - that is, where the characters it opens and closes with do not form one of the four legal pairs listed above.

Examples of corrupted chunks include (], {()()()>, (((()))}, and <([]){()}[{}]). Such a chunk can appear anywhere within a line, and its presence causes the whole line to be considered corrupted.

For example, consider the following navigation subsystem:

[({(<(())[]>[[{[]{<()<>>
[(()[<>])]({[<{<<[]>>(
{([(<{}[<>[]}>{[]{[(<()>
(((({<>}<{<{<>}{[]{[]{}
[[<[([]))<([[{}[[()]]]
[{[{({}]{}}([{[{{{}}([]
{<[[]]>}<{[{[{[]{()[[[]
[<(<(<(<{}))><([]([]()
<{([([[(<>()){}]>(<<{{
<{([{{}}[<[[[<>{}]]]>[]]

Some of the lines aren't corrupted, just incomplete; you can ignore these lines for now. The remaining five lines are corrupted:

    {([(<{}[<>[]}>{[]{[(<()> - Expected ], but found } instead.
    [[<[([]))<([[{}[[()]]] - Expected ], but found ) instead.
    [{[{({}]{}}([{[{{{}}([] - Expected ), but found ] instead.
    [<(<(<(<{}))><([]([]() - Expected >, but found ) instead.
    <{([([[(<>()){}]>(<<{{ - Expected ], but found > instead.

Stop at the first incorrect closing character on each corrupted line.

Did you know that syntax checkers actually have contests to see who can get the high score for syntax errors in a file? It's true! To calculate the syntax error score for a line, take the first illegal character on the line and look it up in the following table:

    ): 3 points.
    ]: 57 points.
    }: 1197 points.
    >: 25137 points.

In the above example, an illegal ) was found twice (2*3 = 6 points), an illegal ] was found once (57 points), an illegal } was found once (1197 points), and an illegal > was found once (25137 points). So, the total syntax error score for this file is 6+57+1197+25137 = 26397 points!

Find the first illegal character in each corrupted line of the navigation subsystem. What is the total syntax error score for those errors?

Your puzzle answer was 367059.
--- Part Two ---

Now, discard the corrupted lines. The remaining lines are incomplete.

Incomplete lines don't have any incorrect characters - instead, they're missing some closing characters at the end of the line. To repair the navigation subsystem, you just need to figure out the sequence of closing characters that complete all open chunks in the line.

You can only use closing characters (), ], }, or >), and you must add them in the correct order so that only legal pairs are formed and all chunks end up closed.

In the example above, there are five incomplete lines:

    [({(<(())[]>[[{[]{<()<>> - Complete by adding }}]])})].
    [(()[<>])]({[<{<<[]>>( - Complete by adding )}>]}).
    (((({<>}<{<{<>}{[]{[]{} - Complete by adding }}>}>)))).
    {<[[]]>}<{[{[{[]{()[[[] - Complete by adding ]]}}]}]}>.
    <{([{{}}[<[[[<>{}]]]>[]] - Complete by adding ])}>.

Did you know that autocomplete tools also have contests? It's true! The score is determined by considering the completion string character-by-character. Start with a total score of 0. Then, for each character, multiply the total score by 5 and then increase the total score by the point value given for the character in the following table:

    ): 1 point.
    ]: 2 points.
    }: 3 points.
    >: 4 points.

So, the last completion string above - ])}> - would be scored as follows:

    Start with a total score of 0.
    Multiply the total score by 5 to get 0, then add the value of ] (2) to get a new total score of 2.
    Multiply the total score by 5 to get 10, then add the value of ) (1) to get a new total score of 11.
    Multiply the total score by 5 to get 55, then add the value of } (3) to get a new total score of 58.
    Multiply the total score by 5 to get 290, then add the value of > (4) to get a new total score of 294.

The five lines' completion strings have total scores as follows:

    }}]])})] - 288957 total points.
    )}>]}) - 5566 total points.
    }}>}>)))) - 1480781 total points.
    ]]}}]}]}> - 995444 total points.
    ])}> - 294 total points.

Autocomplete tools are an odd bunch: the winner is found by sorting all of the scores and then taking the middle score. (There will always be an odd number of scores to consider.) In this example, the middle score is 288957 because there are the same number of scores smaller and larger than it.

Find the completion string for each incomplete line, score the completion strings, and sort the scores. What is the middle score?

Your puzzle answer was 1952146692.

Both parts of this puzzle are complete! They provide two gold stars: **
** part 1
 - <2021-12-10 Fri 17:23>
#+BEGIN_SRC cpp :results output
#include <stdio.h>
int main() {
  FILE *f = fopen("10.txt", "r");
  char line[1024];

  int score = 0;
  while (fgets(line, sizeof(line), f)) {
    char s[1024];
    int si = 0;
    for (int i = 0; line[i] != '\n'; i++) {
      if (line[i] == '(' || line[i] == '[' || line[i] == '{' || line[i] == '<') {
        s[si++] = line[i];
      } else {
        if (si == 0) goto end;
        if (line[i] == ')') {
          if (s[--si] != '(') { score += 3; goto end; }
        } else if (line[i] == ']') {
          if (s[--si] != '[') { score += 57; goto end; }
        } else if (line[i] == '}') {
          if (s[--si] != '{') { score += 1197; goto end; }
        } else if (line[i] == '>') {
          if (s[--si] != '<') { score += 25137; goto end; }
        } else { printf("! %c\n", line[i]); return 0; }
      }
    }
    end:
    ;
  }
  printf("%d\n", score);
  return 0;
}
#+END_SRC

#+RESULTS:
: 806111462

 - 367059 correct <2021-12-10 Fri 17:39>
** part 2
#+BEGIN_SRC cpp :results output
#include <stdio.h>
#include <stdlib.h>

int cmpint(const void *p1, const void *p2) {
  long a = *(long*)p1;
  long b = *(long*)p2;
  return a < b ? -1 : a > b ? 1 : 0;
}

int main() {
  FILE *f = fopen("10.txt", "r");
  char line[1024];

  long scores[1024];
  int scoresi = 0;

  while (fgets(line, sizeof(line), f)) {
    char s[1024];
    int si = 0;
    int invalid = false;
    for (int i = 0; line[i] != '\n'; i++) {
      if (line[i] == '(' || line[i] == '[' || line[i] == '{' || line[i] == '<') {
        s[si++] = line[i];
      } else {
        if (si == 0) goto end;
        if (line[i] == ')') {
          if (s[--si] != '(') { invalid = true; goto end; }
        } else if (line[i] == ']') {
          if (s[--si] != '[') { invalid = true; goto end; }
        } else if (line[i] == '}') {
          if (s[--si] != '{') { invalid = true; goto end; }
        } else if (line[i] == '>') {
          if (s[--si] != '<') { invalid = true; goto end; }
        } else { printf("! %c\n", line[i]); return 0; }
      }
    }
    end:
    ;

    if (!invalid) {
      long score = 0;
      while (si > 0) {
        si--;
        score *= 5;
        if (s[si] == '(') score += 1;
        else if (s[si] == '[') score += 2;
        else if (s[si] == '{') score += 3;
        else if (s[si] == '<') score += 4;
      }
      scores[scoresi++] = score;
    }
  }

  qsort(scores, scoresi, sizeof(long), cmpint);

  printf("%ld\n", scores[scoresi/2]);
  return 0;
}
#+END_SRC

#+RESULTS:
: 1952146692

 - 598669714 too low <2021-12-10 Fri 18:05>
 - 1952146692 correct <2021-12-10 Fri 18:08>
