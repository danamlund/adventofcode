* setup
(require 'ob-org)
(require 'ob-python)
** stdout/stderr on bad exit-code
#+BEGIN_SRC elisp
(defun org-babel-eval (cmd body)
  "Run CMD on BODY.
If CMD succeeds then return its results, otherwise display
STDERR with `org-babel-eval-error-notify'."
  (let ((err-buff (get-buffer-create " *Org-Babel Error*")) exit-code)
    (with-current-buffer err-buff (erase-buffer))
    (with-temp-buffer
      (insert body)
      (setq exit-code
	    (org-babel--shell-command-on-region
	     (point-min) (point-max) cmd err-buff))
      (if (or (not (numberp exit-code)) (> exit-code 0))
	  (progn
	    (with-current-buffer err-buff
	      (org-babel-eval-error-notify exit-code (buffer-string)))
	    (save-excursion
	      (when (get-buffer org-babel-error-buffer-name)
		(with-current-buffer org-babel-error-buffer-name
		  (unless (derived-mode-p 'compilation-mode)
		    (compilation-mode))
		  ;; Compilation-mode enforces read-only, but Babel expects the buffer modifiable.
		  (setq buffer-read-only nil))))
	    (concat (buffer-string) "STDERR:\n" (with-current-buffer err-buff (buffer-string))))
	(buffer-string)))))
#+END_SRC
* make work
 - tangle file: C-c C-v t
 - C-c C-c code src

* day 1
** puzzle
--- Day 1: Report Repair ---

After saving Christmas five years in a row, you've decided to take a vacation at a nice resort on a tropical island. Surely, Christmas will go on without you.

The tropical island has its own currency and is entirely cash-only. The gold coins used there have a little picture of a starfish; the locals just call them stars. None of the currency exchanges seem to have heard of them, but somehow, you'll need to find fifty of these coins by the time you arrive so you can pay the deposit on your room.

To save your vacation, you need to get all fifty stars by December 25th.

Collect stars by solving puzzles. Two puzzles will be made available on each day in the Advent calendar; the second puzzle is unlocked when you complete the first. Each puzzle grants one star. Good luck!

Before you leave, the Elves in accounting just need you to fix your expense report (your puzzle input); apparently, something isn't quite adding up.

Specifically, they need you to find the two entries that sum to 2020 and then multiply those two numbers together.

For example, suppose your expense report contained the following:

1721
979
366
299
675
1456

In this list, the two entries that sum to 2020 are 1721 and 299. Multiplying them together produces 1721 * 299 = 514579, so the correct answer is 514579.

Of course, your expense report is much larger. Find the two entries that sum to 2020; what do you get if you multiply them together?

Your puzzle answer was 471019.
--- Part Two ---

The Elves in accounting are thankful for your help; one of them even offers you a starfish coin they had left over from a past vacation. They offer you a second one if you can find three numbers in your expense report that meet the same criteria.

Using the above example again, the three entries that sum to 2020 are 979, 366, and 675. Multiplying them together produces the answer, 241861950.

In your expense report, what is the product of the three entries that sum to 2020?

Your puzzle answer was 103927824.

Both parts of this puzzle are complete! They provide two gold stars: **
** star 1
 - <2020-12-08 Tue 19:24>
#+BEGIN_SRC cpp :results output
#include <stdio.h>

int main() {
  FILE *f = fopen("01.txt", "r");
  int a, b;
  while (1 == fscanf(f, "%d", &a)) {
    FILE *f2 = fopen("01.txt", "r");
    while (1 == fscanf(f2, "%d", &b)) {
      if (a + b == 2020) {
        printf("=%d\n", a*b);
        return 0;
      }
    }
    fclose(f2);
  }
  printf("sdasd\n");
  return 0;
}
#+END_SRC

#+RESULTS:
: =471019
 - <2020-12-08 Tue 19:28>

** star 2
- <2020-12-08 Tue 19:28>
#+BEGIN_SRC cpp :results output
#include <stdio.h>

int main() {
  FILE *f = fopen("01.txt", "r");
  int a, b, c;
  while (1 == fscanf(f, "%d", &a)) {
    FILE *f2 = fopen("01.txt", "r");
    while (1 == fscanf(f2, "%d", &b)) {
      FILE *f3 = fopen("01.txt", "r");
      while (1 == fscanf(f3, "%d", &c)) {
        if (a + b + c == 2020) {
          printf("=%d\n", a*b*c);
          return 0;
          }
      }
      fclose(f3);
    }
    fclose(f2);
  }
  printf("sdasd\n");
  return 0;
}
#+END_SRC

#+RESULTS:
: =103927824
 - <2020-12-08 Tue 19:30>
* day 2
** puzzle
--- Day 2: Password Philosophy ---

Your flight departs in a few days from the coastal airport; the easiest way down to the coast from here is via toboggan.

The shopkeeper at the North Pole Toboggan Rental Shop is having a bad day. "Something's wrong with our computers; we can't log in!" You ask if you can take a look.

Their password database seems to be a little corrupted: some of the passwords wouldn't have been allowed by the Official Toboggan Corporate Policy that was in effect when they were chosen.

To try to debug the problem, they have created a list (your puzzle input) of passwords (according to the corrupted database) and the corporate policy when that password was set.

For example, suppose you have the following list:

1-3 a: abcde
1-3 b: cdefg
2-9 c: ccccccccc

Each line gives the password policy and then the password. The password policy indicates the lowest and highest number of times a given letter must appear for the password to be valid. For example, 1-3 a means that the password must contain a at least 1 time and at most 3 times.

In the above example, 2 passwords are valid. The middle password, cdefg, is not; it contains no instances of b, but needs at least 1. The first and third passwords are valid: they contain one a or nine c, both within the limits of their respective policies.

How many passwords are valid according to their policies?

Your puzzle answer was 550.
--- Part Two ---

While it appears you validated the passwords correctly, they don't seem to be what the Official Toboggan Corporate Authentication System is expecting.

The shopkeeper suddenly realizes that he just accidentally explained the password policy rules from his old job at the sled rental place down the street! The Official Toboggan Corporate Policy actually works a little differently.

Each policy actually describes two positions in the password, where 1 means the first character, 2 means the second character, and so on. (Be careful; Toboggan Corporate Policies have no concept of "index zero"!) Exactly one of these positions must contain the given letter. Other occurrences of the letter are irrelevant for the purposes of policy enforcement.

Given the same example list from above:

    1-3 a: abcde is valid: position 1 contains a and position 3 does not.
    1-3 b: cdefg is invalid: neither position 1 nor position 3 contains b.
    2-9 c: ccccccccc is invalid: both position 2 and position 9 contain c.

How many passwords are valid according to the new interpretation of the policies?

Your puzzle answer was 634.

Both parts of this puzzle are complete! They provide two gold stars: **
** star 1
<2020-12-08 Tue 19:30>
#+BEGIN_SRC cpp :results output
#include <stdio.h>
int main() {
  FILE *f = fopen("02.txt", "r");
  int min, max;
  char c;
  char password[200] = {0};
  int valids = 0;
  while (4 == fscanf(f, "%d-%d %c: %s", &min, &max, &c, password)) {
    //printf("%d-%d %c: '%s'\n", min, max, c, password);

    int count = 0;
    for (int i = 0; password[i]; i++) {
      if (password[i] == c) count++;
    }
    if (count >= min && count <= max) {
      valids++;
    }
  }
  printf("= %d\n", valids);
  return 0;
}
#+END_SRC

#+RESULTS:
: = 550

- <2020-12-08 Tue 19:40>
** star 2
- <2020-12-08 Tue 19:40>
#+BEGIN_SRC cpp :results output
#include <stdio.h>
int main() {
  FILE *f = fopen("02.txt", "r");
  int min, max;
  char c;
  char password[200] = {0};
  int valids = 0;
  while (4 == fscanf(f, "%d-%d %c: %s", &min, &max, &c, password)) {
    //printf("%d-%d %c: '%s'\n", min, max, c, password);
    if (password[min-1] == c ^ password[max-1] == c) valids++;
  }
  printf("= %d\n", valids);
  return 0;
}
#+END_SRC

#+RESULTS:
: = 634


- <2020-12-08 Tue 19:41>
* day 3
** puzzle
--- Day 3: Toboggan Trajectory ---

With the toboggan login problems resolved, you set off toward the airport. While travel by toboggan might be easy, it's certainly not safe: there's very minimal steering and the area is covered in trees. You'll need to see which angles will take you near the fewest trees.

Due to the local geology, trees in this area only grow on exact integer coordinates in a grid. You make a map (your puzzle input) of the open squares (.) and trees (#) you can see. For example:

..##.......
#...#...#..
.#....#..#.
..#.#...#.#
.#...##..#.
..#.##.....
.#.#.#....#
.#........#
#.##...#...
#...##....#
.#..#...#.#

These aren't the only trees, though; due to something you read about once involving arboreal genetics and biome stability, the same pattern repeats to the right many times:

..##.........##.........##.........##.........##.........##.......  --->
#...#...#..#...#...#..#...#...#..#...#...#..#...#...#..#...#...#..
.#....#..#..#....#..#..#....#..#..#....#..#..#....#..#..#....#..#.
..#.#...#.#..#.#...#.#..#.#...#.#..#.#...#.#..#.#...#.#..#.#...#.#
.#...##..#..#...##..#..#...##..#..#...##..#..#...##..#..#...##..#.
..#.##.......#.##.......#.##.......#.##.......#.##.......#.##.....  --->
.#.#.#....#.#.#.#....#.#.#.#....#.#.#.#....#.#.#.#....#.#.#.#....#
.#........#.#........#.#........#.#........#.#........#.#........#
#.##...#...#.##...#...#.##...#...#.##...#...#.##...#...#.##...#...
#...##....##...##....##...##....##...##....##...##....##...##....#
.#..#...#.#.#..#...#.#.#..#...#.#.#..#...#.#.#..#...#.#.#..#...#.#  --->

You start on the open square (.) in the top-left corner and need to reach the bottom (below the bottom-most row on your map).

The toboggan can only follow a few specific slopes (you opted for a cheaper model that prefers rational numbers); start by counting all the trees you would encounter for the slope right 3, down 1:

From your starting position at the top-left, check the position that is right 3 and down 1. Then, check the position that is right 3 and down 1 from there, and so on until you go past the bottom of the map.

The locations you'd check in the above example are marked here with O where there was an open square and X where there was a tree:

..##.........##.........##.........##.........##.........##.......  --->
#..O#...#..#...#...#..#...#...#..#...#...#..#...#...#..#...#...#..
.#....X..#..#....#..#..#....#..#..#....#..#..#....#..#..#....#..#.
..#.#...#O#..#.#...#.#..#.#...#.#..#.#...#.#..#.#...#.#..#.#...#.#
.#...##..#..X...##..#..#...##..#..#...##..#..#...##..#..#...##..#.
..#.##.......#.X#.......#.##.......#.##.......#.##.......#.##.....  --->
.#.#.#....#.#.#.#.O..#.#.#.#....#.#.#.#....#.#.#.#....#.#.#.#....#
.#........#.#........X.#........#.#........#.#........#.#........#
#.##...#...#.##...#...#.X#...#...#.##...#...#.##...#...#.##...#...
#...##....##...##....##...#X....##...##....##...##....##...##....#
.#..#...#.#.#..#...#.#.#..#...X.#.#..#...#.#.#..#...#.#.#..#...#.#  --->

In this example, traversing the map using this slope would cause you to encounter 7 trees.

Starting at the top-left corner of your map and following a slope of right 3 and down 1, how many trees would you encounter?

Your puzzle answer was 156.
--- Part Two ---

Time to check the rest of the slopes - you need to minimize the probability of a sudden arboreal stop, after all.

Determine the number of trees you would encounter if, for each of the following slopes, you start at the top-left corner and traverse the map all the way to the bottom:

    Right 1, down 1.
    Right 3, down 1. (This is the slope you already checked.)
    Right 5, down 1.
    Right 7, down 1.
    Right 1, down 2.

In the above example, these slopes would find 2, 7, 3, 4, and 2 tree(s) respectively; multiplied together, these produce the answer 336.

What do you get if you multiply together the number of trees encountered on each of the listed slopes?

Your puzzle answer was 3521829480.

Both parts of this puzzle are complete! They provide two gold stars: **
** star 1
 - <2020-12-08 Tue 19:42>
#+BEGIN_SRC cpp :results output
  #include <stdio.h>
  int main() {
    FILE *f = fopen("03.txt", "r");
    char map[1000][1000] = {0};
    char c;
    printf("1\n");
    int width = 0;
    {
      int x = 0, y = 0;
      while ((c = fgetc(f)) != EOF) {
        if (c == '\n') { map[y][x] = 0; width = x; x = 0; y++; }
        else { map[y][x] = c; x++; }
      }
    }

    int trees = 0;
    int x = 0, y = 0;
    while (map[y][0]) {
      x = (x+3) % width; y += 1;
      if (map[y][x] == '#') trees++;
    }

    printf("=%d\n", trees);
    return 0;
  }
#+END_SRC

#+RESULTS:
: 1
: =156

 - <2020-12-08 Tue 19:54>
** star 2
 - <2020-12-08 Tue 19:54>
#+BEGIN_SRC cpp :results output
  #include <stdio.h>
  long trees(char map[1000][1000], int width, int dx, int dy) {
    int trees = 0;
    int x = 0, y = 0;
    while (map[y][0]) {
      x = (x+dx) % width; y += dy;
      if (map[y][x] == '#') trees++;
    }
    return trees;
  }
  int main() {
    FILE *f = fopen("03.txt", "r");
    char map[1000][1000] = {0};
    char c;
    printf("1\n");
    int width = 0;
    {
      int x = 0, y = 0;
      while ((c = fgetc(f)) != EOF) {
        if (c == '\n') { map[y][x] = 0; width = x; x = 0; y++; }
        else { map[y][x] = c; x++; }
      }
    }
    
    printf("=%ld\n", trees(map, width, 1, 1) 
                  * trees(map, width, 3, 1) 
                  * trees(map, width, 5, 1) 
                  * trees(map, width, 7, 1) 
                  * trees(map, width, 1, 2));
    //printf("=%d\n", trees);
    return 0;
  }
#+END_SRC

#+RESULTS:
: 1
: =3521829480

 - <2020-12-08 Tue 19:58>
* day 4
** puzzle
--- Day 4: Passport Processing ---

You arrive at the airport only to realize that you grabbed your North Pole Credentials instead of your passport. While these documents are extremely similar, North Pole Credentials aren't issued by a country and therefore aren't actually valid documentation for travel in most of the world.

It seems like you're not the only one having problems, though; a very long line has formed for the automatic passport scanners, and the delay could upset your travel itinerary.

Due to some questionable network security, you realize you might be able to solve both of these problems at the same time.

The automatic passport scanners are slow because they're having trouble detecting which passports have all required fields. The expected fields are as follows:

    byr (Birth Year)
    iyr (Issue Year)
    eyr (Expiration Year)
    hgt (Height)
    hcl (Hair Color)
    ecl (Eye Color)
    pid (Passport ID)
    cid (Country ID)

Passport data is validated in batch files (your puzzle input). Each passport is represented as a sequence of key:value pairs separated by spaces or newlines. Passports are separated by blank lines.

Here is an example batch file containing four passports:

ecl:gry pid:860033327 eyr:2020 hcl:#fffffd
byr:1937 iyr:2017 cid:147 hgt:183cm

iyr:2013 ecl:amb cid:350 eyr:2023 pid:028048884
hcl:#cfa07d byr:1929

hcl:#ae17e1 iyr:2013
eyr:2024
ecl:brn pid:760753108 byr:1931
hgt:179cm

hcl:#cfa07d eyr:2025 pid:166559648
iyr:2011 ecl:brn hgt:59in

The first passport is valid - all eight fields are present. The second passport is invalid - it is missing hgt (the Height field).

The third passport is interesting; the only missing field is cid, so it looks like data from North Pole Credentials, not a passport at all! Surely, nobody would mind if you made the system temporarily ignore missing cid fields. Treat this "passport" as valid.

The fourth passport is missing two fields, cid and byr. Missing cid is fine, but missing any other field is not, so this passport is invalid.

According to the above rules, your improved system would report 2 valid passports.

Count the number of valid passports - those that have all required fields. Treat cid as optional. In your batch file, how many passports are valid?

Your puzzle answer was 219.
--- Part Two ---

The line is moving more quickly now, but you overhear airport security talking about how passports with invalid data are getting through. Better add some data validation, quick!

You can continue to ignore the cid field, but each other field has strict rules about what values are valid for automatic validation:

    byr (Birth Year) - four digits; at least 1920 and at most 2002.
    iyr (Issue Year) - four digits; at least 2010 and at most 2020.
    eyr (Expiration Year) - four digits; at least 2020 and at most 2030.
    hgt (Height) - a number followed by either cm or in:
        If cm, the number must be at least 150 and at most 193.
        If in, the number must be at least 59 and at most 76.
    hcl (Hair Color) - a # followed by exactly six characters 0-9 or a-f.
    ecl (Eye Color) - exactly one of: amb blu brn gry grn hzl oth.
    pid (Passport ID) - a nine-digit number, including leading zeroes.
    cid (Country ID) - ignored, missing or not.

Your job is to count the passports where all required fields are both present and valid according to the above rules. Here are some example values:

byr valid:   2002
byr invalid: 2003

hgt valid:   60in
hgt valid:   190cm
hgt invalid: 190in
hgt invalid: 190

hcl valid:   #123abc
hcl invalid: #123abz
hcl invalid: 123abc

ecl valid:   brn
ecl invalid: wat

pid valid:   000000001
pid invalid: 0123456789

Here are some invalid passports:

eyr:1972 cid:100
hcl:#18171d ecl:amb hgt:170 pid:186cm iyr:2018 byr:1926

iyr:2019
hcl:#602927 eyr:1967 hgt:170cm
ecl:grn pid:012533040 byr:1946

hcl:dab227 iyr:2012
ecl:brn hgt:182cm pid:021572410 eyr:2020 byr:1992 cid:277

hgt:59cm ecl:zzz
eyr:2038 hcl:74454a iyr:2023
pid:3556412378 byr:2007

Here are some valid passports:

pid:087499704 hgt:74in ecl:grn iyr:2012 eyr:2030 byr:1980
hcl:#623a2f

eyr:2029 ecl:blu cid:129 byr:1989
iyr:2014 pid:896056539 hcl:#a97842 hgt:165cm

hcl:#888785
hgt:164cm byr:2001 iyr:2015 cid:88
pid:545766238 ecl:hzl
eyr:2022

iyr:2010 hgt:158cm hcl:#b6652a ecl:blu byr:1944 eyr:2021 pid:093154719

Count the number of valid passports - those that have all required fields and valid values. Continue to treat cid as optional. In your batch file, how many passports are valid?

Your puzzle answer was 127.

Both parts of this puzzle are complete! They provide two gold stars: **
** star 1
 - <2020-12-09 Wed 17:23>
#+BEGIN_SRC cpp :results output
  #include <stdio.h>
  #include <string.h>
  int main() {
    FILE *f = fopen("04.txt", "r");
    char line[200];
    int linei = 0;
    int state = 0;
    int byr, iyr, eyr, hgt, hcl, ecl, pid;
    byr = iyr = eyr = hgt = hcl = ecl = pid = 0;
    int valids = 0;
    int c;
    while (c = fgetc(f)) {
      line[linei++] = c;
      if (c == EOF || (line[linei-1] == '\n' && line[linei-2] == '\n')) {
        line[linei-2] = 0;
        char tag[20];
        int tagi = 0;
        for (int i = 0; i < linei; i++) {
          if (line[i] >= 'a' && line[i] <= 'z')
            tag[tagi++] = line[i];
          else if (line[i] == ':') {
            tag[tagi] = 0;
            tagi = 0;
            if (0 == strcmp(tag, "byr")) byr = 1;
            if (0 == strcmp(tag, "iyr")) iyr = 1;
            if (0 == strcmp(tag, "eyr")) eyr = 1;
            if (0 == strcmp(tag, "hgt")) hgt = 1;
            if (0 == strcmp(tag, "hcl")) hcl = 1;
            if (0 == strcmp(tag, "ecl")) ecl = 1;
            if (0 == strcmp(tag, "pid")) pid = 1;
            for (; line[i] != ' ' && line[i] != '\n'; i++);
          }
        }
        // printf("\n'%s'\n", line);
        // printf("     %d, %d, %d, %d, %d, %d, %d\n", byr, iyr, eyr, hgt, hcl, ecl, pid);
        if (byr && iyr && eyr && hgt && hcl && ecl && pid) {
          // printf("valid\n");
          valids++;
        } else {
          // printf("    invalid\n");
        }
        byr = iyr = eyr = hgt = hcl = ecl = pid = 0;
        linei = 0;
      }
      if (c == EOF) break;
    }
    printf("= %d\n", valids);
  return 0;
  }
#+END_SRC

#+RESULTS:
: = 219

 - 227 too high
 - 228 too high
 - 219 <2020-12-09 Wed 17:51>
** part 2 
#+BEGIN_SRC cpp :results output
  #include <stdio.h>
  #include <stdlib.h>
  #include <string.h>
  int main() {
    FILE *f = fopen("04.txt", "r");
    char line[200];
    int linei = 0;
    int state = 0;
    int byr, iyr, eyr, hgt, hcl, ecl, pid;
    int valids = 0;
    int c;
    while (c = fgetc(f)) {
      line[linei++] = c;
      if (c == EOF || (line[linei-1] == '\n' && line[linei-2] == '\n')) {
        line[linei-2] = 0;
        byr = iyr = eyr = hgt = hcl = ecl = pid = 0;
        char tag[20];
        int tagi = 0;
        for (int i = 0; i < linei; i++) {
          if (line[i] >= 'a' && line[i] <= 'z')
            tag[tagi++] = line[i];
          else if (line[i] == ':') {
            tag[tagi] = 0;
            tagi = 0;
            char value[100];
            int valuei = 0;
            i++;
            for (; line[i] != ' ' && line[i] != '\n' && i < linei-2; i++)
              value[valuei++] = line[i];
            value[valuei] = 0;
            // printf("          '%s'='%s'%d\n", tag, value, valuei);

            if (0 == strcmp(tag, "byr")) {
              int v = atoi(value);
              if (v >= 1920 && v <= 2002) byr++;
            }
            if (0 == strcmp(tag, "iyr")) {
              int v = atoi(value);
              if (v >= 2010 && v <= 2020) iyr++;
            }
            if (0 == strcmp(tag, "eyr")) {
              int v = atoi(value);
              if (v >= 2020 && v <= 2030) eyr++;
            }
            if (0 == strcmp(tag, "hgt")) {
              int v = atoi(value);
              // printf("      hgt '%d'  '%c %c\n", v, value[valuei-2], value[valuei-1]);
              if ((value[valuei-2] == 'c' && value[valuei-1] == 'm' && v >= 150 && v <= 193)
                  || (value[valuei-2] == 'i' && value[valuei-1] == 'n' && v >= 59 && v <= 76)) hgt++;
            }
            if (0 == strcmp(tag, "hcl")) {
              if (value[0] == '#') {
                int good = 1;
                for (int j = 1; j < 7; j++) {
                if (!((value[j] >= 'a' && value[j] <= 'f') || (value[j] >= '0' && value[j] <= '9')))
                  good = 0;
                  break;
                }
                if (good) hcl++;
              }
            }
            if (0 == strcmp(tag, "ecl")) {
              if (0 == strcmp(value, "amb") || 0 == strcmp(value, "blu") || 0 == strcmp(value, "brn") 
              || 0 == strcmp(value, "gry") || 0 == strcmp(value, "grn") || 0 == strcmp(value, "hzl") 
              || 0 == strcmp(value, "oth"))
                ecl++;
            }
            if (0 == strcmp(tag, "pid")) {
              int good = 1;
              for (int j = 0; j < 9; j++)
                if (!(value[j] >= '0' && value[j] <= '9')) { good = 0; break; }
              if (good) pid ++;
            }
          }
        }
        // printf("'%s'\n", line);
        // printf("     byr=%d, iyr=%d, eyr=%d, hgt=%d, hcl=%d, ecl=%d, pid=%d\n", byr, iyr, eyr, hgt, hcl, ecl, pid);
        if (byr && iyr && eyr && hgt && hcl && ecl && pid) {
          // printf("valid\n");
          valids++;
        } else {
          // printf("    invalid\n");
        }
        // printf("\n");
        linei = 0;
      }
      if (c == EOF) break;
    }
    printf("= %d\n", valids);
  return 0;
  }
#+END_SRC

#+RESULTS:
: = 128

- 128 too high <2020-12-09 Wed 18:14>
** part 2 B
#+BEGIN_SRC cpp :results output
  #include <stdio.h>
  #include <stdlib.h>
  #include <string.h>

  int main() {
      FILE *f = fopen("04.txt", "r");
      char line[1000] = {0};
      int linei = 0;
      int valids = 0;
      while (true) {
          int c = fgetc(f);
          line[linei++] = c;
          if (linei >= 2 && (c == EOF || (line[linei-1] == '\n' && line[linei-2] == '\n'))) {
              line[linei-1] = 0;
              int byr = 0, iyr = 0, eyr = 0, hgt = 0, hcl = 0, ecl = 0, pid = 0;
              int i = 0;
              long pidval = -1;
              while (i < linei - 1) {
                  while (line[i] == ' ' || line[i] == '\n') i++;
                  char tag[200];
                  int tagi = 0;
                  while (line[i] != ':') {
                      tag[tagi++] = line[i];
                      i++;
                  }
                  tag[tagi] = 0;
                  i++;
                  char val[200];
                  int vali = 0;
                  while (line[i] != ' ' && line[i] != '\n' && i < linei) {
                      val[vali++] = line[i];
                      i++;
                  }
                  val[vali] = 0;
                  while (i < linei && (line[i] == ' ' || line[i] == '\n')) i++;

                  // printf("'%s'='%s' ", tag, val);
                  if (0 == strcmp(tag, "byr")) {
                      int v = atoi(val);
                      if (v >= 1920 && v <= 2002) byr++;
                  }
                  if (0 == strcmp(tag, "iyr")) {
                      int v = atoi(val);
                      if (v >= 2010 && v <= 2020) iyr++;
                  }
                  if (0 == strcmp(tag, "eyr")) {
                      int v = atoi(val);
                      if (v >= 2020 && v <= 2030) eyr++;
                  }
                  if (0 == strcmp(tag, "hgt")) {
                      int v = atoi(val);
                      if ((val[vali-2] == 'c' && val[vali-1] == 'm' && v >= 150 && v <= 193)
                       || (val[vali-2] == 'i' && val[vali-1] == 'n' && v >= 59 && v <= 76))
                         hgt++;
                  }
                  if (0 == strcmp(tag, "hcl")) {
                      if (val[0] == '#') {
                        int good = 1;
                        for (int j = 1; j < 7; j++)
                          if (!((val[j] >= 'a' && val[j] <= 'f') || (val[j] >= '0' && val[j] <= '9'))) {
                            good = 0; break;
                          }
                        if (good) hcl++;
                      }
                  }
                  if (0 == strcmp(tag, "ecl")) {
                     if (0 == strcmp(val, "amb") || 0 == strcmp(val, "blu") || 0 == strcmp(val, "brn") || 
                     0 == strcmp(val, "gry") || 0 == strcmp(val, "grn") || 0 == strcmp(val, "hzl") || 
                     0 == strcmp(val, "oth"))
                         ecl++;
                  }
                  if (0 == strcmp(tag, "pid")) {
                      int good = 1;
                      for (int j = 0; j < 9; j++) 
                        if (!(val[j] >= '0' && val[j] <= '9')) {
                          good = 0; break;
                        }
                      if (good && val[9] == 0) pid++;
                      pidval = atol(val);
                  }
              }
              if (byr && iyr && eyr && hgt && hcl && ecl && pid) valids++;
              // printf("\nbyr=%d iyr=%d eyr=%d hgt=%d hcl=%d ecl=%d pid=%d\n\n", byr, iyr, eyr, hgt, hcl, ecl, pid);
              linei = 0;
          }
          if (c == EOF) break;
      }

      printf("= %d\n", valids);
      return 0;
  }
#+END_SRC

#+RESULTS:
: = 127

 - 12 wrong <2020-12-09 Wed 19:10>
 - 127 <2020-12-09 Wed 19:27>
* day 5
** puzzle
--- Day 5: Binary Boarding ---

You board your plane only to discover a new problem: you dropped your boarding pass! You aren't sure which seat is yours, and all of the flight attendants are busy with the flood of people that suddenly made it through passport control.

You write a quick program to use your phone's camera to scan all of the nearby boarding passes (your puzzle input); perhaps you can find your seat through process of elimination.

Instead of zones or groups, this airline uses binary space partitioning to seat people. A seat might be specified like FBFBBFFRLR, where F means "front", B means "back", L means "left", and R means "right".

The first 7 characters will either be F or B; these specify exactly one of the 128 rows on the plane (numbered 0 through 127). Each letter tells you which half of a region the given seat is in. Start with the whole list of rows; the first letter indicates whether the seat is in the front (0 through 63) or the back (64 through 127). The next letter indicates which half of that region the seat is in, and so on until you're left with exactly one row.

For example, consider just the first seven characters of FBFBBFFRLR:

    Start by considering the whole range, rows 0 through 127.
    F means to take the lower half, keeping rows 0 through 63.
    B means to take the upper half, keeping rows 32 through 63.
    F means to take the lower half, keeping rows 32 through 47.
    B means to take the upper half, keeping rows 40 through 47.
    B keeps rows 44 through 47.
    F keeps rows 44 through 45.
    The final F keeps the lower of the two, row 44.

The last three characters will be either L or R; these specify exactly one of the 8 columns of seats on the plane (numbered 0 through 7). The same process as above proceeds again, this time with only three steps. L means to keep the lower half, while R means to keep the upper half.

For example, consider just the last 3 characters of FBFBBFFRLR:

    Start by considering the whole range, columns 0 through 7.
    R means to take the upper half, keeping columns 4 through 7.
    L means to take the lower half, keeping columns 4 through 5.
    The final R keeps the upper of the two, column 5.

So, decoding FBFBBFFRLR reveals that it is the seat at row 44, column 5.

Every seat also has a unique seat ID: multiply the row by 8, then add the column. In this example, the seat has ID 44 * 8 + 5 = 357.

Here are some other boarding passes:

    BFFFBBFRRR: row 70, column 7, seat ID 567.
    FFFBBBFRRR: row 14, column 7, seat ID 119.
    BBFFBBFRLL: row 102, column 4, seat ID 820.

As a sanity check, look through your list of boarding passes. What is the highest seat ID on a boarding pass?

Your puzzle answer was 813.
--- Part Two ---

Ding! The "fasten seat belt" signs have turned on. Time to find your seat.

It's a completely full flight, so your seat should be the only missing boarding pass in your list. However, there's a catch: some of the seats at the very front and back of the plane don't exist on this aircraft, so they'll be missing from your list as well.

Your seat wasn't at the very front or back, though; the seats with IDs +1 and -1 from yours will be in your list.

What is the ID of your seat?

Your puzzle answer was 612.

Both parts of this puzzle are complete! They provide two gold stars: **
** part 1
 - <2020-12-10 Thu 20:17>
#+BEGIN_SRC cpp :results output
  #include <stdio.h>
  int main() {
      FILE *f = fopen("05.txt", "r");

      int highestSeat = 0;

      int rowstart = 0;
      int rowend = 128;
      int colstart = 0;
      int colend = 8;
      for (int c = fgetc(f); c != EOF; c = fgetc(f)) {
         //printf("## c=%c: row=%d..%d\n", c, rowstart, rowend);
          switch (c) {
          case 'F':
              rowend = rowstart + (rowend-rowstart)/2;
              break;
          case 'B':
              rowstart = rowstart + (rowend-rowstart)/2;
              break;
          case 'R':
              colstart = colstart + (colend-colstart)/2;
              break;
          case 'L':
              colend = colstart + (colend-colstart)/2;
              break;
          }
          if (colstart == colend - 1) {
              int seat = rowstart * 8 + colstart;
              //printf("## %3d,%3d=%3d\n", rowstart, colstart, seat);
              if (seat > highestSeat) highestSeat = seat;
              rowstart = 0;
              rowend = 128;
              colstart = 0;
              colend = 8;
          }
      }


      printf("= %d\n", highestSeat);
      return 0;
  }
#+END_SRC

#+RESULTS:
: = 813

 - 157 too low <2020-12-10 Thu 20:35>
 - 813 correct <2020-12-10 Thu 20:38>

** part 2
 - <2020-12-10 Thu 20:17>
#+BEGIN_SRC cpp :results output
  #include <stdio.h>
  int main() {
      FILE *f = fopen("05.txt", "r");

      int seats[127*8+7] = {0};

      int rowstart = 0;
      int rowend = 128;
      int colstart = 0;
      int colend = 8;
      for (int c = fgetc(f); c != EOF; c = fgetc(f)) {
         //printf("## c=%c: row=%d..%d\n", c, rowstart, rowend);
          switch (c) {
          case 'F':
              rowend = rowstart + (rowend-rowstart)/2;
              break;
          case 'B':
              rowstart = rowstart + (rowend-rowstart)/2;
              break;
          case 'R':
              colstart = colstart + (colend-colstart)/2;
              break;
          case 'L':
              colend = colstart + (colend-colstart)/2;
              break;
          }
          if (colstart == colend - 1) {
              int seat = rowstart * 8 + colstart;
              seats[seat]++;
              //printf("## %3d,%3d=%3d\n", rowstart, colstart, seat);
              rowstart = 0;
              rowend = 128;
              colstart = 0;
              colend = 8;
          }
      }

      for (int i = 0; i < 127*8+7; i++) {
        if (seats[i] == 0) printf("free: %d\n", i);
      }

      return 0;
  }
#+END_SRC

 - 612 correct <2020-12-10 Thu 20:42>

#+RESULTS:
#+begin_example
free: 0
free: 1
free: 2
free: 3
free: 4
free: 5
free: 612
free: 814
free: 815
free: 816
free: 817
free: 818
free: 819
free: 820
free: 821
free: 822
free: 823
free: 824
free: 825
free: 826
free: 827
free: 828
free: 829
free: 830
free: 831
free: 832
free: 833
free: 834
free: 835
free: 836
free: 837
free: 838
free: 839
free: 840
free: 841
free: 842
free: 843
free: 844
free: 845
free: 846
free: 847
free: 848
free: 849
free: 850
free: 851
free: 852
free: 853
free: 854
free: 855
free: 856
free: 857
free: 858
free: 859
free: 860
free: 861
free: 862
free: 863
free: 864
free: 865
free: 866
free: 867
free: 868
free: 869
free: 870
free: 871
free: 872
free: 873
free: 874
free: 875
free: 876
free: 877
free: 878
free: 879
free: 880
free: 881
free: 882
free: 883
free: 884
free: 885
free: 886
free: 887
free: 888
free: 889
free: 890
free: 891
free: 892
free: 893
free: 894
free: 895
free: 896
free: 897
free: 898
free: 899
free: 900
free: 901
free: 902
free: 903
free: 904
free: 905
free: 906
free: 907
free: 908
free: 909
free: 910
free: 911
free: 912
free: 913
free: 914
free: 915
free: 916
free: 917
free: 918
free: 919
free: 920
free: 921
free: 922
free: 923
free: 924
free: 925
free: 926
free: 927
free: 928
free: 929
free: 930
free: 931
free: 932
free: 933
free: 934
free: 935
free: 936
free: 937
free: 938
free: 939
free: 940
free: 941
free: 942
free: 943
free: 944
free: 945
free: 946
free: 947
free: 948
free: 949
free: 950
free: 951
free: 952
free: 953
free: 954
free: 955
free: 956
free: 957
free: 958
free: 959
free: 960
free: 961
free: 962
free: 963
free: 964
free: 965
free: 966
free: 967
free: 968
free: 969
free: 970
free: 971
free: 972
free: 973
free: 974
free: 975
free: 976
free: 977
free: 978
free: 979
free: 980
free: 981
free: 982
free: 983
free: 984
free: 985
free: 986
free: 987
free: 988
free: 989
free: 990
free: 991
free: 992
free: 993
free: 994
free: 995
free: 996
free: 997
free: 998
free: 999
free: 1000
free: 1001
free: 1002
free: 1003
free: 1004
free: 1005
free: 1006
free: 1007
free: 1008
free: 1009
free: 1010
free: 1011
free: 1012
free: 1013
free: 1014
free: 1015
free: 1016
free: 1017
free: 1018
free: 1019
free: 1020
free: 1021
free: 1022
#+end_example

* day 6
** puzzle
--- Day 6: Custom Customs ---

As your flight approaches the regional airport where you'll switch to a much larger plane, customs declaration forms are distributed to the passengers.

The form asks a series of 26 yes-or-no questions marked a through z. All you need to do is identify the questions for which anyone in your group answers "yes". Since your group is just you, this doesn't take very long.

However, the person sitting next to you seems to be experiencing a language barrier and asks if you can help. For each of the people in their group, you write down the questions for which they answer "yes", one per line. For example:

abcx
abcy
abcz

In this group, there are 6 questions to which anyone answered "yes": a, b, c, x, y, and z. (Duplicate answers to the same question don't count extra; each question counts at most once.)

Another group asks for your help, then another, and eventually you've collected answers from every group on the plane (your puzzle input). Each group's answers are separated by a blank line, and within each group, each person's answers are on a single line. For example:

abc

a
b
c

ab
ac

a
a
a
a

b

This list represents answers from five groups:

    The first group contains one person who answered "yes" to 3 questions: a, b, and c.
    The second group contains three people; combined, they answered "yes" to 3 questions: a, b, and c.
    The third group contains two people; combined, they answered "yes" to 3 questions: a, b, and c.
    The fourth group contains four people; combined, they answered "yes" to only 1 question, a.
    The last group contains one person who answered "yes" to only 1 question, b.

In this example, the sum of these counts is 3 + 3 + 3 + 1 + 1 = 11.

For each group, count the number of questions to which anyone answered "yes". What is the sum of those counts?

Your puzzle answer was 6249.
--- Part Two ---

As you finish the last group's customs declaration, you notice that you misread one word in the instructions:

You don't need to identify the questions to which anyone answered "yes"; you need to identify the questions to which everyone answered "yes"!

Using the same example as above:

abc

a
b
c

ab
ac

a
a
a
a

b

This list represents answers from five groups:

    In the first group, everyone (all 1 person) answered "yes" to 3 questions: a, b, and c.
    In the second group, there is no question to which everyone answered "yes".
    In the third group, everyone answered yes to only 1 question, a. Since some people did not answer "yes" to b or c, they don't count.
    In the fourth group, everyone answered yes to only 1 question, a.
    In the fifth group, everyone (all 1 person) answered "yes" to 1 question, b.

In this example, the sum of these counts is 3 + 0 + 1 + 1 + 1 = 6.

For each group, count the number of questions to which everyone answered "yes". What is the sum of those counts?

Your puzzle answer was 3103.

Both parts of this puzzle are complete! They provide two gold stars: **
** part 1
 - <2020-12-12 Sat 14:14>
#+BEGIN_SRC cpp :results output
#include <stdio.h>
int main() {
  FILE *f = fopen("06.txt", "r");
  int sum;
  int yess[300] = {0};
  int prevc = 0;
  while (true) {
    int c = fgetc(f);
    
    if (c >= 'a' && c <= 'z') {
      yess[c]++;
    }
    if (c == EOF || (c == '\n' && prevc == '\n')) {
      int groupyess = 0;
      for (int i = 0; i < 300; i++) {
        if (yess[i]) groupyess++;
        yess[i] = 0;
      }
      sum += groupyess;
    }
    if (c == EOF) break;
    prevc = c;
  }

  printf("= %d\n", sum);
  return 0;
}
#+END_SRC

#+RESULTS:
: = 6249


 - <2020-12-12 Sat 14:21>
** part 2
#+BEGIN_SRC cpp :results output
#include <stdio.h>
int main() {
  FILE *f = fopen("06.txt", "r");
  int sum;
  int yess[300] = {0};
  int groupsize = 0;
  int prevc = 0;
  while (true) {
    int c = fgetc(f);
    
    if (c >= 'a' && c <= 'z') {
      yess[c]++;
    }
    if (c == '\n') groupsize++;
    if (c == EOF || (c == '\n' && prevc == '\n')) {
      groupsize--;
      int groupyess = 0;
      for (int i = 0; i < 300; i++) {
        if (yess[i] == groupsize) groupyess++;
        yess[i] = 0;
      }
      sum += groupyess;
      //printf("## %d/%d sum=%d\n", groupyess, groupsize, sum);
      groupsize = 0;
    }
    if (c == EOF) break;
    prevc = c;
  }

  printf("= %d\n", sum);
  return 0;
}
#+END_SRC

#+RESULTS:
: = 3103


 - 1222 too low <2020-12-12 Sat 14:24>
 - 3093 too low <2020-12-12 Sat 14:25>
 - 3103 correct (add newline at end of input) <2020-12-12 Sat 14:27>
* day 7
** puzzle
--- Day 7: Handy Haversacks ---

You land at the regional airport in time for your next flight. In fact, it looks like you'll even have time to grab some food: all flights are currently delayed due to issues in luggage processing.

Due to recent aviation regulations, many rules (your puzzle input) are being enforced about bags and their contents; bags must be color-coded and must contain specific quantities of other color-coded bags. Apparently, nobody responsible for these regulations considered how long they would take to enforce!

For example, consider the following rules:

light red bags contain 1 bright white bag, 2 muted yellow bags.
dark orange bags contain 3 bright white bags, 4 muted yellow bags.
bright white bags contain 1 shiny gold bag.
muted yellow bags contain 2 shiny gold bags, 9 faded blue bags.
shiny gold bags contain 1 dark olive bag, 2 vibrant plum bags.
dark olive bags contain 3 faded blue bags, 4 dotted black bags.
vibrant plum bags contain 5 faded blue bags, 6 dotted black bags.
faded blue bags contain no other bags.
dotted black bags contain no other bags.

These rules specify the required contents for 9 bag types. In this example, every faded blue bag is empty, every vibrant plum bag contains 11 bags (5 faded blue and 6 dotted black), and so on.

You have a shiny gold bag. If you wanted to carry it in at least one other bag, how many different bag colors would be valid for the outermost bag? (In other words: how many colors can, eventually, contain at least one shiny gold bag?)

In the above rules, the following options would be available to you:

    A bright white bag, which can hold your shiny gold bag directly.
    A muted yellow bag, which can hold your shiny gold bag directly, plus some other bags.
    A dark orange bag, which can hold bright white and muted yellow bags, either of which could then hold your shiny gold bag.
    A light red bag, which can hold bright white and muted yellow bags, either of which could then hold your shiny gold bag.

So, in this example, the number of bag colors that can eventually contain at least one shiny gold bag is 4.

How many bag colors can eventually contain at least one shiny gold bag? (The list of rules is quite long; make sure you get all of it.)

Your puzzle answer was 233.
--- Part Two ---

It's getting pretty expensive to fly these days - not because of ticket prices, but because of the ridiculous number of bags you need to buy!

Consider again your shiny gold bag and the rules from the above example:

    faded blue bags contain 0 other bags.
    dotted black bags contain 0 other bags.
    vibrant plum bags contain 11 other bags: 5 faded blue bags and 6 dotted black bags.
    dark olive bags contain 7 other bags: 3 faded blue bags and 4 dotted black bags.

So, a single shiny gold bag must contain 1 dark olive bag (and the 7 bags within it) plus 2 vibrant plum bags (and the 11 bags within each of those): 1 + 1*7 + 2 + 2*11 = 32 bags!

Of course, the actual rules have a small chance of going several levels deeper than this example; be sure to count all of the bags, even if the nesting becomes topologically impractical!

Here's another example:

shiny gold bags contain 2 dark red bags.
dark red bags contain 2 dark orange bags.
dark orange bags contain 2 dark yellow bags.
dark yellow bags contain 2 dark green bags.
dark green bags contain 2 dark blue bags.
dark blue bags contain 2 dark violet bags.
dark violet bags contain no other bags.

In this example, a single shiny gold bag must contain 126 other bags.

How many individual bags are required inside your single shiny gold bag?

Your puzzle answer was 421550.

Both parts of this puzzle are complete! They provide two gold stars: **
** part 1
 - <2020-12-12 Sat 14:27>
#+BEGIN_SRC cpp :results output
  #include <stdio.h>
  #include <string.h>
  #include <strings.h>
  int main() {
    FILE *f = fopen("07.txt", "r");
    int output = 0;

    char *bagandcontainsbags[1000][10];
    int bagi = 0;
    char line[1000];
    while (fgets(line, sizeof(line), f)) {
      char *ptr = strstr(line, " contain ");
      ptr[0] = 0;
      int bagi2 = 0;
      bagandcontainsbags[bagi][bagi2++] = strdup(line);
      ptr += strlen(" contain 6 ");
      while (true) {
        char *ptr2 = strstr(ptr, ", ");
        if (ptr2 == NULL) {
          ptr2 = strstr(ptr, ".");
          ptr2[0] = 0;
          bagandcontainsbags[bagi][bagi2++] = strdup(ptr);
          break;
        } else {
          ptr2[0] = 0;
          bagandcontainsbags[bagi][bagi2++] = strdup(ptr);
          ptr = ptr2 + strlen(", 5 ");
        }
      }
      bagandcontainsbags[bagi][bagi2++] = NULL;
      bagi++;
    }
    bagandcontainsbags[bagi][0] = NULL;

    // remove bag or bags suffix
    for (int bagi = 0; bagandcontainsbags[bagi][0]; bagi++) {
      for (int bagi2 = 0; bagandcontainsbags[bagi][bagi2]; bagi2++) {
        rindex(bagandcontainsbags[bagi][bagi2], ' ')[0] = 0;
      }
    }

    char *bagscontains[10000];
    int bagscontainsi = 0;
    bagscontains[bagscontainsi++] = "shiny gold";

    int bagscontainsiold = 0;
    while (bagscontainsiold != bagscontainsi) {
    bagscontainsiold = bagscontainsi;

    // for (int i = 0; i < bagscontainsiold; i++)
    //   printf("'%s', ", bagscontains[i]);
    // printf("\n");

    for (int bagi = 0; bagandcontainsbags[bagi][0]; bagi++) {
      for (int bagi2 = 1; bagandcontainsbags[bagi][bagi2]; bagi2++) {
        for (int i = 0; i < bagscontainsiold; i++) {
          if (0 == strcmp(bagscontains[i], bagandcontainsbags[bagi][bagi2])) {
            int alreadyadded = 0;
            for (int j = 0; j < bagscontainsi; j++) {
              if (0 == strcmp(bagandcontainsbags[bagi][0], bagscontains[j])) {
                alreadyadded = 1;
                break;
              }
            }
            if (!alreadyadded) {
              bagscontains[bagscontainsi++] = bagandcontainsbags[bagi][0];
            }
          }
        }
      }
    }
    }

    printf("= %d\n", bagscontainsi - 1);
    return 0;
  }
#+END_SRC

#+RESULTS:
: = 233


 - 106 too low <2020-12-12 Sat 15:10>
 - 233 correct <2020-12-12 Sat 15:14>
** part 2
#+BEGIN_SRC cpp :results output
  #include <stdio.h>
  #include <string.h>
  #include <strings.h>

  int bagsamount(char *bag, char *bagandcontainsbags[1000][10], int bagandcontainsbagsamount[1000][10]) {
    int output = 1;
    for (int bagi = 0; bagandcontainsbags[bagi][0]; bagi++) {
      //printf("### '%s' == '%s' = %d\n", bagandcontainsbags[bagi][0], bag, strcmp(bagandcontainsbags[bagi][0], bag));
      if (0 == strcmp(bagandcontainsbags[bagi][0], bag)) {
        for (int bagi2 = 1; bagandcontainsbags[bagi][bagi2]; bagi2++) {
          //printf("## '%s' has %d '%s'\n", bag, bagandcontainsbagsamount[bagi][bagi2], bagandcontainsbags[bagi][bagi2]);
          output += bagandcontainsbagsamount[bagi][bagi2] * 
            bagsamount(bagandcontainsbags[bagi][bagi2], bagandcontainsbags, bagandcontainsbagsamount);
        }
      }
    }
    return output;
  }

  int main() {
    FILE *f = fopen("07.txt", "r");
    int output = 0;

    char *bagandcontainsbags[1000][10];
    int bagandcontainsbagsamount[1000][10];
    int bagi = 0;
    char line[1000];
    while (fgets(line, sizeof(line), f)) {
      char *ptr = strstr(line, " contain ");
      ptr[0] = 0;
      int bagi2 = 0;
      bagandcontainsbags[bagi][bagi2++] = strdup(line);
      ptr += strlen(" contain ");
      if (0 == strcmp(ptr, "no other bags.\n")) {
        continue;
      }
      while (true) {
        bagandcontainsbagsamount[bagi][bagi2] = ptr[0] - '0';
        ptr += strlen("5 ");
        char *ptr2 = strstr(ptr, ", ");
        if (ptr2 == NULL) {
          ptr2 = strstr(ptr, ".");
          ptr2[0] = 0;
          bagandcontainsbags[bagi][bagi2++] = strdup(ptr);
          break;
        } else {
          ptr2[0] = 0;
          bagandcontainsbags[bagi][bagi2++] = strdup(ptr);
          ptr = ptr2 + strlen(", ");
        }
      }
      bagandcontainsbags[bagi][bagi2++] = NULL;
      bagi++;
    }
    bagandcontainsbags[bagi][0] = NULL;

    // remove bag or bags suffix
    for (int bagi = 0; bagandcontainsbags[bagi][0]; bagi++) {
      for (int bagi2 = 0; bagandcontainsbags[bagi][bagi2]; bagi2++) {
        rindex(bagandcontainsbags[bagi][bagi2], ' ')[0] = 0;
      }
    }

    // for (int bagi = 0; bagandcontainsbags[bagi][0]; bagi++) {
    //   printf("## '%s' contains: ", bagandcontainsbags[bagi][0]);
    //   for (int bagi2 = 1; bagandcontainsbags[bagi][bagi2]; bagi2++) {
    //     printf("%d '%s', ", bagandcontainsbagsamount[bagi][bagi2], bagandcontainsbags[bagi][bagi2]);
    //   }
    //   printf("\n");
    // }

    printf("= %d\n", bagsamount("shiny gold", bagandcontainsbags, bagandcontainsbagsamount) - 1);
    return 0;
  }
#+END_SRC

#+RESULTS:
: = 421550

 - 421550 correct <2020-12-12 Sat 15:38>
* day 8
** puzzle
--- Day 8: Handheld Halting ---

Your flight to the major airline hub reaches cruising altitude without incident. While you consider checking the in-flight menu for one of those drinks that come with a little umbrella, you are interrupted by the kid sitting next to you.

Their handheld game console won't turn on! They ask if you can take a look.

You narrow the problem down to a strange infinite loop in the boot code (your puzzle input) of the device. You should be able to fix it, but first you need to be able to run the code in isolation.

The boot code is represented as a text file with one instruction per line of text. Each instruction consists of an operation (acc, jmp, or nop) and an argument (a signed number like +4 or -20).

    acc increases or decreases a single global value called the accumulator by the value given in the argument. For example, acc +7 would increase the accumulator by 7. The accumulator starts at 0. After an acc instruction, the instruction immediately below it is executed next.
    jmp jumps to a new instruction relative to itself. The next instruction to execute is found using the argument as an offset from the jmp instruction; for example, jmp +2 would skip the next instruction, jmp +1 would continue to the instruction immediately below it, and jmp -20 would cause the instruction 20 lines above to be executed next.
    nop stands for No OPeration - it does nothing. The instruction immediately below it is executed next.

For example, consider the following program:

nop +0
acc +1
jmp +4
acc +3
jmp -3
acc -99
acc +1
jmp -4
acc +6

These instructions are visited in this order:

nop +0  | 1
acc +1  | 2, 8(!)
jmp +4  | 3
acc +3  | 6
jmp -3  | 7
acc -99 |
acc +1  | 4
jmp -4  | 5
acc +6  |

First, the nop +0 does nothing. Then, the accumulator is increased from 0 to 1 (acc +1) and jmp +4 sets the next instruction to the other acc +1 near the bottom. After it increases the accumulator from 1 to 2, jmp -4 executes, setting the next instruction to the only acc +3. It sets the accumulator to 5, and jmp -3 causes the program to continue back at the first acc +1.

This is an infinite loop: with this sequence of jumps, the program will run forever. The moment the program tries to run any instruction a second time, you know it will never terminate.

Immediately before the program would run an instruction a second time, the value in the accumulator is 5.

Run your copy of the boot code. Immediately before any instruction is executed a second time, what value is in the accumulator?

Your puzzle answer was 1420.
--- Part Two ---

After some careful analysis, you believe that exactly one instruction is corrupted.

Somewhere in the program, either a jmp is supposed to be a nop, or a nop is supposed to be a jmp. (No acc instructions were harmed in the corruption of this boot code.)

The program is supposed to terminate by attempting to execute an instruction immediately after the last instruction in the file. By changing exactly one jmp or nop, you can repair the boot code and make it terminate correctly.

For example, consider the same program from above:

nop +0
acc +1
jmp +4
acc +3
jmp -3
acc -99
acc +1
jmp -4
acc +6

If you change the first instruction from nop +0 to jmp +0, it would create a single-instruction infinite loop, never leaving that instruction. If you change almost any of the jmp instructions, the program will still eventually find another jmp instruction and loop forever.

However, if you change the second-to-last instruction (from jmp -4 to nop -4), the program terminates! The instructions are visited in this order:

nop +0  | 1
acc +1  | 2
jmp +4  | 3
acc +3  |
jmp -3  |
acc -99 |
acc +1  | 4
nop -4  | 5
acc +6  | 6

After the last instruction (acc +6), the program terminates by attempting to run the instruction below the last instruction in the file. With this change, after the program terminates, the accumulator contains the value 8 (acc +1, acc +1, acc +6).

Fix the program so that it terminates normally by changing exactly one jmp (to nop) or nop (to jmp). What is the value of the accumulator after the program terminates?

Your puzzle answer was 1245.

Both parts of this puzzle are complete! They provide two gold stars: **
** part 1
 - <2020-12-12 Sat 20:49>
#+BEGIN_SRC cpp :results output
  #include <stdio.h>
  #include <string.h>
  int main() {
    FILE *f = fopen("08.txt", "r");
    char *program[10000];
    int programi = 0;
    char line[200];
    while (fgets(line, sizeof(line), f)) {
      program[programi++] = strdup(line);
      program[programi-1][strlen(program[programi-1])-1] = 0;
    }

    // for (int i = 0; i < programi; i++)
    //   printf("'%s'\n", program[i]);

    int pc = 0;
    int acc = 0;

    int pcsseen[10000];
    int pcsseeni = 0;
  
    while (true) {

      for (int i = 0; i < pcsseeni; i++) {
        if (pc == pcsseen[i]) {
          printf("= %d\n", acc);
          return 0;
        }
      }

      pcsseen[pcsseeni++] = pc;

      int arg = 0;
      if (1 == sscanf(program[pc], "nop %d", &arg)) {
        pc++;
      } else if (1 == sscanf(program[pc], "acc %d", &arg)) {
        acc += arg;
        pc++;
      } else if (1 == sscanf(program[pc], "jmp %d", &arg)) {
        pc += arg;
      }
    }

    printf("Sdfs\n");
    return 0;
  }
#+END_SRC

#+RESULTS:
: = 1420

 - 1420 correct <2020-12-12 Sat 20:59>
** part 2
#+BEGIN_SRC cpp :results output
  #include <stdio.h>
  #include <stdlib.h>
  #include <string.h>
  int main() {
    FILE *f = fopen("08.txt", "r");
    char *program[10000];
    int programi = 0;
    char line[200];
    while (fgets(line, sizeof(line), f)) {
      program[programi++] = strdup(line);
      program[programi-1][strlen(program[programi-1])-1] = 0;
    }

    // for (int i = 0; i < programi; i++)
    //   printf("'%s'\n", program[i]);



    for (int j = 0; j < programi; j++) {
      int arg = 0;
      //printf("j=%d\n", j);
      // swap ins
      if (1 == sscanf(program[j], "nop %d", &arg)) {
        sprintf(line, "jmp %d", arg);
        free(program[j]);
        program[j] = strdup(line);
      } else if (1 == sscanf(program[j], "jmp %d", &arg)) {
        sprintf(line, "nop %d", arg);
        free(program[j]);
        program[j] = strdup(line);
      } else {
        continue;
      }

    int pc = 0;
    int acc = 0;
    int pcsseen[10000];
    int pcsseeni = 0;
    while (true) {
      if (pc == programi) {
        printf("= %d\n", acc);
        return 0;
      }
      if (pc < 0 || pc >= programi) {
        printf("no1\n");
        break;
      }

      int seenbefore = 0;
      for (int i = 0; i < pcsseeni; i++) {
        if (pc == pcsseen[i]) {
          //printf("no2\n");
          seenbefore = 1;
          //printf("= %d\n", acc);
          break;
        }
      }
      if (seenbefore) break;

      pcsseen[pcsseeni++] = pc;

      //printf("## '%s' acc=%d, pc=%d\n", program[pc], acc, pc);
      if (1 == sscanf(program[pc], "nop %d", &arg)) {
        pc++;
      } else if (1 == sscanf(program[pc], "acc %d", &arg)) {
        acc += arg;
        pc++;
      } else if (1 == sscanf(program[pc], "jmp %d", &arg)) {
        pc += arg;
      }
    }
     // swap back
      if (1 == sscanf(program[j], "nop %d", &arg)) {
        sprintf(line, "jmp %d", arg);
        free(program[j]);
        program[j] = strdup(line);
      } else if (1 == sscanf(program[j], "jmp %d", &arg)) {
        sprintf(line, "nop %d", arg);
        free(program[j]);
        program[j] = strdup(line);
      }
    }

    printf("Sdfs\n");
    return 0;
  }
#+END_SRC

#+RESULTS:
: = 1245

 - 1245 correct <2020-12-12 Sat 21:14>
* day 9
** puzzle
--- Day 9: Encoding Error ---

With your neighbor happily enjoying their video game, you turn your attention to an open data port on the little screen in the seat in front of you.

Though the port is non-standard, you manage to connect it to your computer through the clever use of several paperclips. Upon connection, the port outputs a series of numbers (your puzzle input).

The data appears to be encrypted with the eXchange-Masking Addition System (XMAS) which, conveniently for you, is an old cypher with an important weakness.

XMAS starts by transmitting a preamble of 25 numbers. After that, each number you receive should be the sum of any two of the 25 immediately previous numbers. The two numbers will have different values, and there might be more than one such pair.

For example, suppose your preamble consists of the numbers 1 through 25 in a random order. To be valid, the next number must be the sum of two of those numbers:

    26 would be a valid next number, as it could be 1 plus 25 (or many other pairs, like 2 and 24).
    49 would be a valid next number, as it is the sum of 24 and 25.
    100 would not be valid; no two of the previous 25 numbers sum to 100.
    50 would also not be valid; although 25 appears in the previous 25 numbers, the two numbers in the pair must be different.

Suppose the 26th number is 45, and the first number (no longer an option, as it is more than 25 numbers ago) was 20. Now, for the next number to be valid, there needs to be some pair of numbers among 1-19, 21-25, or 45 that add up to it:

    26 would still be a valid next number, as 1 and 25 are still within the previous 25 numbers.
    65 would not be valid, as no two of the available numbers sum to it.
    64 and 66 would both be valid, as they are the result of 19+45 and 21+45 respectively.

Here is a larger example which only considers the previous 5 numbers (and has a preamble of length 5):

35
20
15
25
47
40
62
55
65
95
102
117
150
182
127
219
299
277
309
576

In this example, after the 5-number preamble, almost every number is the sum of two of the previous 5 numbers; the only number that does not follow this rule is 127.

The first step of attacking the weakness in the XMAS data is to find the first number in the list (after the preamble) which is not the sum of two of the 25 numbers before it. What is the first number that does not have this property?

Your puzzle answer was 104054607.
--- Part Two ---

The final step in breaking the XMAS encryption relies on the invalid number you just found: you must find a contiguous set of at least two numbers in your list which sum to the invalid number from step 1.

Again consider the above example:

35
20
15
25
47
40
62
55
65
95
102
117
150
182
127
219
299
277
309
576

In this list, adding up all of the numbers from 15 through 40 produces the invalid number from step 1, 127. (Of course, the contiguous set of numbers in your actual list might be much longer.)

To find the encryption weakness, add together the smallest and largest number in this contiguous range; in this example, these are 15 and 47, producing 62.

What is the encryption weakness in your XMAS-encrypted list of numbers?

Your puzzle answer was 13935797.

Both parts of this puzzle are complete! They provide two gold stars: **
** part 1
 - <2020-12-12 Sat 21:21>
#+BEGIN_SRC cpp :results output
  #include <stdio.h>
  #include <stdlib.h>
  int main() {
    int numberssize = 30;
    long numbers[numberssize];
    int numbersistart = 0;
    int numbersiend = 0;

    FILE *f = fopen("09.txt", "r");
    char line[100];
    int seen = 0;
    while (fgets(line, sizeof(line), f)) {
      long number = atol(line);
      // printf("## %ld, old=%d..%d: ", number, numbersistart, numbersiend);
      // for (int i = numbersistart; i != numbersiend; i = (i + 1) % numberssize)
      //   printf("%ld, ", numbers[i]);
      // printf("\n");
      if (seen++ >= 25) {
        int valid = 0;
        for (int i = numbersistart; i != numbersiend; i = (i + 1) % numberssize) {
          for (int j = numbersistart; j != numbersiend; j = (j + 1) % numberssize) {
            if (numbers[i] + numbers[j] == number) { valid = 1; break; }
          }
        }
        if (!valid) {
         printf("= %ld\n", number);
         return 0;
        }

        numbersistart = (numbersistart+1) % numberssize;
      }
      numbers[numbersiend] = number;
      numbersiend = (numbersiend+1) % numberssize;
      //if (seen > 2)break;
    }

    printf("sdf\n");
    return 0;
  }
#+END_SRC

#+RESULTS:
: = 104054607

 - 26 wrong <2020-12-12 Sat 21:30>
 - 104054607 correct <2020-12-12 Sat 21:38>
** part 2
 - <2020-12-12 Sat 21:38>
#+BEGIN_SRC cpp :results output
  #include <stdio.h>
  #include <stdlib.h>
  int main() {
    long numbers[10000];
    int numbersi = 0;

    FILE *f = fopen("09.txt", "r");
    char line[100];
    while (fgets(line, sizeof(line), f)) {
      long number = atol(line);
      numbers[numbersi++] = number;
    }

    for (int i = 0; i < numbersi; i++) {
      long sum = 0;
      long min = 999999999999999;
      long max = 0;
      for (int j = i; j < numbersi; j++) {
        if (numbers[j] < min) min = numbers[j];
        if (numbers[j] > max) max = numbers[j];
        sum += numbers[j];
        if (sum == 104054607) {
        //if (sum == 127) {
          // printf(" %d..%d %d..%d\n", i, j, numbers[i], numbers[j]);
          printf("= %d\n", min + max);
          return 0;
        }
        //if (sum > 127) break;
        if (sum > 104054607) break;
      }
    }

    printf("sdf\n");
    return 0;
  }
#+END_SRC

#+RESULTS:
: = 13935797

 - 11828200 too low <2020-12-12 Sat 21:41>
 - 13935797 correct <2020-12-12 Sat 21:46>
* day 10
** puzzle
--- Day 10: Adapter Array ---

Patched into the aircraft's data port, you discover weather forecasts of a massive tropical storm. Before you can figure out whether it will impact your vacation plans, however, your device suddenly turns off!

Its battery is dead.

You'll need to plug it in. There's only one problem: the charging outlet near your seat produces the wrong number of jolts. Always prepared, you make a list of all of the joltage adapters in your bag.

Each of your joltage adapters is rated for a specific output joltage (your puzzle input). Any given adapter can take an input 1, 2, or 3 jolts lower than its rating and still produce its rated output joltage.

In addition, your device has a built-in joltage adapter rated for 3 jolts higher than the highest-rated adapter in your bag. (If your adapter list were 3, 9, and 6, your device's built-in adapter would be rated for 12 jolts.)

Treat the charging outlet near your seat as having an effective joltage rating of 0.

Since you have some time to kill, you might as well test all of your adapters. Wouldn't want to get to your resort and realize you can't even charge your device!

If you use every adapter in your bag at once, what is the distribution of joltage differences between the charging outlet, the adapters, and your device?

For example, suppose that in your bag, you have adapters with the following joltage ratings:

16
10
15
5
1
11
7
19
6
12
4

With these adapters, your device's built-in joltage adapter would be rated for 19 + 3 = 22 jolts, 3 higher than the highest-rated adapter.

Because adapters can only connect to a source 1-3 jolts lower than its rating, in order to use every adapter, you'd need to choose them like this:

    The charging outlet has an effective rating of 0 jolts, so the only adapters that could connect to it directly would need to have a joltage rating of 1, 2, or 3 jolts. Of these, only one you have is an adapter rated 1 jolt (difference of 1).
    From your 1-jolt rated adapter, the only choice is your 4-jolt rated adapter (difference of 3).
    From the 4-jolt rated adapter, the adapters rated 5, 6, or 7 are valid choices. However, in order to not skip any adapters, you have to pick the adapter rated 5 jolts (difference of 1).
    Similarly, the next choices would need to be the adapter rated 6 and then the adapter rated 7 (with difference of 1 and 1).
    The only adapter that works with the 7-jolt rated adapter is the one rated 10 jolts (difference of 3).
    From 10, the choices are 11 or 12; choose 11 (difference of 1) and then 12 (difference of 1).
    After 12, only valid adapter has a rating of 15 (difference of 3), then 16 (difference of 1), then 19 (difference of 3).
    Finally, your device's built-in adapter is always 3 higher than the highest adapter, so its rating is 22 jolts (always a difference of 3).

In this example, when using every adapter, there are 7 differences of 1 jolt and 5 differences of 3 jolts.

Here is a larger example:

28
33
18
42
31
14
46
20
48
47
24
23
49
45
19
38
39
11
1
32
25
35
8
17
7
9
4
2
34
10
3

In this larger example, in a chain that uses all of the adapters, there are 22 differences of 1 jolt and 10 differences of 3 jolts.

Find a chain that uses all of your adapters to connect the charging outlet to your device's built-in adapter and count the joltage differences between the charging outlet, the adapters, and your device. What is the number of 1-jolt differences multiplied by the number of 3-jolt differences?

Your puzzle answer was 2775.
--- Part Two ---

To completely determine whether you have enough adapters, you'll need to figure out how many different ways they can be arranged. Every arrangement needs to connect the charging outlet to your device. The previous rules about when adapters can successfully connect still apply.

The first example above (the one that starts with 16, 10, 15) supports the following arrangements:

(0), 1, 4, 5, 6, 7, 10, 11, 12, 15, 16, 19, (22)
(0), 1, 4, 5, 6, 7, 10, 12, 15, 16, 19, (22)
(0), 1, 4, 5, 7, 10, 11, 12, 15, 16, 19, (22)
(0), 1, 4, 5, 7, 10, 12, 15, 16, 19, (22)
(0), 1, 4, 6, 7, 10, 11, 12, 15, 16, 19, (22)
(0), 1, 4, 6, 7, 10, 12, 15, 16, 19, (22)
(0), 1, 4, 7, 10, 11, 12, 15, 16, 19, (22)
(0), 1, 4, 7, 10, 12, 15, 16, 19, (22)

(The charging outlet and your device's built-in adapter are shown in parentheses.) Given the adapters from the first example, the total number of arrangements that connect the charging outlet to your device is 8.

The second example above (the one that starts with 28, 33, 18) has many arrangements. Here are a few:

(0), 1, 2, 3, 4, 7, 8, 9, 10, 11, 14, 17, 18, 19, 20, 23, 24, 25, 28, 31,
32, 33, 34, 35, 38, 39, 42, 45, 46, 47, 48, 49, (52)

(0), 1, 2, 3, 4, 7, 8, 9, 10, 11, 14, 17, 18, 19, 20, 23, 24, 25, 28, 31,
32, 33, 34, 35, 38, 39, 42, 45, 46, 47, 49, (52)

(0), 1, 2, 3, 4, 7, 8, 9, 10, 11, 14, 17, 18, 19, 20, 23, 24, 25, 28, 31,
32, 33, 34, 35, 38, 39, 42, 45, 46, 48, 49, (52)

(0), 1, 2, 3, 4, 7, 8, 9, 10, 11, 14, 17, 18, 19, 20, 23, 24, 25, 28, 31,
32, 33, 34, 35, 38, 39, 42, 45, 46, 49, (52)

(0), 1, 2, 3, 4, 7, 8, 9, 10, 11, 14, 17, 18, 19, 20, 23, 24, 25, 28, 31,
32, 33, 34, 35, 38, 39, 42, 45, 47, 48, 49, (52)

(0), 3, 4, 7, 10, 11, 14, 17, 20, 23, 25, 28, 31, 34, 35, 38, 39, 42, 45,
46, 48, 49, (52)

(0), 3, 4, 7, 10, 11, 14, 17, 20, 23, 25, 28, 31, 34, 35, 38, 39, 42, 45,
46, 49, (52)

(0), 3, 4, 7, 10, 11, 14, 17, 20, 23, 25, 28, 31, 34, 35, 38, 39, 42, 45,
47, 48, 49, (52)

(0), 3, 4, 7, 10, 11, 14, 17, 20, 23, 25, 28, 31, 34, 35, 38, 39, 42, 45,
47, 49, (52)

(0), 3, 4, 7, 10, 11, 14, 17, 20, 23, 25, 28, 31, 34, 35, 38, 39, 42, 45,
48, 49, (52)

In total, this set of adapters can connect the charging outlet to your device in 19208 distinct arrangements.

You glance back down at your bag and try to remember why you brought so many adapters; there must be more than a trillion valid ways to arrange them! Surely, there must be an efficient way to count the arrangements.

What is the total number of distinct ways you can arrange the adapters to connect the charging outlet to your device?

Your puzzle answer was 518344341716992.

Both parts of this puzzle are complete! They provide two gold stars: **
** part 1
 - <2020-12-13 Sun 18:50>
#+BEGIN_SRC cpp :results output
  #include <stdio.h>
  #include <stdlib.h>

  int adapters[200];
  int adaptersi = 0;

  void findchain(int jolt, int chain[200], int chaini) {
    //if (chaini >= adaptersi/2) return;
    //printf("## %d %d\n", jolt, chaini);
    if (chaini == adaptersi) {
      int diff1s = 0;
      int diff3s = 0;
      int curjolt = 0;
      for (int i = 0; i < chaini; i++) {
        if (chain[i] - curjolt == 1) diff1s++;
        if (chain[i] - curjolt == 3) diff3s++;
        curjolt = chain[i];
      }
      //printf("= %d\n", diff1s * diff3s);
      return;
    }
    for (int i = 0; i < adaptersi; i++) {
      //printf("#### %d %d\n", adapters[i], jolt);
      if (jolt <= adapters[i] - 1 && jolt >= adapters[i] - 3) {
        chain[chaini++] = adapters[i];
        findchain(adapters[i], chain, chaini+1);
      }
    }
  }

  int main() {
    FILE *f = fopen("10.txt", "r");
    char line[100];
    while (fgets(line, sizeof(line), f)) {
      adapters[adaptersi++] = atoi(line);
    }

    int chain[200];

    findchain(0, chain, 0);

    // for (int i = 0; i < adaptersi; i++) {
    //   printf("%d\n", adapters[i]);
    // }

    // printf("sdf\n");
    return 0;
  }
#+END_SRC

#+RESULTS:

** part 1 B
#+BEGIN_SRC cpp :results output
  #include <stdio.h>
  #include <stdlib.h>

  int adapters[200] = {0};
  int adaptersi = 0;
  int inputjolt = 0;

  void findchain(int jolt, int chain[200], int chaini) {
      //printf("## jolt=%d chaini=%d i=%d\n", jolt, chaini, adaptersi);
      if (chaini >= adaptersi) {
      //printf("##2 jolt=%d chaini=%d chainlast=%d  inputjolt=%d\n", jolt, chaini, chain[chaini-1], inputjolt);
      
              int diff1s = 0;
              int diff3s = 0;
              int curjolt = 0;
              for (int i = 0; i < chaini; i++) {
                  if (chain[i] - curjolt == 1) diff1s++;
                  if (chain[i] - curjolt == 3) diff3s++;
                  curjolt = chain[i];
              }
              printf("= %d\n", diff1s * diff3s);
              exit(0);
          return;
      }

      for (int i = 1; i <= 3; i++) {
          if (adapters[jolt+i]) {
              chain[chaini++] = jolt+i;
              findchain(jolt+i, chain, chaini);
          }
      }
  }

  int main() {
      FILE *f = fopen("10.txt", "r");
      char line[100];
      while (fgets(line, sizeof(line), f)) {
          int jolt = atoi(line);
          adapters[jolt] = 1;
          adaptersi++;
          if (jolt > inputjolt) inputjolt = jolt;
      }
      inputjolt += 3;
      adapters[inputjolt] = 1;
      adaptersi++;

      int chain[200];
      findchain(0, chain, 0);

      // for (int i = 0; i < adaptersi; i++) {
      //   printf("%d\n", adapters[i]);
      // }

      printf("sdf\n");
      return 0;
  }
#+END_SRC

#+RESULTS:
: = 2775

 - 2775 correct <2020-12-13 Sun 19:29>
** part 2
#+BEGIN_SRC cpp :results output
  #include <stdio.h>
  #include <stdlib.h>

  int adapters[200] = {0};
  int adaptersi = 0;
  int inputjolt = 0;
  int combinations = 0;

  void findchain(int jolt, int chain[200], int chaini) {
      //printf("## jolt=%d chaini=%d i=%d\n", jolt, chaini, adaptersi);
      if (chaini >= adaptersi) {
      //printf("##2 jolt=%d chaini=%d chainlast=%d  inputjolt=%d\n", jolt, chaini, chain[chaini-1], inputjolt);

              int diff1s = 0;
              int diff3s = 0;
              int curjolt = 0;
              for (int i = 0; i < chaini; i++) {
                  if (chain[i] - curjolt == 1) diff1s++;
                  if (chain[i] - curjolt == 3) diff3s++;
                  curjolt = chain[i];
              }
              combinations++;
              // printf("= %d\n", diff1s * diff3s);
              // exit(0);
          return;
      }

      for (int i = 1; i <= 3; i++) {
          if (adapters[jolt+i]) {
              chain[chaini++] = jolt+i;
              findchain(jolt+i, chain, chaini);
          }
      }
  }

  int compare(const void *aa, const void *bb) {
    int a = *(int*)aa;
    int b = *(int*)bb;

    return a < b ? -1 : a == b ? 0 : 1;
  }

  int main() {
      FILE *f = fopen("10t2.txt", "r");
      char line[100];
      adapters[adaptersi++] = 0;
      while (fgets(line, sizeof(line), f)) {
          int jolt = atoi(line);
          adapters[adaptersi++] = jolt;
          if (jolt > inputjolt) inputjolt = jolt;
      }
      inputjolt += 3;
      adapters[adaptersi++] = inputjolt;

      qsort(adapters, adaptersi, sizeof(int), compare);

      // long combinations = 1;
      // for (int i = 0; i < adaptersi; i++) {
      //   int reachable = 0;
      //   for (int j = i+1; j < adaptersi; j++) {
      //     if (adapters[j] <= adapters[i] + 3) reachable++;
      //   }
      //   if (reachable >= 2) {
      //     combinations = combinations << reachable;
      //     i += reachable-1;
      //   }
      //   printf("%d reachable=%d combinations=%ld\n", adapters[i], reachable, combinations);
      // }

      long combinations = 1;
      for (int i = adaptersi-1; i >= 0; i--) {
        int reachable = 0;
        for (int j = i-1; j >= 0; j--) {
          if (adapters[i] <= adapters[j] + 3) reachable++;
        }
        if (reachable >= 2) {
          //combinations = combinations << reachable;
          combinations *= 2;
          //i -= reachable-1;
        }
        //for (int j = 0; j < reachable-1; j++) {
        //   combinations *= 2;
        // }
        printf("%d reachable=%d combinations=%ld\n", adapters[i], reachable, combinations);
      }
      //combinations /= 2;


      printf("= %d\n", combinations);
      return 0;
  }
#+END_SRC

#+RESULTS:
#+begin_example
52 reachable=1 combinations=1
49 reachable=3 combinations=2
48 reachable=3 combinations=4
47 reachable=2 combinations=8
46 reachable=1 combinations=8
45 reachable=1 combinations=8
42 reachable=1 combinations=8
39 reachable=1 combinations=8
38 reachable=1 combinations=8
35 reachable=3 combinations=16
34 reachable=3 combinations=32
33 reachable=2 combinations=64
32 reachable=1 combinations=64
31 reachable=1 combinations=64
28 reachable=1 combinations=64
25 reachable=2 combinations=128
24 reachable=1 combinations=128
23 reachable=1 combinations=128
20 reachable=3 combinations=256
19 reachable=2 combinations=512
18 reachable=1 combinations=512
17 reachable=1 combinations=512
14 reachable=1 combinations=512
11 reachable=3 combinations=1024
10 reachable=3 combinations=2048
9 reachable=2 combinations=4096
8 reachable=1 combinations=4096
7 reachable=1 combinations=4096
4 reachable=3 combinations=8192
3 reachable=3 combinations=16384
2 reachable=2 combinations=32768
1 reachable=1 combinations=32768
0 reachable=0 combinations=32768
= 32768
#+end_example
** part 2 B
#+BEGIN_SRC cpp :results output
  #include <stdio.h>
  #include <stdlib.h>

  int adapters[200] = {0};
  int adaptersi = 0;
  int inputjolt = 0;

  long cache[300] = {-1};
 
  long combs(int jolt) {
    //printf("## jolt=%d, hasadapter=%d\n", jolt, adapters[jolt]);
    if (jolt == 0) return 1;
    if (jolt < 0 || !adapters[jolt]) return 0;
    if (cache[jolt]) return cache[jolt];
    long out = combs(jolt-1) + combs(jolt-2) + combs(jolt-3);
    cache[jolt] = out;
    return out;
  }

  int main() {
      FILE *f = fopen("10.txt", "r");
      char line[100];
      while (fgets(line, sizeof(line), f)) {
          int jolt = atoi(line);
          adapters[jolt] = 1;
          adaptersi++;
          if (jolt > inputjolt) inputjolt = jolt;
      }
      inputjolt += 3;
      adapters[inputjolt] = 1;
      adaptersi++;

      for (int i = 0; i <= inputjolt; i++) {
      //   if (adapters[i]) printf("%d\n", i);
      }

      printf("= %ld\n", combs(inputjolt));
      return 0;
  }
#+END_SRC

#+RESULTS:
: = 518344341716992

 - 518344341716992 <2020-12-13 Sun 20:22>
 - had to look up solution. Forgot about caching recursive method
* day 11
** puzzle
--- Day 11: Seating System ---

Your plane lands with plenty of time to spare. The final leg of your journey is a ferry that goes directly to the tropical island where you can finally start your vacation. As you reach the waiting area to board the ferry, you realize you're so early, nobody else has even arrived yet!

By modeling the process people use to choose (or abandon) their seat in the waiting area, you're pretty sure you can predict the best place to sit. You make a quick map of the seat layout (your puzzle input).

The seat layout fits neatly on a grid. Each position is either floor (.), an empty seat (L), or an occupied seat (#). For example, the initial seat layout might look like this:

L.LL.LL.LL
LLLLLLL.LL
L.L.L..L..
LLLL.LL.LL
L.LL.LL.LL
L.LLLLL.LL
..L.L.....
LLLLLLLLLL
L.LLLLLL.L
L.LLLLL.LL

Now, you just need to model the people who will be arriving shortly. Fortunately, people are entirely predictable and always follow a simple set of rules. All decisions are based on the number of occupied seats adjacent to a given seat (one of the eight positions immediately up, down, left, right, or diagonal from the seat). The following rules are applied to every seat simultaneously:

    If a seat is empty (L) and there are no occupied seats adjacent to it, the seat becomes occupied.
    If a seat is occupied (#) and four or more seats adjacent to it are also occupied, the seat becomes empty.
    Otherwise, the seat's state does not change.

Floor (.) never changes; seats don't move, and nobody sits on the floor.

After one round of these rules, every seat in the example layout becomes occupied:

#.##.##.##
#######.##
#.#.#..#..
####.##.##
#.##.##.##
#.#####.##
..#.#.....
##########
#.######.#
#.#####.##

After a second round, the seats with four or more occupied adjacent seats become empty again:

#.LL.L#.##
#LLLLLL.L#
L.L.L..L..
#LLL.LL.L#
#.LL.LL.LL
#.LLLL#.##
..L.L.....
#LLLLLLLL#
#.LLLLLL.L
#.#LLLL.##

This process continues for three more rounds:

#.##.L#.##
#L###LL.L#
L.#.#..#..
#L##.##.L#
#.##.LL.LL
#.###L#.##
..#.#.....
#L######L#
#.LL###L.L
#.#L###.##

#.#L.L#.##
#LLL#LL.L#
L.L.L..#..
#LLL.##.L#
#.LL.LL.LL
#.LL#L#.##
..L.L.....
#L#LLLL#L#
#.LLLLLL.L
#.#L#L#.##

#.#L.L#.##
#LLL#LL.L#
L.#.L..#..
#L##.##.L#
#.#L.LL.LL
#.#L#L#.##
..L.L.....
#L#L##L#L#
#.LLLLLL.L
#.#L#L#.##

At this point, something interesting happens: the chaos stabilizes and further applications of these rules cause no seats to change state! Once people stop moving around, you count 37 occupied seats.

Simulate your seating area by applying the seating rules repeatedly until no seats change state. How many seats end up occupied?

Your puzzle answer was 2238.
--- Part Two ---

As soon as people start to arrive, you realize your mistake. People don't just care about adjacent seats - they care about the first seat they can see in each of those eight directions!

Now, instead of considering just the eight immediately adjacent seats, consider the first seat in each of those eight directions. For example, the empty seat below would see eight occupied seats:

.......#.
...#.....
.#.......
.........
..#L....#
....#....
.........
#........
...#.....

The leftmost empty seat below would only see one empty seat, but cannot see any of the occupied ones:

.............
.L.L.#.#.#.#.
.............

The empty seat below would see no occupied seats:

.##.##.
#.#.#.#
##...##
...L...
##...##
#.#.#.#
.##.##.

Also, people seem to be more tolerant than you expected: it now takes five or more visible occupied seats for an occupied seat to become empty (rather than four or more from the previous rules). The other rules still apply: empty seats that see no occupied seats become occupied, seats matching no rule don't change, and floor never changes.

Given the same starting layout as above, these new rules cause the seating area to shift around as follows:

L.LL.LL.LL
LLLLLLL.LL
L.L.L..L..
LLLL.LL.LL
L.LL.LL.LL
L.LLLLL.LL
..L.L.....
LLLLLLLLLL
L.LLLLLL.L
L.LLLLL.LL

#.##.##.##
#######.##
#.#.#..#..
####.##.##
#.##.##.##
#.#####.##
..#.#.....
##########
#.######.#
#.#####.##

#.LL.LL.L#
#LLLLLL.LL
L.L.L..L..
LLLL.LL.LL
L.LL.LL.LL
L.LLLLL.LL
..L.L.....
LLLLLLLLL#
#.LLLLLL.L
#.LLLLL.L#

#.L#.##.L#
#L#####.LL
L.#.#..#..
##L#.##.##
#.##.#L.##
#.#####.#L
..#.#.....
LLL####LL#
#.L#####.L
#.L####.L#

#.L#.L#.L#
#LLLLLL.LL
L.L.L..#..
##LL.LL.L#
L.LL.LL.L#
#.LLLLL.LL
..L.L.....
LLLLLLLLL#
#.LLLLL#.L
#.L#LL#.L#

#.L#.L#.L#
#LLLLLL.LL
L.L.L..#..
##L#.#L.L#
L.L#.#L.L#
#.L####.LL
..#.#.....
LLL###LLL#
#.LLLLL#.L
#.L#LL#.L#

#.L#.L#.L#
#LLLLLL.LL
L.L.L..#..
##L#.#L.L#
L.L#.LL.L#
#.LLLL#.LL
..#.L.....
LLL###LLL#
#.LLLLL#.L
#.L#LL#.L#

Again, at this point, people stop shifting around and the seating area reaches equilibrium. Once this occurs, you count 26 occupied seats.

Given the new visibility method and the rule change for occupied seats becoming empty, once equilibrium is reached, how many seats end up occupied?

Your puzzle answer was 2013.

Both parts of this puzzle are complete! They provide two gold stars: **
** part 1
 - <2020-12-14 Mon 19:48>
#+BEGIN_SRC cpp :results output
  #include <stdio.h>
  int main() {
      FILE *f = fopen("11.txt", "r");
      char map[100][100];
      int w = 0, h = 0;

      int x = 0, y = 0;
      char line[200];
      while (fgets(line, sizeof(line), f)) {
          x = 0;
          for (int i = 0; line[i] != '\n'; i++) {
              map[y][x++] = line[i];
          }
          w = x;
          y++;
      }
      h = y;


      // for (int y = 0; y < h; y++) {
      //   for (int x = 0; x < w; x++) {
      //     printf("%c", map[y][x]);
      //   }
      //   printf("\n");
      // }

      char map2[100][100];
      for (int loops = 0; loops < 1000; loops++) {
          for (int y = 0; y < h; y++)
              for (int x = 0; x < w; x++)
                  map2[y][x] = map[y][x];

          for (int y = 0; y < h; y++) {
              for (int x = 0; x < w; x++) {
                  int neighbors = 0;
                  for (int dy = -1; dy <= 1; dy++) 
                      for (int dx = -1; dx <= 1; dx++) 
                          if (!(dx == 0 && dy == 0))
                            if (x+dx >= 0 && x+dx < w && y+dy >= 0 && y+dy < h && map2[y+dy][x+dx] == '#')
                              neighbors++;
                  if (map2[y][x] == 'L' && neighbors == 0)
                      map[y][x] = '#';
                  else if (map2[y][x] == '#' && neighbors >= 4)
                      map[y][x] = 'L';
              }
          }

          // printf("\n\n");
          // for (int y = 0; y < h; y++) {
          //     for (int x = 0; x < w; x++) {
          //         printf("%c", map[y][x]);
          //     }
          //     printf("\n");
          // }

          int equal = 1;
          for (int y = 0; y < h; y++)
              for (int x = 0; x < w; x++)
                if (map[y][x] != map2[y][x]) {
                  equal = 0;
                  break;
                }
          if (equal) break;
      }

      int occupied = 0;
      for (int y = 0; y < h; y++) 
        for (int x = 0; x < w; x++) 
          if (map[y][x] == '#')
            occupied++;


      printf("= %d\n", occupied);
      return 0;
  }
#+END_SRC

#+RESULTS:
: = 2238


 - 172 too low <2020-12-14 Mon 20:02>
 - 2238 correct <2020-12-14 Mon 20:05>
** part 2
#+BEGIN_SRC cpp :results output
  #include <stdio.h>
  int main() {
      FILE *f = fopen("11.txt", "r");
      char map[100][100];
      int w = 0, h = 0;

      int x = 0, y = 0;
      char line[200];
      while (fgets(line, sizeof(line), f)) {
          x = 0;
          for (int i = 0; line[i] != '\n'; i++) {
              map[y][x++] = line[i];
          }
          w = x;
          y++;
      }
      h = y;


      // for (int y = 0; y < h; y++) {
      //   for (int x = 0; x < w; x++) {
      //     printf("%c", map[y][x]);
      //   }
      //   printf("\n");
      // }

      char map2[100][100];
      for (int loops = 0; loops < 1000; loops++) {
          for (int y = 0; y < h; y++)
              for (int x = 0; x < w; x++)
                  map2[y][x] = map[y][x];

          for (int y = 0; y < h; y++) {
              for (int x = 0; x < w; x++) {
                  int neighbors = 0;
                  for (int dy = -1; dy <= 1; dy++) 
                      for (int dx = -1; dx <= 1; dx++)
                          if (!(dx == 0 && dy == 0)) {
                            int x0 = x+dx;
                            int y0 = y+dy;
                            while (x0 >= 0 && x0 < w && y0 >= 0 && y0 < h) {
                              if (map2[y0][x0] == 'L')
                                break;
                              if (map2[y0][x0] == '#') {
                                neighbors++;
                                break;
                              }
                              x0+=dx;
                              y0+=dy;
                            }
                          }
                  if (map2[y][x] == 'L' && neighbors == 0)
                      map[y][x] = '#';
                  else if (map2[y][x] == '#' && neighbors >= 5)
                      map[y][x] = 'L';
              }
          }

          // printf("\n\n");
          // for (int y = 0; y < h; y++) {
          //     for (int x = 0; x < w; x++) {
          //         printf("%c", map[y][x]);
          //     }
          //     printf("\n");
          // }

          int equal = 1;
          for (int y = 0; y < h; y++)
              for (int x = 0; x < w; x++)
                if (map[y][x] != map2[y][x]) {
                  equal = 0;
                  break;
                }
          if (equal) break;
      }

      int occupied = 0;
      for (int y = 0; y < h; y++) 
        for (int x = 0; x < w; x++) 
          if (map[y][x] == '#')
            occupied++;


      printf("= %d\n", occupied);
      return 0;
  }
#+END_SRC

#+RESULTS:
: = 2013

 - 2013 correct <2020-12-14 Mon 20:10>
 
* day 12
** puzzle
--- Day 12: Rain Risk ---

Your ferry made decent progress toward the island, but the storm came in faster than anyone expected. The ferry needs to take evasive actions!

Unfortunately, the ship's navigation computer seems to be malfunctioning; rather than giving a route directly to safety, it produced extremely circuitous instructions. When the captain uses the PA system to ask if anyone can help, you quickly volunteer.

The navigation instructions (your puzzle input) consists of a sequence of single-character actions paired with integer input values. After staring at them for a few minutes, you work out what they probably mean:

    Action N means to move north by the given value.
    Action S means to move south by the given value.
    Action E means to move east by the given value.
    Action W means to move west by the given value.
    Action L means to turn left the given number of degrees.
    Action R means to turn right the given number of degrees.
    Action F means to move forward by the given value in the direction the ship is currently facing.

The ship starts by facing east. Only the L and R actions change the direction the ship is facing. (That is, if the ship is facing east and the next instruction is N10, the ship would move north 10 units, but would still move east if the following action were F.)

For example:

F10
N3
F7
R90
F11

These instructions would be handled as follows:

    F10 would move the ship 10 units east (because the ship starts by facing east) to east 10, north 0.
    N3 would move the ship 3 units north to east 10, north 3.
    F7 would move the ship another 7 units east (because the ship is still facing east) to east 17, north 3.
    R90 would cause the ship to turn right by 90 degrees and face south; it remains at east 17, north 3.
    F11 would move the ship 11 units south to east 17, south 8.

At the end of these instructions, the ship's Manhattan distance (sum of the absolute values of its east/west position and its north/south position) from its starting position is 17 + 8 = 25.

Figure out where the navigation instructions lead. What is the Manhattan distance between that location and the ship's starting position?

Your puzzle answer was 2847.
--- Part Two ---

Before you can give the destination to the captain, you realize that the actual action meanings were printed on the back of the instructions the whole time.

Almost all of the actions indicate how to move a waypoint which is relative to the ship's position:

    Action N means to move the waypoint north by the given value.
    Action S means to move the waypoint south by the given value.
    Action E means to move the waypoint east by the given value.
    Action W means to move the waypoint west by the given value.
    Action L means to rotate the waypoint around the ship left (counter-clockwise) the given number of degrees.
    Action R means to rotate the waypoint around the ship right (clockwise) the given number of degrees.
    Action F means to move forward to the waypoint a number of times equal to the given value.

The waypoint starts 10 units east and 1 unit north relative to the ship. The waypoint is relative to the ship; that is, if the ship moves, the waypoint moves with it.

For example, using the same instructions as above:

    F10 moves the ship to the waypoint 10 times (a total of 100 units east and 10 units north), leaving the ship at east 100, north 10. The waypoint stays 10 units east and 1 unit north of the ship.
    N3 moves the waypoint 3 units north to 10 units east and 4 units north of the ship. The ship remains at east 100, north 10.
    F7 moves the ship to the waypoint 7 times (a total of 70 units east and 28 units north), leaving the ship at east 170, north 38. The waypoint stays 10 units east and 4 units north of the ship.
    R90 rotates the waypoint around the ship clockwise 90 degrees, moving it to 4 units east and 10 units south of the ship. The ship remains at east 170, north 38.
    F11 moves the ship to the waypoint 11 times (a total of 44 units east and 110 units south), leaving the ship at east 214, south 72. The waypoint stays 4 units east and 10 units south of the ship.

After these operations, the ship's Manhattan distance from its starting position is 214 + 72 = 286.

Figure out where the navigation instructions actually lead. What is the Manhattan distance between that location and the ship's starting position?

Your puzzle answer was 29839.

Both parts of this puzzle are complete! They provide two gold stars: **
** part 1
 - <2020-12-15 Tue 18:30>
#+BEGIN_SRC cpp :results output
#include <stdio.h>
#include <stdlib.h>
int main() {
  FILE *f = fopen("12.txt", "r");
  char line[100];
  int x = 0;
  int y = 0;
  int rotation = 90;
  while (fgets(line, sizeof(line), f)) {
    int val = atoi(line+1);
    switch (line[0]) {
      case 'N': y+=val; break;
      case 'S': y-=val; break;
      case 'W': x-=val; break;
      case 'E': x+=val; break;
      case 'F': 
        switch (rotation) {
        case 0: y+=val; break;
        case 90: x+=val; break;
        case 180: y-=val; break;
        case 270: x-=val; break;
        default: printf("## ! %d (%d)\n", rotation, val); return 0;
        }
        break;
      case 'L': rotation = (360+rotation-val) % 360; break;
      case 'R': rotation = (360+rotation+val) % 360; break;
      default: printf("##2\n"); return 0;
    }
    //printf("%d,%d  r=%d  '%s'", x, y, rotation, line);
  }

  printf("= %d\n", abs(x) + abs(y));
  return 0;
}
#+END_SRC

#+RESULTS:
: = 2847

 - 581 too low <2020-12-15 Tue 18:41>
 - 2847 correct <2020-12-15 Tue 18:43>
** part 2
#+BEGIN_SRC cpp :results output
#include <stdio.h>
#include <stdlib.h>
int main() {
  FILE *f = fopen("12.txt", "r");
  char line[100];
  int sx = 0;
  int sy = 0;
  int x = 10;
  int y = 1;
  while (fgets(line, sizeof(line), f)) {
    int val = atoi(line+1);
    switch (line[0]) {
      case 'N': y+=val; break;
      case 'S': y-=val; break;
      case 'W': x-=val; break;
      case 'E': x+=val; break;
      case 'F': 
        sx+=x*val;
        sy+=y*val;
        break;
      case 'L': 
      while (val > 0) {
        int tmp = y;
        y = x;
        x = -tmp;
        val -= 90;
      }
      break;
      case 'R': 
      while (val > 0) {
        for (int i = 0; i < 3; i++) {
        int tmp = y;
        y = x;
        x = -tmp;
        }
        val -= 90;
      }
      break;
      default: printf("##2\n"); return 0;
    }
    //printf("s=%d,%d w=%d,%d  '%s'", sx, sy, x, y, line);
  }

  printf("= %d\n", abs(sx) + abs(sy));
  return 0;
}
#+END_SRC

#+RESULTS:
: = 29839

 - 29839 correct <2020-12-15 Tue 18:52>
* day 13
** puzzle
--- Day 13: Shuttle Search ---

Your ferry can make it safely to a nearby port, but it won't get much further. When you call to book another ship, you discover that no ships embark from that port to your vacation island. You'll need to get from the port to the nearest airport.

Fortunately, a shuttle bus service is available to bring you from the sea port to the airport! Each bus has an ID number that also indicates how often the bus leaves for the airport.

Bus schedules are defined based on a timestamp that measures the number of minutes since some fixed reference point in the past. At timestamp 0, every bus simultaneously departed from the sea port. After that, each bus travels to the airport, then various other locations, and finally returns to the sea port to repeat its journey forever.

The time this loop takes a particular bus is also its ID number: the bus with ID 5 departs from the sea port at timestamps 0, 5, 10, 15, and so on. The bus with ID 11 departs at 0, 11, 22, 33, and so on. If you are there when the bus departs, you can ride that bus to the airport!

Your notes (your puzzle input) consist of two lines. The first line is your estimate of the earliest timestamp you could depart on a bus. The second line lists the bus IDs that are in service according to the shuttle company; entries that show x must be out of service, so you decide to ignore them.

To save time once you arrive, your goal is to figure out the earliest bus you can take to the airport. (There will be exactly one such bus.)

For example, suppose you have the following notes:

939
7,13,x,x,59,x,31,19

Here, the earliest timestamp you could depart is 939, and the bus IDs in service are 7, 13, 59, 31, and 19. Near timestamp 939, these bus IDs depart at the times marked D:

time   bus 7   bus 13  bus 59  bus 31  bus 19
929      .       .       .       .       .
930      .       .       .       D       .
931      D       .       .       .       D
932      .       .       .       .       .
933      .       .       .       .       .
934      .       .       .       .       .
935      .       .       .       .       .
936      .       D       .       .       .
937      .       .       .       .       .
938      D       .       .       .       .
939      .       .       .       .       .
940      .       .       .       .       .
941      .       .       .       .       .
942      .       .       .       .       .
943      .       .       .       .       .
944      .       .       D       .       .
945      D       .       .       .       .
946      .       .       .       .       .
947      .       .       .       .       .
948      .       .       .       .       .
949      .       D       .       .       .

The earliest bus you could take is bus ID 59. It doesn't depart until timestamp 944, so you would need to wait 944 - 939 = 5 minutes before it departs. Multiplying the bus ID by the number of minutes you'd need to wait gives 295.

What is the ID of the earliest bus you can take to the airport multiplied by the number of minutes you'll need to wait for that bus?

Your puzzle answer was 2305.
--- Part Two ---

The shuttle company is running a contest: one gold coin for anyone that can find the earliest timestamp such that the first bus ID departs at that time and each subsequent listed bus ID departs at that subsequent minute. (The first line in your input is no longer relevant.)

For example, suppose you have the same list of bus IDs as above:

7,13,x,x,59,x,31,19

An x in the schedule means there are no constraints on what bus IDs must depart at that time.

This means you are looking for the earliest timestamp (called t) such that:

    Bus ID 7 departs at timestamp t.
    Bus ID 13 departs one minute after timestamp t.
    There are no requirements or restrictions on departures at two or three minutes after timestamp t.
    Bus ID 59 departs four minutes after timestamp t.
    There are no requirements or restrictions on departures at five minutes after timestamp t.
    Bus ID 31 departs six minutes after timestamp t.
    Bus ID 19 departs seven minutes after timestamp t.

The only bus departures that matter are the listed bus IDs at their specific offsets from t. Those bus IDs can depart at other times, and other bus IDs can depart at those times. For example, in the list above, because bus ID 19 must depart seven minutes after the timestamp at which bus ID 7 departs, bus ID 7 will always also be departing with bus ID 19 at seven minutes after timestamp t.

In this example, the earliest timestamp at which this occurs is 1068781:

time     bus 7   bus 13  bus 59  bus 31  bus 19
1068773    .       .       .       .       .
1068774    D       .       .       .       .
1068775    .       .       .       .       .
1068776    .       .       .       .       .
1068777    .       .       .       .       .
1068778    .       .       .       .       .
1068779    .       .       .       .       .
1068780    .       .       .       .       .
1068781    D       .       .       .       .
1068782    .       D       .       .       .
1068783    .       .       .       .       .
1068784    .       .       .       .       .
1068785    .       .       D       .       .
1068786    .       .       .       .       .
1068787    .       .       .       D       .
1068788    D       .       .       .       D
1068789    .       .       .       .       .
1068790    .       .       .       .       .
1068791    .       .       .       .       .
1068792    .       .       .       .       .
1068793    .       .       .       .       .
1068794    .       .       .       .       .
1068795    D       D       .       .       .
1068796    .       .       .       .       .
1068797    .       .       .       .       .

In the above example, bus ID 7 departs at timestamp 1068788 (seven minutes after t). This is fine; the only requirement on that minute is that bus ID 19 departs then, and it does.

Here are some other examples:

    The earliest timestamp that matches the list 17,x,13,19 is 3417.
    67,7,59,61 first occurs at timestamp 754018.
    67,x,7,59,61 first occurs at timestamp 779210.
    67,7,x,59,61 first occurs at timestamp 1261476.
    1789,37,47,1889 first occurs at timestamp 1202161486.

However, with so many bus IDs in your list, surely the actual earliest timestamp will be larger than 100000000000000!

What is the earliest timestamp such that all of the listed bus IDs depart at offsets matching their positions in the list?

Your puzzle answer was 552612234243498.

Both parts of this puzzle are complete! They provide two gold stars: **
** part 1
 - <2020-12-15 Tue 19:12>
#+BEGIN_SRC cpp :results output
  #include <stdio.h>
  #include <stdlib.h>
  int main() {
    FILE *f = fopen("13.txt", "r");
    char line[1024];
    fgets(line, sizeof(line), f);
    int depart = atoi(line);
    fgets(line, sizeof(line), f);
    char *ptr = line;

    int times[1000];
    int timesi = 0;

    for (int i = 0; line[i]; i++) {
      if (line[i] == ',' || line[i+1] == 0) {
        //printf("##1 '%s'\n##2 '%s'\n", ptr, line+i);
        line[i++] = 0;
        if (ptr[0] != 'x') {
          int time = atoi(ptr);
          times[timesi++] = time;
        }
        ptr = line+i;
      }
    }
    timesi--;

    // for (int i = 0; i < timesi; i++) {
    //   printf("%d\n", times[i]);
    // }

    int earliestbus = 0;
    int earliesttime = 999999;
    for (int i = 0; i < timesi; i++) {
     int time = ((depart / times[i])+1) * times[i];
     printf("%d t=%d %d\n", times[i], time, time-depart);
     if (time >= depart) {
        if (time-depart < earliesttime) {
          earliesttime = time-depart;
          earliestbus = times[i];
        }
      }
    }

    printf("= %d\n", earliesttime * earliestbus);
    return 0;
  }
#+END_SRC

#+RESULTS:
#+begin_example
13 t=1001299 12
37 t=1001294 7
461 t=1001292 5
17 t=1001300 13
19 t=1001300 13
29 t=1001312 25
739 t=1001345 58
41 t=1001302 15
23 t=1001305 18
= 2305
#+end_example

 - 2305 correct <2020-12-15 Tue 19:28>

** part 2
#+BEGIN_SRC cpp :results output
  #include <stdio.h>
  #include <stdlib.h>
  int main() {
    FILE *f = fopen("13.txt", "r");
    char line[1024];
    fgets(line, sizeof(line), f);
    int depart = atoi(line);
    fgets(line, sizeof(line), f);
    char *ptr = line;

    int times[1000];
    int timesi = 0;

    for (int i = 0; line[i]; i++) {
      if (line[i] == ',' || line[i+1] == 0) {
        //printf("##1 '%s'\n##2 '%s'\n", ptr, line+i);
        line[i++] = 0;
        int time = -1;
        if (ptr[0] != 'x') {
          time = atoi(ptr);
        }
        times[timesi++] = time;
        ptr = line+i;
      }
    }
    timesi--;

    long firstt = -1;
    int firsttimesi = 0;
    for (int i = 0; i < timesi; i++) {
      if (times[i] != -1) {
        firstt = times[i];
        firsttimesi = i;
        break;
      }
    }

    int ii = 0;
    for (int i = firsttimesi+1; i < timesi; i++) {
      if (times[i] != -1)
        //printf("t*%d + %d = %c*%d and ", times[firsttimesi], i, 'a'+ii++, times[i]);
        printf("t*%d mod %d = %d and ", times[firsttimesi], times[i], i);
    }
    printf("\n");
    return 0;

    // t*17



    while (true) {
      firstt += times[firsttimesi];
      int works = 1;
      for (int i = firsttimesi+1; i < timesi; i++) {
        if (times[i] == -1) continue;
          long time = ((firstt / times[i])+1) * times[i];
          if (time - i != firstt) { works = 0; break; }
       }
      if (works) { printf("= %ld %d\n", firstt, firstt/times[firsttimesi]); break; }
    }
    return 0;
  }
#+END_SRC

#+RESULTS:
: t*13 mod 37 = 7 and t*13 mod 461 = 13 and t*13 mod 17 = 27 and t*13 mod 19 = 32 and t*13 mod 29 = 42 and t*13 mod 739 = 44 and t*13 mod 41 = 54 and t*13 mod 23 = 67 and

** part 2 B
#+BEGIN_SRC cpp :results output
  #include <stdio.h>
  #include <stdlib.h>
  int main() {
    FILE *f = fopen("13.txt", "r");
    char line[1024];
    fgets(line, sizeof(line), f);
    int depart = atoi(line);
    fgets(line, sizeof(line), f);
    char *ptr = line;

    int times[1000];
    int timesi = 0;

    for (int i = 0; line[i]; i++) {
      if (line[i] == ',' || line[i+1] == 0) {
        //printf("##1 '%s'\n##2 '%s'\n", ptr, line+i);
        line[i++] = 0;
        int time = -1;
        if (ptr[0] != 'x') {
          time = atoi(ptr);
        }
        times[timesi++] = time;
        ptr = line+i;
      }
    }
    timesi--;

    long firstt = -1;
    int firsttimesi = 0;
    for (int i = 0; i < timesi; i++) {
      if (times[i] != -1) {
        firstt = times[i];
        firsttimesi = i;
        break;
      }
    }

    int ii = 0;
    for (int i = firsttimesi+1; i < timesi; i++) {
      if (times[i] != -1)
        //printf("t*%d + %d = %c*%d and ", times[firsttimesi], i, 'a'+ii++, times[i]);
        printf("%d mod %d = %d\n", times[firsttimesi], times[i], i);
    }
    printf("\n");

    // chinese remainder theorem sieve

    // x mod 5 = 4
    // x mod 4 = 3
    // x mod 3 = 0
    // 
    // 4 mod 4 = 0, continue
    // 4 + 5 = 9 mod 4 = 1, continue
    // 9 + 5 = 14 mod 4 = 2, continue
    // 14 + 5 = 19 mod 4 = 3, OK
    // 19 mod 3 = 1, continue
    // 19 + (5*4) = 39 mod 3 = 0 ok
    // result is ???

    long v = -1;
    int add = -1;
    int previ = -1;
    //long x = times[firsttimesi];
    for (int i = firsttimesi+1; i < timesi; i++) {
      if (times[i] != -1) {
        if (v == -1) { previ = i; v = i; add = times[i]; }
        else {
          while (true) {
            v = (v+add) % previ;
            if (v == i) break;
          }
          add *= i;
          previ = i;
        }
      }
    }

    return 0;
  }
#+END_SRC

#+RESULTS:

** part 2 C
#+BEGIN_SRC cpp :results output
  #include <stdio.h>
  #include <stdlib.h>
  int main() {
    FILE *f = fopen("13.txt", "r");
    char line[1024];
    fgets(line, sizeof(line), f);
    int depart = atoi(line);
    fgets(line, sizeof(line), f);
    char *ptr = line;

    int times[1000];
    int timesi = 0;

    for (int i = 0; line[i]; i++) {
      if (line[i] == ',' || line[i+1] == 0) {
        //printf("##1 '%s'\n##2 '%s'\n", ptr, line+i);
        line[i++] = 0;
        int time = -1;
        if (ptr[0] != 'x') {
          time = atoi(ptr);
        }
        times[timesi++] = time;
        ptr = line+i;
      }
    }
    timesi--;

    long t = 0;
    long add = 1;
    for (int i = 0; i < timesi; i++) {
      if (times[i] != -1) {
        while (((t+i) % times[i]) != 0) {
          t += add;
        }
        printf("## t=%ld, add=%ld,  i=%d,  time=%d\n", t, add, i, times[i]);
        add *= times[i];
      }
    }

    printf("= %ld\n", t);

    return 0;
  }
#+END_SRC

#+RESULTS:
#+begin_example
## t=0, add=1,  i=0,  time=13
## t=104, add=13,  i=7,  time=37
## t=185770, add=481,  i=13,  time=461
## t=850993, add=221741,  i=27,  time=17
## t=19698978, add=3769597,  i=32,  time=19
## t=1165656466, add=71622343,  i=42,  time=29
## t=34398423618, add=2077047947,  i=44,  time=739
## t=49152428274274, add=1534938432833,  i=54,  time=41
## t=552612234243498, add=62932475746153,  i=67,  time=23
= 552612234243498
#+end_example

 - 552612234243498 correct <2020-12-15 Tue 21:15>
 - looked at other solution at https://gist.github.com/joshbduncan/65f810fe821c7a3ea81a1f5a444ea81e
* day 14
** puzzle
--- Day 14: Docking Data ---

As your ferry approaches the sea port, the captain asks for your help again. The computer system that runs this port isn't compatible with the docking program on the ferry, so the docking parameters aren't being correctly initialized in the docking program's memory.

After a brief inspection, you discover that the sea port's computer system uses a strange bitmask system in its initialization program. Although you don't have the correct decoder chip handy, you can emulate it in software!

The initialization program (your puzzle input) can either update the bitmask or write a value to memory. Values and memory addresses are both 36-bit unsigned integers. For example, ignoring bitmasks for a moment, a line like mem[8] = 11 would write the value 11 to memory address 8.

The bitmask is always given as a string of 36 bits, written with the most significant bit (representing 2^35) on the left and the least significant bit (2^0, that is, the 1s bit) on the right. The current bitmask is applied to values immediately before they are written to memory: a 0 or 1 overwrites the corresponding bit in the value, while an X leaves the bit in the value unchanged.

For example, consider the following program:

mask = XXXXXXXXXXXXXXXXXXXXXXXXXXXXX1XXXX0X
mem[8] = 11
mem[7] = 101
mem[8] = 0

This program starts by specifying a bitmask (mask = ....). The mask it specifies will overwrite two bits in every written value: the 2s bit is overwritten with 0, and the 64s bit is overwritten with 1.

The program then attempts to write the value 11 to memory address 8. By expanding everything out to individual bits, the mask is applied as follows:

value:  000000000000000000000000000000001011  (decimal 11)
mask:   XXXXXXXXXXXXXXXXXXXXXXXXXXXXX1XXXX0X
result: 000000000000000000000000000001001001  (decimal 73)

So, because of the mask, the value 73 is written to memory address 8 instead. Then, the program tries to write 101 to address 7:

value:  000000000000000000000000000001100101  (decimal 101)
mask:   XXXXXXXXXXXXXXXXXXXXXXXXXXXXX1XXXX0X
result: 000000000000000000000000000001100101  (decimal 101)

This time, the mask has no effect, as the bits it overwrote were already the values the mask tried to set. Finally, the program tries to write 0 to address 8:

value:  000000000000000000000000000000000000  (decimal 0)
mask:   XXXXXXXXXXXXXXXXXXXXXXXXXXXXX1XXXX0X
result: 000000000000000000000000000001000000  (decimal 64)

64 is written to address 8 instead, overwriting the value that was there previously.

To initialize your ferry's docking program, you need the sum of all values left in memory after the initialization program completes. (The entire 36-bit address space begins initialized to the value 0 at every address.) In the above example, only two values in memory are not zero - 101 (at address 7) and 64 (at address 8) - producing a sum of 165.

Execute the initialization program. What is the sum of all values left in memory after it completes?

Your puzzle answer was 10452688630537.
--- Part Two ---

For some reason, the sea port's computer system still can't communicate with your ferry's docking program. It must be using version 2 of the decoder chip!

A version 2 decoder chip doesn't modify the values being written at all. Instead, it acts as a memory address decoder. Immediately before a value is written to memory, each bit in the bitmask modifies the corresponding bit of the destination memory address in the following way:

    If the bitmask bit is 0, the corresponding memory address bit is unchanged.
    If the bitmask bit is 1, the corresponding memory address bit is overwritten with 1.
    If the bitmask bit is X, the corresponding memory address bit is floating.

A floating bit is not connected to anything and instead fluctuates unpredictably. In practice, this means the floating bits will take on all possible values, potentially causing many memory addresses to be written all at once!

For example, consider the following program:

mask = 000000000000000000000000000000X1001X
mem[42] = 100
mask = 00000000000000000000000000000000X0XX
mem[26] = 1

When this program goes to write to memory address 42, it first applies the bitmask:

address: 000000000000000000000000000000101010  (decimal 42)
mask:    000000000000000000000000000000X1001X
result:  000000000000000000000000000000X1101X

After applying the mask, four bits are overwritten, three of which are different, and two of which are floating. Floating bits take on every possible combination of values; with two floating bits, four actual memory addresses are written:

000000000000000000000000000000011010  (decimal 26)
000000000000000000000000000000011011  (decimal 27)
000000000000000000000000000000111010  (decimal 58)
000000000000000000000000000000111011  (decimal 59)

Next, the program is about to write to memory address 26 with a different bitmask:

address: 000000000000000000000000000000011010  (decimal 26)
mask:    00000000000000000000000000000000X0XX
result:  00000000000000000000000000000001X0XX

This results in an address with three floating bits, causing writes to eight memory addresses:

000000000000000000000000000000010000  (decimal 16)
000000000000000000000000000000010001  (decimal 17)
000000000000000000000000000000010010  (decimal 18)
000000000000000000000000000000010011  (decimal 19)
000000000000000000000000000000011000  (decimal 24)
000000000000000000000000000000011001  (decimal 25)
000000000000000000000000000000011010  (decimal 26)
000000000000000000000000000000011011  (decimal 27)

The entire 36-bit address space still begins initialized to the value 0 at every address, and you still need the sum of all values left in memory at the end of the program. In this example, the sum is 208.

Execute the initialization program using an emulator for a version 2 decoder chip. What is the sum of all values left in memory after it completes?

Your puzzle answer was 2881082759597.

Both parts of this puzzle are complete! They provide two gold stars: **
** part 1
 - <2020-12-16 Wed 19:21>
#+BEGIN_SRC cpp :results output
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <string.h>
int main() {
  FILE *f = fopen("14.txt", "r");
  char line[300];
  long memval[1000] = {0};
  int memvali = 0;
  long mask1s = 0;
  long mask0s = 0;
  while (fgets(line, sizeof(line), f)) {
    //printf("'%s'", line);
    if (0 == strncmp("mask", line, strlen("mask"))) {
      char *ptr = index(line, '=') + 2;
      mask1s = mask0s = 0;
      for (int i = 0; ptr[i] != '\n'; i++) {
        mask1s *= 2;
        mask0s *= 2;
        switch (ptr[i]) {
        case '1': mask1s += 1; break;
        case '0': mask0s += 1; break;
        }
        //printf("i=%d %c 1s=%ld, 0s=%ld\n", i,ptr[i], mask1s, mask0s);
      }
      //printf("mask='%s' 1s=%lx, 0s=%lx\n", ptr, mask1s, mask0s);
    } else {
      long m = 0;
      long val = 0;
      m = atol(line+strlen("mem["));
      val = atol(index(line, '=')+2);
      //printf("a %ld = %ld\n", m, val);
      //m = (m | mask1s) & ~mask0s;
      val = (val | mask1s) & ~mask0s;
      //printf("b %ld = %ld\n", m, val);
      int updated = 0;
      for (int i = 0; i < memvali; i+=2) {
        if (memval[i] == m) {
          memval[i+1] = val;
          updated = 1;
          break;
        }
      }
      if (!updated) {
        memval[memvali++] = m;
        memval[memvali++] = val;
      }
    }
  }
  //printf("memvali=%d\n", memvali);

  long long  sum = 0;
  for (int i = 0; i < memvali; i+=2) {
    sum += memval[i+1];
  }

  printf(" = %ld\n", sum);
  return 0;
  /*
100110X100000XX0X100X1100110X001X100
100110010000000001000110011000010100 41070913044 990046614
011001001111100100110001100101100011 27104844131 64F931963
*/
}
#+END_SRC

#+RESULTS:
: = 10452688630537

 - 676326698152 too low <2020-12-16 Wed 19:45>
 - 9429470047400 too low <2020-12-16 Wed 19:47>
 - 10452688630537 correct <2020-12-16 Wed 20:12>
** part 2
#+BEGIN_SRC cpp :results output
  #include <stdio.h>
  #include <stdlib.h>
  #include <stdint.h>
  #include <string.h>
  long memval[1000000] = {0};
  int memvali = 0;
  void setval(long m, long val) {
    //printf("## setval(%ld, %ld)\n", m, val);
    if (m < 0) exit(0);
        for (int i = 0; i < memvali; i+=2) {
          if (memval[i] == m) {
            memval[i+1] = val;
            return;
          }
        }
        if (memvali+2 >= sizeof(memval)/sizeof(long)) { printf("! %d\n", memvali); exit(0); }
        //printf("## new %ld=%ld\n", m, val);
          memval[memvali++] = m;
          memval[memvali++] = val;
  }
  void write(long m, long val, long maskxs) {
    long m1 = -1;
    long m2 = -1;
    int founds = 0;
    for (long i = 40; i >= 0; i--) {
      if (maskxs & (1L<<i)) {
        if (founds == 1) return;
        //printf("### i=%ld, m=%ld, val=%ld\n", i, m, val);
        maskxs = maskxs & ~(1L<<i);
        m1 = m | (1L<<i);
        m2 = m & ~(1L<<i);
        if (m1 < 0|| m2 < 0) printf("##z m=%ld m1=%ld m2=%ld i=%ld\n", m, m1, m2, i);
        write(m2, val, maskxs);
        write(m1, val, maskxs);
        founds++;
      }
    }
    if (m1 != -1) {
      setval(m2, val);
      setval(m1, val);
    }
  }
  int main() {

    if (false) {
      long m = 907312317;
      long i = 31;
      long m1 = (long) m | (long)(1L<<i);
      printf("##1 m=%ld, i=%ld m1=%ld i2=%ld\n", m, m1, i, 1<<i);
      return 0;
    }

    FILE *f = fopen("14.txt", "r");
    char line[300];
    long mask1s = 0;
    long mask0s = 0;
    long maskxs = 0;
    while (fgets(line, sizeof(line), f)) {
      //printf("'%s'", line);
      if (0 == strncmp("mask", line, strlen("mask"))) {
        char *ptr = index(line, '=') + 2;
        mask1s = mask0s = maskxs = 0;
        for (int i = 0; ptr[i] != '\n'; i++) {
          mask1s *= 2;
          mask0s *= 2;
          maskxs *= 2;
          switch (ptr[i]) {
          case '1': mask1s += 1; break;
          case '0': mask0s += 1; break;
          case 'X': maskxs += 1; break;
          }
          //printf("i=%d %c 1s=%ld, 0s=%ld\n", i,ptr[i], mask1s, mask0s);
        }
        //printf("mask='%s' 1s=%ld, 0s=%ld, xs=%ld\n", ptr, mask1s, mask0s, maskxs);
      } else {
        long m = 0;
        long val = 0;
        m = atol(line+strlen("mem["));
        val = atol(index(line, '=')+2);
        //printf("a %ld = %ld\n", m, val);
        m = m | mask1s;
        //val = (val | mask1s) & ~mask0s;
        //printf("b %ld = %ld\n", m, val);
        write(m, val, maskxs);
      }
    }

    long sum = 0;
    for (int i = 0; i < memvali; i+=2) {
      sum += memval[i+1];
    }

    printf(" = %ld\n", sum);
    return 0;
  }
#+END_SRC

#+RESULTS:
: = 2881082759597

 - 2984132033968 too high <2020-12-16 Wed 20:34>
 - 2330121756417 too low <2020-12-16 Wed 20:51>
 - 2881082759597 correct <2020-12-16 Wed 21:05>
