* setup
(require 'ob-org)
(require 'ob-python)
** stdout/stderr on bad exit-code
#+BEGIN_SRC elisp
(defun org-babel-eval (cmd body)
  "Run CMD on BODY.
If CMD succeeds then return its results, otherwise display
STDERR with `org-babel-eval-error-notify'."
  (let ((err-buff (get-buffer-create " *Org-Babel Error*")) exit-code)
    (with-current-buffer err-buff (erase-buffer))
    (with-temp-buffer
      (insert body)
      (setq exit-code
	    (org-babel--shell-command-on-region
	     (point-min) (point-max) cmd err-buff))
      (if (or (not (numberp exit-code)) (> exit-code 0))
	  (progn
	    (with-current-buffer err-buff
	      (org-babel-eval-error-notify exit-code (buffer-string)))
	    (save-excursion
	      (when (get-buffer org-babel-error-buffer-name)
		(with-current-buffer org-babel-error-buffer-name
		  (unless (derived-mode-p 'compilation-mode)
		    (compilation-mode))
		  ;; Compilation-mode enforces read-only, but Babel expects the buffer modifiable.
		  (setq buffer-read-only nil))))
	    (concat (buffer-string) "STDERR:\n" (with-current-buffer err-buff (buffer-string))))
	(buffer-string)))))
#+END_SRC
* make work
 - tangle file: C-c C-v t
 - C-c C-c code src

* day 1
** puzzle
--- Day 1: Report Repair ---

After saving Christmas five years in a row, you've decided to take a vacation at a nice resort on a tropical island. Surely, Christmas will go on without you.

The tropical island has its own currency and is entirely cash-only. The gold coins used there have a little picture of a starfish; the locals just call them stars. None of the currency exchanges seem to have heard of them, but somehow, you'll need to find fifty of these coins by the time you arrive so you can pay the deposit on your room.

To save your vacation, you need to get all fifty stars by December 25th.

Collect stars by solving puzzles. Two puzzles will be made available on each day in the Advent calendar; the second puzzle is unlocked when you complete the first. Each puzzle grants one star. Good luck!

Before you leave, the Elves in accounting just need you to fix your expense report (your puzzle input); apparently, something isn't quite adding up.

Specifically, they need you to find the two entries that sum to 2020 and then multiply those two numbers together.

For example, suppose your expense report contained the following:

1721
979
366
299
675
1456

In this list, the two entries that sum to 2020 are 1721 and 299. Multiplying them together produces 1721 * 299 = 514579, so the correct answer is 514579.

Of course, your expense report is much larger. Find the two entries that sum to 2020; what do you get if you multiply them together?

Your puzzle answer was 471019.
--- Part Two ---

The Elves in accounting are thankful for your help; one of them even offers you a starfish coin they had left over from a past vacation. They offer you a second one if you can find three numbers in your expense report that meet the same criteria.

Using the above example again, the three entries that sum to 2020 are 979, 366, and 675. Multiplying them together produces the answer, 241861950.

In your expense report, what is the product of the three entries that sum to 2020?

Your puzzle answer was 103927824.

Both parts of this puzzle are complete! They provide two gold stars: **
** star 1
 - <2020-12-08 Tue 19:24>
#+BEGIN_SRC cpp :results output
#include <stdio.h>

int main() {
  FILE *f = fopen("01.txt", "r");
  int a, b;
  while (1 == fscanf(f, "%d", &a)) {
    FILE *f2 = fopen("01.txt", "r");
    while (1 == fscanf(f2, "%d", &b)) {
      if (a + b == 2020) {
        printf("=%d\n", a*b);
        return 0;
      }
    }
    fclose(f2);
  }
  printf("sdasd\n");
  return 0;
}
#+END_SRC

#+RESULTS:
: =471019
 - <2020-12-08 Tue 19:28>

** star 2
- <2020-12-08 Tue 19:28>
#+BEGIN_SRC cpp :results output
#include <stdio.h>

int main() {
  FILE *f = fopen("01.txt", "r");
  int a, b, c;
  while (1 == fscanf(f, "%d", &a)) {
    FILE *f2 = fopen("01.txt", "r");
    while (1 == fscanf(f2, "%d", &b)) {
      FILE *f3 = fopen("01.txt", "r");
      while (1 == fscanf(f3, "%d", &c)) {
        if (a + b + c == 2020) {
          printf("=%d\n", a*b*c);
          return 0;
          }
      }
      fclose(f3);
    }
    fclose(f2);
  }
  printf("sdasd\n");
  return 0;
}
#+END_SRC

#+RESULTS:
: =103927824
 - <2020-12-08 Tue 19:30>
* day 2
** puzzle
--- Day 2: Password Philosophy ---

Your flight departs in a few days from the coastal airport; the easiest way down to the coast from here is via toboggan.

The shopkeeper at the North Pole Toboggan Rental Shop is having a bad day. "Something's wrong with our computers; we can't log in!" You ask if you can take a look.

Their password database seems to be a little corrupted: some of the passwords wouldn't have been allowed by the Official Toboggan Corporate Policy that was in effect when they were chosen.

To try to debug the problem, they have created a list (your puzzle input) of passwords (according to the corrupted database) and the corporate policy when that password was set.

For example, suppose you have the following list:

1-3 a: abcde
1-3 b: cdefg
2-9 c: ccccccccc

Each line gives the password policy and then the password. The password policy indicates the lowest and highest number of times a given letter must appear for the password to be valid. For example, 1-3 a means that the password must contain a at least 1 time and at most 3 times.

In the above example, 2 passwords are valid. The middle password, cdefg, is not; it contains no instances of b, but needs at least 1. The first and third passwords are valid: they contain one a or nine c, both within the limits of their respective policies.

How many passwords are valid according to their policies?

Your puzzle answer was 550.
--- Part Two ---

While it appears you validated the passwords correctly, they don't seem to be what the Official Toboggan Corporate Authentication System is expecting.

The shopkeeper suddenly realizes that he just accidentally explained the password policy rules from his old job at the sled rental place down the street! The Official Toboggan Corporate Policy actually works a little differently.

Each policy actually describes two positions in the password, where 1 means the first character, 2 means the second character, and so on. (Be careful; Toboggan Corporate Policies have no concept of "index zero"!) Exactly one of these positions must contain the given letter. Other occurrences of the letter are irrelevant for the purposes of policy enforcement.

Given the same example list from above:

    1-3 a: abcde is valid: position 1 contains a and position 3 does not.
    1-3 b: cdefg is invalid: neither position 1 nor position 3 contains b.
    2-9 c: ccccccccc is invalid: both position 2 and position 9 contain c.

How many passwords are valid according to the new interpretation of the policies?

Your puzzle answer was 634.

Both parts of this puzzle are complete! They provide two gold stars: **
** star 1
<2020-12-08 Tue 19:30>
#+BEGIN_SRC cpp :results output
#include <stdio.h>
int main() {
  FILE *f = fopen("02.txt", "r");
  int min, max;
  char c;
  char password[200] = {0};
  int valids = 0;
  while (4 == fscanf(f, "%d-%d %c: %s", &min, &max, &c, password)) {
    //printf("%d-%d %c: '%s'\n", min, max, c, password);

    int count = 0;
    for (int i = 0; password[i]; i++) {
      if (password[i] == c) count++;
    }
    if (count >= min && count <= max) {
      valids++;
    }
  }
  printf("= %d\n", valids);
  return 0;
}
#+END_SRC

#+RESULTS:
: = 550

- <2020-12-08 Tue 19:40>
** star 2
- <2020-12-08 Tue 19:40>
#+BEGIN_SRC cpp :results output
#include <stdio.h>
int main() {
  FILE *f = fopen("02.txt", "r");
  int min, max;
  char c;
  char password[200] = {0};
  int valids = 0;
  while (4 == fscanf(f, "%d-%d %c: %s", &min, &max, &c, password)) {
    //printf("%d-%d %c: '%s'\n", min, max, c, password);
    if (password[min-1] == c ^ password[max-1] == c) valids++;
  }
  printf("= %d\n", valids);
  return 0;
}
#+END_SRC

#+RESULTS:
: = 634


- <2020-12-08 Tue 19:41>
* day 3
** puzzle
--- Day 3: Toboggan Trajectory ---

With the toboggan login problems resolved, you set off toward the airport. While travel by toboggan might be easy, it's certainly not safe: there's very minimal steering and the area is covered in trees. You'll need to see which angles will take you near the fewest trees.

Due to the local geology, trees in this area only grow on exact integer coordinates in a grid. You make a map (your puzzle input) of the open squares (.) and trees (#) you can see. For example:

..##.......
#...#...#..
.#....#..#.
..#.#...#.#
.#...##..#.
..#.##.....
.#.#.#....#
.#........#
#.##...#...
#...##....#
.#..#...#.#

These aren't the only trees, though; due to something you read about once involving arboreal genetics and biome stability, the same pattern repeats to the right many times:

..##.........##.........##.........##.........##.........##.......  --->
#...#...#..#...#...#..#...#...#..#...#...#..#...#...#..#...#...#..
.#....#..#..#....#..#..#....#..#..#....#..#..#....#..#..#....#..#.
..#.#...#.#..#.#...#.#..#.#...#.#..#.#...#.#..#.#...#.#..#.#...#.#
.#...##..#..#...##..#..#...##..#..#...##..#..#...##..#..#...##..#.
..#.##.......#.##.......#.##.......#.##.......#.##.......#.##.....  --->
.#.#.#....#.#.#.#....#.#.#.#....#.#.#.#....#.#.#.#....#.#.#.#....#
.#........#.#........#.#........#.#........#.#........#.#........#
#.##...#...#.##...#...#.##...#...#.##...#...#.##...#...#.##...#...
#...##....##...##....##...##....##...##....##...##....##...##....#
.#..#...#.#.#..#...#.#.#..#...#.#.#..#...#.#.#..#...#.#.#..#...#.#  --->

You start on the open square (.) in the top-left corner and need to reach the bottom (below the bottom-most row on your map).

The toboggan can only follow a few specific slopes (you opted for a cheaper model that prefers rational numbers); start by counting all the trees you would encounter for the slope right 3, down 1:

From your starting position at the top-left, check the position that is right 3 and down 1. Then, check the position that is right 3 and down 1 from there, and so on until you go past the bottom of the map.

The locations you'd check in the above example are marked here with O where there was an open square and X where there was a tree:

..##.........##.........##.........##.........##.........##.......  --->
#..O#...#..#...#...#..#...#...#..#...#...#..#...#...#..#...#...#..
.#....X..#..#....#..#..#....#..#..#....#..#..#....#..#..#....#..#.
..#.#...#O#..#.#...#.#..#.#...#.#..#.#...#.#..#.#...#.#..#.#...#.#
.#...##..#..X...##..#..#...##..#..#...##..#..#...##..#..#...##..#.
..#.##.......#.X#.......#.##.......#.##.......#.##.......#.##.....  --->
.#.#.#....#.#.#.#.O..#.#.#.#....#.#.#.#....#.#.#.#....#.#.#.#....#
.#........#.#........X.#........#.#........#.#........#.#........#
#.##...#...#.##...#...#.X#...#...#.##...#...#.##...#...#.##...#...
#...##....##...##....##...#X....##...##....##...##....##...##....#
.#..#...#.#.#..#...#.#.#..#...X.#.#..#...#.#.#..#...#.#.#..#...#.#  --->

In this example, traversing the map using this slope would cause you to encounter 7 trees.

Starting at the top-left corner of your map and following a slope of right 3 and down 1, how many trees would you encounter?

Your puzzle answer was 156.
--- Part Two ---

Time to check the rest of the slopes - you need to minimize the probability of a sudden arboreal stop, after all.

Determine the number of trees you would encounter if, for each of the following slopes, you start at the top-left corner and traverse the map all the way to the bottom:

    Right 1, down 1.
    Right 3, down 1. (This is the slope you already checked.)
    Right 5, down 1.
    Right 7, down 1.
    Right 1, down 2.

In the above example, these slopes would find 2, 7, 3, 4, and 2 tree(s) respectively; multiplied together, these produce the answer 336.

What do you get if you multiply together the number of trees encountered on each of the listed slopes?

Your puzzle answer was 3521829480.

Both parts of this puzzle are complete! They provide two gold stars: **
** star 1
 - <2020-12-08 Tue 19:42>
#+BEGIN_SRC cpp :results output
  #include <stdio.h>
  int main() {
    FILE *f = fopen("03.txt", "r");
    char map[1000][1000] = {0};
    char c;
    printf("1\n");
    int width = 0;
    {
      int x = 0, y = 0;
      while ((c = fgetc(f)) != EOF) {
        if (c == '\n') { map[y][x] = 0; width = x; x = 0; y++; }
        else { map[y][x] = c; x++; }
      }
    }

    int trees = 0;
    int x = 0, y = 0;
    while (map[y][0]) {
      x = (x+3) % width; y += 1;
      if (map[y][x] == '#') trees++;
    }

    printf("=%d\n", trees);
    return 0;
  }
#+END_SRC

#+RESULTS:
: 1
: =156

 - <2020-12-08 Tue 19:54>
** star 2
 - <2020-12-08 Tue 19:54>
#+BEGIN_SRC cpp :results output
  #include <stdio.h>
  long trees(char map[1000][1000], int width, int dx, int dy) {
    int trees = 0;
    int x = 0, y = 0;
    while (map[y][0]) {
      x = (x+dx) % width; y += dy;
      if (map[y][x] == '#') trees++;
    }
    return trees;
  }
  int main() {
    FILE *f = fopen("03.txt", "r");
    char map[1000][1000] = {0};
    char c;
    printf("1\n");
    int width = 0;
    {
      int x = 0, y = 0;
      while ((c = fgetc(f)) != EOF) {
        if (c == '\n') { map[y][x] = 0; width = x; x = 0; y++; }
        else { map[y][x] = c; x++; }
      }
    }
    
    printf("=%ld\n", trees(map, width, 1, 1) 
                  * trees(map, width, 3, 1) 
                  * trees(map, width, 5, 1) 
                  * trees(map, width, 7, 1) 
                  * trees(map, width, 1, 2));
    //printf("=%d\n", trees);
    return 0;
  }
#+END_SRC

#+RESULTS:
: 1
: =3521829480

 - <2020-12-08 Tue 19:58>
* day 4
** puzzle
--- Day 4: Passport Processing ---

You arrive at the airport only to realize that you grabbed your North Pole Credentials instead of your passport. While these documents are extremely similar, North Pole Credentials aren't issued by a country and therefore aren't actually valid documentation for travel in most of the world.

It seems like you're not the only one having problems, though; a very long line has formed for the automatic passport scanners, and the delay could upset your travel itinerary.

Due to some questionable network security, you realize you might be able to solve both of these problems at the same time.

The automatic passport scanners are slow because they're having trouble detecting which passports have all required fields. The expected fields are as follows:

    byr (Birth Year)
    iyr (Issue Year)
    eyr (Expiration Year)
    hgt (Height)
    hcl (Hair Color)
    ecl (Eye Color)
    pid (Passport ID)
    cid (Country ID)

Passport data is validated in batch files (your puzzle input). Each passport is represented as a sequence of key:value pairs separated by spaces or newlines. Passports are separated by blank lines.

Here is an example batch file containing four passports:

ecl:gry pid:860033327 eyr:2020 hcl:#fffffd
byr:1937 iyr:2017 cid:147 hgt:183cm

iyr:2013 ecl:amb cid:350 eyr:2023 pid:028048884
hcl:#cfa07d byr:1929

hcl:#ae17e1 iyr:2013
eyr:2024
ecl:brn pid:760753108 byr:1931
hgt:179cm

hcl:#cfa07d eyr:2025 pid:166559648
iyr:2011 ecl:brn hgt:59in

The first passport is valid - all eight fields are present. The second passport is invalid - it is missing hgt (the Height field).

The third passport is interesting; the only missing field is cid, so it looks like data from North Pole Credentials, not a passport at all! Surely, nobody would mind if you made the system temporarily ignore missing cid fields. Treat this "passport" as valid.

The fourth passport is missing two fields, cid and byr. Missing cid is fine, but missing any other field is not, so this passport is invalid.

According to the above rules, your improved system would report 2 valid passports.

Count the number of valid passports - those that have all required fields. Treat cid as optional. In your batch file, how many passports are valid?

Your puzzle answer was 219.
--- Part Two ---

The line is moving more quickly now, but you overhear airport security talking about how passports with invalid data are getting through. Better add some data validation, quick!

You can continue to ignore the cid field, but each other field has strict rules about what values are valid for automatic validation:

    byr (Birth Year) - four digits; at least 1920 and at most 2002.
    iyr (Issue Year) - four digits; at least 2010 and at most 2020.
    eyr (Expiration Year) - four digits; at least 2020 and at most 2030.
    hgt (Height) - a number followed by either cm or in:
        If cm, the number must be at least 150 and at most 193.
        If in, the number must be at least 59 and at most 76.
    hcl (Hair Color) - a # followed by exactly six characters 0-9 or a-f.
    ecl (Eye Color) - exactly one of: amb blu brn gry grn hzl oth.
    pid (Passport ID) - a nine-digit number, including leading zeroes.
    cid (Country ID) - ignored, missing or not.

Your job is to count the passports where all required fields are both present and valid according to the above rules. Here are some example values:

byr valid:   2002
byr invalid: 2003

hgt valid:   60in
hgt valid:   190cm
hgt invalid: 190in
hgt invalid: 190

hcl valid:   #123abc
hcl invalid: #123abz
hcl invalid: 123abc

ecl valid:   brn
ecl invalid: wat

pid valid:   000000001
pid invalid: 0123456789

Here are some invalid passports:

eyr:1972 cid:100
hcl:#18171d ecl:amb hgt:170 pid:186cm iyr:2018 byr:1926

iyr:2019
hcl:#602927 eyr:1967 hgt:170cm
ecl:grn pid:012533040 byr:1946

hcl:dab227 iyr:2012
ecl:brn hgt:182cm pid:021572410 eyr:2020 byr:1992 cid:277

hgt:59cm ecl:zzz
eyr:2038 hcl:74454a iyr:2023
pid:3556412378 byr:2007

Here are some valid passports:

pid:087499704 hgt:74in ecl:grn iyr:2012 eyr:2030 byr:1980
hcl:#623a2f

eyr:2029 ecl:blu cid:129 byr:1989
iyr:2014 pid:896056539 hcl:#a97842 hgt:165cm

hcl:#888785
hgt:164cm byr:2001 iyr:2015 cid:88
pid:545766238 ecl:hzl
eyr:2022

iyr:2010 hgt:158cm hcl:#b6652a ecl:blu byr:1944 eyr:2021 pid:093154719

Count the number of valid passports - those that have all required fields and valid values. Continue to treat cid as optional. In your batch file, how many passports are valid?

Your puzzle answer was 127.

Both parts of this puzzle are complete! They provide two gold stars: **
** star 1
 - <2020-12-09 Wed 17:23>
#+BEGIN_SRC cpp :results output
  #include <stdio.h>
  #include <string.h>
  int main() {
    FILE *f = fopen("04.txt", "r");
    char line[200];
    int linei = 0;
    int state = 0;
    int byr, iyr, eyr, hgt, hcl, ecl, pid;
    byr = iyr = eyr = hgt = hcl = ecl = pid = 0;
    int valids = 0;
    int c;
    while (c = fgetc(f)) {
      line[linei++] = c;
      if (c == EOF || (line[linei-1] == '\n' && line[linei-2] == '\n')) {
        line[linei-2] = 0;
        char tag[20];
        int tagi = 0;
        for (int i = 0; i < linei; i++) {
          if (line[i] >= 'a' && line[i] <= 'z')
            tag[tagi++] = line[i];
          else if (line[i] == ':') {
            tag[tagi] = 0;
            tagi = 0;
            if (0 == strcmp(tag, "byr")) byr = 1;
            if (0 == strcmp(tag, "iyr")) iyr = 1;
            if (0 == strcmp(tag, "eyr")) eyr = 1;
            if (0 == strcmp(tag, "hgt")) hgt = 1;
            if (0 == strcmp(tag, "hcl")) hcl = 1;
            if (0 == strcmp(tag, "ecl")) ecl = 1;
            if (0 == strcmp(tag, "pid")) pid = 1;
            for (; line[i] != ' ' && line[i] != '\n'; i++);
          }
        }
        // printf("\n'%s'\n", line);
        // printf("     %d, %d, %d, %d, %d, %d, %d\n", byr, iyr, eyr, hgt, hcl, ecl, pid);
        if (byr && iyr && eyr && hgt && hcl && ecl && pid) {
          // printf("valid\n");
          valids++;
        } else {
          // printf("    invalid\n");
        }
        byr = iyr = eyr = hgt = hcl = ecl = pid = 0;
        linei = 0;
      }
      if (c == EOF) break;
    }
    printf("= %d\n", valids);
  return 0;
  }
#+END_SRC

#+RESULTS:
: = 219

 - 227 too high
 - 228 too high
 - 219 <2020-12-09 Wed 17:51>
** part 2 
#+BEGIN_SRC cpp :results output
  #include <stdio.h>
  #include <stdlib.h>
  #include <string.h>
  int main() {
    FILE *f = fopen("04.txt", "r");
    char line[200];
    int linei = 0;
    int state = 0;
    int byr, iyr, eyr, hgt, hcl, ecl, pid;
    int valids = 0;
    int c;
    while (c = fgetc(f)) {
      line[linei++] = c;
      if (c == EOF || (line[linei-1] == '\n' && line[linei-2] == '\n')) {
        line[linei-2] = 0;
        byr = iyr = eyr = hgt = hcl = ecl = pid = 0;
        char tag[20];
        int tagi = 0;
        for (int i = 0; i < linei; i++) {
          if (line[i] >= 'a' && line[i] <= 'z')
            tag[tagi++] = line[i];
          else if (line[i] == ':') {
            tag[tagi] = 0;
            tagi = 0;
            char value[100];
            int valuei = 0;
            i++;
            for (; line[i] != ' ' && line[i] != '\n' && i < linei-2; i++)
              value[valuei++] = line[i];
            value[valuei] = 0;
            // printf("          '%s'='%s'%d\n", tag, value, valuei);

            if (0 == strcmp(tag, "byr")) {
              int v = atoi(value);
              if (v >= 1920 && v <= 2002) byr++;
            }
            if (0 == strcmp(tag, "iyr")) {
              int v = atoi(value);
              if (v >= 2010 && v <= 2020) iyr++;
            }
            if (0 == strcmp(tag, "eyr")) {
              int v = atoi(value);
              if (v >= 2020 && v <= 2030) eyr++;
            }
            if (0 == strcmp(tag, "hgt")) {
              int v = atoi(value);
              // printf("      hgt '%d'  '%c %c\n", v, value[valuei-2], value[valuei-1]);
              if ((value[valuei-2] == 'c' && value[valuei-1] == 'm' && v >= 150 && v <= 193)
                  || (value[valuei-2] == 'i' && value[valuei-1] == 'n' && v >= 59 && v <= 76)) hgt++;
            }
            if (0 == strcmp(tag, "hcl")) {
              if (value[0] == '#') {
                int good = 1;
                for (int j = 1; j < 7; j++) {
                if (!((value[j] >= 'a' && value[j] <= 'f') || (value[j] >= '0' && value[j] <= '9')))
                  good = 0;
                  break;
                }
                if (good) hcl++;
              }
            }
            if (0 == strcmp(tag, "ecl")) {
              if (0 == strcmp(value, "amb") || 0 == strcmp(value, "blu") || 0 == strcmp(value, "brn") 
              || 0 == strcmp(value, "gry") || 0 == strcmp(value, "grn") || 0 == strcmp(value, "hzl") 
              || 0 == strcmp(value, "oth"))
                ecl++;
            }
            if (0 == strcmp(tag, "pid")) {
              int good = 1;
              for (int j = 0; j < 9; j++)
                if (!(value[j] >= '0' && value[j] <= '9')) { good = 0; break; }
              if (good) pid ++;
            }
          }
        }
        // printf("'%s'\n", line);
        // printf("     byr=%d, iyr=%d, eyr=%d, hgt=%d, hcl=%d, ecl=%d, pid=%d\n", byr, iyr, eyr, hgt, hcl, ecl, pid);
        if (byr && iyr && eyr && hgt && hcl && ecl && pid) {
          // printf("valid\n");
          valids++;
        } else {
          // printf("    invalid\n");
        }
        // printf("\n");
        linei = 0;
      }
      if (c == EOF) break;
    }
    printf("= %d\n", valids);
  return 0;
  }
#+END_SRC

#+RESULTS:
: = 128

- 128 too high <2020-12-09 Wed 18:14>
** part 2 B
#+BEGIN_SRC cpp :results output
  #include <stdio.h>
  #include <stdlib.h>
  #include <string.h>

  int main() {
      FILE *f = fopen("04.txt", "r");
      char line[1000] = {0};
      int linei = 0;
      int valids = 0;
      while (true) {
          int c = fgetc(f);
          line[linei++] = c;
          if (linei >= 2 && (c == EOF || (line[linei-1] == '\n' && line[linei-2] == '\n'))) {
              line[linei-1] = 0;
              int byr = 0, iyr = 0, eyr = 0, hgt = 0, hcl = 0, ecl = 0, pid = 0;
              int i = 0;
              long pidval = -1;
              while (i < linei - 1) {
                  while (line[i] == ' ' || line[i] == '\n') i++;
                  char tag[200];
                  int tagi = 0;
                  while (line[i] != ':') {
                      tag[tagi++] = line[i];
                      i++;
                  }
                  tag[tagi] = 0;
                  i++;
                  char val[200];
                  int vali = 0;
                  while (line[i] != ' ' && line[i] != '\n' && i < linei) {
                      val[vali++] = line[i];
                      i++;
                  }
                  val[vali] = 0;
                  while (i < linei && (line[i] == ' ' || line[i] == '\n')) i++;

                  // printf("'%s'='%s' ", tag, val);
                  if (0 == strcmp(tag, "byr")) {
                      int v = atoi(val);
                      if (v >= 1920 && v <= 2002) byr++;
                  }
                  if (0 == strcmp(tag, "iyr")) {
                      int v = atoi(val);
                      if (v >= 2010 && v <= 2020) iyr++;
                  }
                  if (0 == strcmp(tag, "eyr")) {
                      int v = atoi(val);
                      if (v >= 2020 && v <= 2030) eyr++;
                  }
                  if (0 == strcmp(tag, "hgt")) {
                      int v = atoi(val);
                      if ((val[vali-2] == 'c' && val[vali-1] == 'm' && v >= 150 && v <= 193)
                       || (val[vali-2] == 'i' && val[vali-1] == 'n' && v >= 59 && v <= 76))
                         hgt++;
                  }
                  if (0 == strcmp(tag, "hcl")) {
                      if (val[0] == '#') {
                        int good = 1;
                        for (int j = 1; j < 7; j++)
                          if (!((val[j] >= 'a' && val[j] <= 'f') || (val[j] >= '0' && val[j] <= '9'))) {
                            good = 0; break;
                          }
                        if (good) hcl++;
                      }
                  }
                  if (0 == strcmp(tag, "ecl")) {
                     if (0 == strcmp(val, "amb") || 0 == strcmp(val, "blu") || 0 == strcmp(val, "brn") || 
                     0 == strcmp(val, "gry") || 0 == strcmp(val, "grn") || 0 == strcmp(val, "hzl") || 
                     0 == strcmp(val, "oth"))
                         ecl++;
                  }
                  if (0 == strcmp(tag, "pid")) {
                      int good = 1;
                      for (int j = 0; j < 9; j++) 
                        if (!(val[j] >= '0' && val[j] <= '9')) {
                          good = 0; break;
                        }
                      if (good && val[9] == 0) pid++;
                      pidval = atol(val);
                  }
              }
              if (byr && iyr && eyr && hgt && hcl && ecl && pid) valids++;
              // printf("\nbyr=%d iyr=%d eyr=%d hgt=%d hcl=%d ecl=%d pid=%d\n\n", byr, iyr, eyr, hgt, hcl, ecl, pid);
              linei = 0;
          }
          if (c == EOF) break;
      }

      printf("= %d\n", valids);
      return 0;
  }
#+END_SRC

#+RESULTS:
: = 127

 - 12 wrong <2020-12-09 Wed 19:10>
 - 127 <2020-12-09 Wed 19:27>
* day 5
** puzzle
--- Day 5: Binary Boarding ---

You board your plane only to discover a new problem: you dropped your boarding pass! You aren't sure which seat is yours, and all of the flight attendants are busy with the flood of people that suddenly made it through passport control.

You write a quick program to use your phone's camera to scan all of the nearby boarding passes (your puzzle input); perhaps you can find your seat through process of elimination.

Instead of zones or groups, this airline uses binary space partitioning to seat people. A seat might be specified like FBFBBFFRLR, where F means "front", B means "back", L means "left", and R means "right".

The first 7 characters will either be F or B; these specify exactly one of the 128 rows on the plane (numbered 0 through 127). Each letter tells you which half of a region the given seat is in. Start with the whole list of rows; the first letter indicates whether the seat is in the front (0 through 63) or the back (64 through 127). The next letter indicates which half of that region the seat is in, and so on until you're left with exactly one row.

For example, consider just the first seven characters of FBFBBFFRLR:

    Start by considering the whole range, rows 0 through 127.
    F means to take the lower half, keeping rows 0 through 63.
    B means to take the upper half, keeping rows 32 through 63.
    F means to take the lower half, keeping rows 32 through 47.
    B means to take the upper half, keeping rows 40 through 47.
    B keeps rows 44 through 47.
    F keeps rows 44 through 45.
    The final F keeps the lower of the two, row 44.

The last three characters will be either L or R; these specify exactly one of the 8 columns of seats on the plane (numbered 0 through 7). The same process as above proceeds again, this time with only three steps. L means to keep the lower half, while R means to keep the upper half.

For example, consider just the last 3 characters of FBFBBFFRLR:

    Start by considering the whole range, columns 0 through 7.
    R means to take the upper half, keeping columns 4 through 7.
    L means to take the lower half, keeping columns 4 through 5.
    The final R keeps the upper of the two, column 5.

So, decoding FBFBBFFRLR reveals that it is the seat at row 44, column 5.

Every seat also has a unique seat ID: multiply the row by 8, then add the column. In this example, the seat has ID 44 * 8 + 5 = 357.

Here are some other boarding passes:

    BFFFBBFRRR: row 70, column 7, seat ID 567.
    FFFBBBFRRR: row 14, column 7, seat ID 119.
    BBFFBBFRLL: row 102, column 4, seat ID 820.

As a sanity check, look through your list of boarding passes. What is the highest seat ID on a boarding pass?

Your puzzle answer was 813.
--- Part Two ---

Ding! The "fasten seat belt" signs have turned on. Time to find your seat.

It's a completely full flight, so your seat should be the only missing boarding pass in your list. However, there's a catch: some of the seats at the very front and back of the plane don't exist on this aircraft, so they'll be missing from your list as well.

Your seat wasn't at the very front or back, though; the seats with IDs +1 and -1 from yours will be in your list.

What is the ID of your seat?

Your puzzle answer was 612.

Both parts of this puzzle are complete! They provide two gold stars: **
** part 1
 - <2020-12-10 Thu 20:17>
#+BEGIN_SRC cpp :results output
  #include <stdio.h>
  int main() {
      FILE *f = fopen("05.txt", "r");

      int highestSeat = 0;

      int rowstart = 0;
      int rowend = 128;
      int colstart = 0;
      int colend = 8;
      for (int c = fgetc(f); c != EOF; c = fgetc(f)) {
         //printf("## c=%c: row=%d..%d\n", c, rowstart, rowend);
          switch (c) {
          case 'F':
              rowend = rowstart + (rowend-rowstart)/2;
              break;
          case 'B':
              rowstart = rowstart + (rowend-rowstart)/2;
              break;
          case 'R':
              colstart = colstart + (colend-colstart)/2;
              break;
          case 'L':
              colend = colstart + (colend-colstart)/2;
              break;
          }
          if (colstart == colend - 1) {
              int seat = rowstart * 8 + colstart;
              //printf("## %3d,%3d=%3d\n", rowstart, colstart, seat);
              if (seat > highestSeat) highestSeat = seat;
              rowstart = 0;
              rowend = 128;
              colstart = 0;
              colend = 8;
          }
      }


      printf("= %d\n", highestSeat);
      return 0;
  }
#+END_SRC

#+RESULTS:
: = 813

 - 157 too low <2020-12-10 Thu 20:35>
 - 813 correct <2020-12-10 Thu 20:38>

** part 2
 - <2020-12-10 Thu 20:17>
#+BEGIN_SRC cpp :results output
  #include <stdio.h>
  int main() {
      FILE *f = fopen("05.txt", "r");

      int seats[127*8+7] = {0};

      int rowstart = 0;
      int rowend = 128;
      int colstart = 0;
      int colend = 8;
      for (int c = fgetc(f); c != EOF; c = fgetc(f)) {
         //printf("## c=%c: row=%d..%d\n", c, rowstart, rowend);
          switch (c) {
          case 'F':
              rowend = rowstart + (rowend-rowstart)/2;
              break;
          case 'B':
              rowstart = rowstart + (rowend-rowstart)/2;
              break;
          case 'R':
              colstart = colstart + (colend-colstart)/2;
              break;
          case 'L':
              colend = colstart + (colend-colstart)/2;
              break;
          }
          if (colstart == colend - 1) {
              int seat = rowstart * 8 + colstart;
              seats[seat]++;
              //printf("## %3d,%3d=%3d\n", rowstart, colstart, seat);
              rowstart = 0;
              rowend = 128;
              colstart = 0;
              colend = 8;
          }
      }

      for (int i = 0; i < 127*8+7; i++) {
        if (seats[i] == 0) printf("free: %d\n", i);
      }

      return 0;
  }
#+END_SRC

 - 612 correct <2020-12-10 Thu 20:42>

#+RESULTS:
#+begin_example
free: 0
free: 1
free: 2
free: 3
free: 4
free: 5
free: 612
free: 814
free: 815
free: 816
free: 817
free: 818
free: 819
free: 820
free: 821
free: 822
free: 823
free: 824
free: 825
free: 826
free: 827
free: 828
free: 829
free: 830
free: 831
free: 832
free: 833
free: 834
free: 835
free: 836
free: 837
free: 838
free: 839
free: 840
free: 841
free: 842
free: 843
free: 844
free: 845
free: 846
free: 847
free: 848
free: 849
free: 850
free: 851
free: 852
free: 853
free: 854
free: 855
free: 856
free: 857
free: 858
free: 859
free: 860
free: 861
free: 862
free: 863
free: 864
free: 865
free: 866
free: 867
free: 868
free: 869
free: 870
free: 871
free: 872
free: 873
free: 874
free: 875
free: 876
free: 877
free: 878
free: 879
free: 880
free: 881
free: 882
free: 883
free: 884
free: 885
free: 886
free: 887
free: 888
free: 889
free: 890
free: 891
free: 892
free: 893
free: 894
free: 895
free: 896
free: 897
free: 898
free: 899
free: 900
free: 901
free: 902
free: 903
free: 904
free: 905
free: 906
free: 907
free: 908
free: 909
free: 910
free: 911
free: 912
free: 913
free: 914
free: 915
free: 916
free: 917
free: 918
free: 919
free: 920
free: 921
free: 922
free: 923
free: 924
free: 925
free: 926
free: 927
free: 928
free: 929
free: 930
free: 931
free: 932
free: 933
free: 934
free: 935
free: 936
free: 937
free: 938
free: 939
free: 940
free: 941
free: 942
free: 943
free: 944
free: 945
free: 946
free: 947
free: 948
free: 949
free: 950
free: 951
free: 952
free: 953
free: 954
free: 955
free: 956
free: 957
free: 958
free: 959
free: 960
free: 961
free: 962
free: 963
free: 964
free: 965
free: 966
free: 967
free: 968
free: 969
free: 970
free: 971
free: 972
free: 973
free: 974
free: 975
free: 976
free: 977
free: 978
free: 979
free: 980
free: 981
free: 982
free: 983
free: 984
free: 985
free: 986
free: 987
free: 988
free: 989
free: 990
free: 991
free: 992
free: 993
free: 994
free: 995
free: 996
free: 997
free: 998
free: 999
free: 1000
free: 1001
free: 1002
free: 1003
free: 1004
free: 1005
free: 1006
free: 1007
free: 1008
free: 1009
free: 1010
free: 1011
free: 1012
free: 1013
free: 1014
free: 1015
free: 1016
free: 1017
free: 1018
free: 1019
free: 1020
free: 1021
free: 1022
#+end_example

