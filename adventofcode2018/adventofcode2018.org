* setup
(require 'ob-org)
(require 'ob-python)
** stdout/stderr on bad exit-code
#+BEGIN_SRC elisp
(defun org-babel-eval (cmd body)
  "Run CMD on BODY.
If CMD succeeds then return its results, otherwise display
STDERR with `org-babel-eval-error-notify'."
  (let ((err-buff (get-buffer-create " *Org-Babel Error*")) exit-code)
    (with-current-buffer err-buff (erase-buffer))
    (with-temp-buffer
      (insert body)
      (setq exit-code
	    (org-babel--shell-command-on-region
	     (point-min) (point-max) cmd err-buff))
      (if (or (not (numberp exit-code)) (> exit-code 0))
	  (progn
	    (with-current-buffer err-buff
	      (org-babel-eval-error-notify exit-code (buffer-string)))
	    (save-excursion
	      (when (get-buffer org-babel-error-buffer-name)
		(with-current-buffer org-babel-error-buffer-name
		  (unless (derived-mode-p 'compilation-mode)
		    (compilation-mode))
		  ;; Compilation-mode enforces read-only, but Babel expects the buffer modifiable.
		  (setq buffer-read-only nil))))
	    (concat (buffer-string) "STDERR:\n" (with-current-buffer err-buff (buffer-string))))
	(buffer-string)))))
#+END_SRC
* make work
 - tangle file: C-c C-v t
 - C-c C-c code src

* day 1
** puzzle
--- Day 1: Chronal Calibration ---

"We've detected some temporal anomalies," one of Santa's Elves at the Temporal Anomaly Research and Detection Instrument Station tells you. She sounded pretty worried when she called you down here. "At 500-year intervals into the past, someone has been changing Santa's history!"

"The good news is that the changes won't propagate to our time stream for another 25 days, and we have a device" - she attaches something to your wrist - "that will let you fix the changes with no such propagation delay. It's configured to send you 500 years further into the past every few days; that was the best we could do on such short notice."

"The bad news is that we are detecting roughly fifty anomalies throughout time; the device will indicate fixed anomalies with stars. The other bad news is that we only have one device and you're the best person for the job! Good lu--" She taps a button on the device and you suddenly feel like you're falling. To save Christmas, you need to get all fifty stars by December 25th.

Collect stars by solving puzzles. Two puzzles will be made available on each day in the advent calendar; the second puzzle is unlocked when you complete the first. Each puzzle grants one star. Good luck!

After feeling like you've been falling for a few minutes, you look at the device's tiny screen. "Error: Device must be calibrated before first use. Frequency drift detected. Cannot maintain destination lock." Below the message, the device shows a sequence of changes in frequency (your puzzle input). A value like +6 means the current frequency increases by 6; a value like -3 means the current frequency decreases by 3.

For example, if the device displays frequency changes of +1, -2, +3, +1, then starting from a frequency of zero, the following changes would occur:

    Current frequency  0, change of +1; resulting frequency  1.
    Current frequency  1, change of -2; resulting frequency -1.
    Current frequency -1, change of +3; resulting frequency  2.
    Current frequency  2, change of +1; resulting frequency  3.

In this example, the resulting frequency is 3.

Here are other example situations:

    +1, +1, +1 results in  3
    +1, +1, -2 results in  0
    -1, -2, -3 results in -6

Starting with a frequency of zero, what is the resulting frequency after all of the changes in frequency have been applied?

Your puzzle answer was 454.
--- Part Two ---

You notice that the device repeats the same frequency change list over and over. To calibrate the device, you need to find the first frequency it reaches twice.

For example, using the same list of changes above, the device would loop as follows:

    Current frequency  0, change of +1; resulting frequency  1.
    Current frequency  1, change of -2; resulting frequency -1.
    Current frequency -1, change of +3; resulting frequency  2.
    Current frequency  2, change of +1; resulting frequency  3.
    (At this point, the device continues from the start of the list.)
    Current frequency  3, change of +1; resulting frequency  4.
    Current frequency  4, change of -2; resulting frequency  2, which has already been seen.

In this example, the first frequency reached twice is 2. Note that your device might need to repeat its list of frequency changes many times before a duplicate frequency is found, and that duplicates might be found while in the middle of processing the list.

Here are other examples:

    +1, -1 first reaches 0 twice.
    +3, +3, +4, -2, -4 first reaches 10 twice.
    -6, +3, +8, +5, -6 first reaches 5 twice.
    +7, +7, -2, -7, -4 first reaches 14 twice.

What is the first frequency your device reaches twice?

Your puzzle answer was 566.

Both parts of this puzzle are complete! They provide two gold stars: **
** star 1
#+BEGIN_SRC python :results output
sum = 0
for line in open("01.txt", "r"):
    sum += int(line)
print(sum)
#+END_SRC

#+RESULTS:
: 454

** star 2
#+BEGIN_SRC python :results output
def f(lines):
  seens = set()
  sum = 0
  while True:
    for line in lines:
      seens.add(sum)
      sum += int(line)
      if sum in seens:
        return sum

assert f(["+1", "-1"]) is 0
assert f(["+3", "+3", "+4", "-2", "-4"]) is 10

print(f(list(open("01.txt", "r"))))
#+END_SRC

#+RESULTS:
: 566

* day 2
** puzzle
--- Day 2: Inventory Management System ---

You stop falling through time, catch your breath, and check the screen on the device. "Destination reached. Current Year: 1518. Current Location: North Pole Utility Closet 83N10." You made it! Now, to find those anomalies.

Outside the utility closet, you hear footsteps and a voice. "...I'm not sure either. But now that so many people have chimneys, maybe he could sneak in that way?" Another voice responds, "Actually, we've been working on a new kind of suit that would let him fit through tight spaces like that. But, I heard that a few days ago, they lost the prototype fabric, the design plans, everything! Nobody on the team can even seem to remember important details of the project!"

"Wouldn't they have had enough fabric to fill several boxes in the warehouse? They'd be stored together, so the box IDs should be similar. Too bad it would take forever to search the warehouse for two similar box IDs..." They walk too far away to hear any more.

Late at night, you sneak to the warehouse - who knows what kinds of paradoxes you could cause if you were discovered - and use your fancy wrist device to quickly scan every box and produce a list of the likely candidates (your puzzle input).

To make sure you didn't miss any, you scan the likely candidate boxes again, counting the number that have an ID containing exactly two of any letter and then separately counting those with exactly three of any letter. You can multiply those two counts together to get a rudimentary checksum and compare it to what your device predicts.

For example, if you see the following box IDs:

    abcdef contains no letters that appear exactly two or three times.
    bababc contains two a and three b, so it counts for both.
    abbcde contains two b, but no letter appears exactly three times.
    abcccd contains three c, but no letter appears exactly two times.
    aabcdd contains two a and two d, but it only counts once.
    abcdee contains two e.
    ababab contains three a and three b, but it only counts once.

Of these box IDs, four of them contain a letter which appears exactly twice, and three of them contain a letter which appears exactly three times. Multiplying these together produces a checksum of 4 * 3 = 12.

What is the checksum for your list of box IDs?

Your puzzle answer was 6150.
--- Part Two ---

Confident that your list of box IDs is complete, you're ready to find the boxes full of prototype fabric.

The boxes will have IDs which differ by exactly one character at the same position in both strings. For example, given the following box IDs:

abcde
fghij
klmno
pqrst
fguij
axcye
wvxyz

The IDs abcde and axcye are close, but they differ by two characters (the second and fourth). However, the IDs fghij and fguij differ by exactly one character, the third (h and u). Those must be the correct boxes.

What letters are common between the two correct box IDs? (In the example above, this is found by removing the differing character from either ID, producing fgij.)

Your puzzle answer was rteotyxzbodglnpkudawhijsc.

Both parts of this puzzle are complete! They provide two gold stars: **
** part 1
#+BEGIN_SRC python :results output
  def f(lines):
    twos = 0
    threes = 0
    for line in lines:
      seenLetters = {}
      for char in line:
        seenLetters[char] = seenLetters.get(char, 0) + 1

      if 2 in seenLetters.values():
        twos = twos + 1
      if 3 in seenLetters.values():
        threes = threes + 1
    return twos * threes

  assert f(["abcdef", "bababc", "abbcde", "abcccd", "aabcdd", "abcdee", "ababab"]) == 12

  print(f(list(open("02.txt", "r"))))
#+END_SRC

#+RESULTS:
: 6150

** part 1 B
#+BEGIN_SRC python :results output
  from collections import Counter
  def f(lines):
    twos = 0
    threes = 0
    for line in lines:
      counter = Counter(line)
      if 2 in counter.values():
        twos = twos + 1
      if 3 in counter.values():
        threes = threes + 1
    return twos * threes

  assert f(["abcdef", "bababc", "abbcde", "abcccd", "aabcdd", "abcdee", "ababab"]) == 12

  print(f(list(open("02.txt"))))
#+END_SRC

#+RESULTS:
: 6150


** part 2
#+BEGIN_SRC python :results output
def f(lines):
  sortedLines = sorted(lines)
  for i in range(1, len(sortedLines)):
    a = sortedLines[i-1]
    b = sortedLines[i]
    diffs = 0;
    diff = 0;
    for j in range(max(len(a), len(b))):
      if a[j] != b[j]:
        diffs += 1
        diff = j
    if diffs == 1:
      return a[:diff] + a[diff+1:]


assert f(["abcde", "fghij", "klmno", "pqrst", "fguij", "axcye", "wvxyz"]) == "fgij"

print(f(list(open("02.txt", "r"))))
#+END_SRC

#+RESULTS:
: rteotyxzbodglnpkudawhijsc
: 

** part 2 B
#+BEGIN_SRC python :results output
from collections import Counter
def f(lines):
  sortedLines = sorted(lines)
  for a, b in zip(sorted(lines), sorted(lines)[1:]):
    diffs = map(lambda (a,b): a != b, zip(a, b))
    if Counter(diffs)[True] == 1:
      diff = diffs.index(1)
      return a[:diff] + a[diff+1:]

assert f(["abcde", "fghij", "klmno", "pqrst", "fguij", "axcye", "wvxyz"]) == "fgij"

print(f(list(open("02.txt"))))
#+END_SRC

#+RESULTS:
: rteotyxzbodglnpkudawhijsc
: 

* day 3
** text
--- Day 3: No Matter How You Slice It ---

The Elves managed to locate the chimney-squeeze prototype fabric for Santa's suit (thanks to someone who helpfully wrote its box IDs on the wall of the warehouse in the middle of the night). Unfortunately, anomalies are still affecting them - nobody can even agree on how to cut the fabric.

The whole piece of fabric they're working on is a very large square - at least 1000 inches on each side.

Each Elf has made a claim about which area of fabric would be ideal for Santa's suit. All claims have an ID and consist of a single rectangle with edges parallel to the edges of the fabric. Each claim's rectangle is defined as follows:

    The number of inches between the left edge of the fabric and the left edge of the rectangle.
    The number of inches between the top edge of the fabric and the top edge of the rectangle.
    The width of the rectangle in inches.
    The height of the rectangle in inches.

A claim like #123 @ 3,2: 5x4 means that claim ID 123 specifies a rectangle 3 inches from the left edge, 2 inches from the top edge, 5 inches wide, and 4 inches tall. Visually, it claims the square inches of fabric represented by # (and ignores the square inches of fabric represented by .) in the diagram below:

...........
...........
...#####...
...#####...
...#####...
...#####...
...........
...........
...........

The problem is that many of the claims overlap, causing two or more claims to cover part of the same areas. For example, consider the following claims:

#1 @ 1,3: 4x4
#2 @ 3,1: 4x4
#3 @ 5,5: 2x2

Visually, these claim the following areas:

........
...2222.
...2222.
.11XX22.
.11XX22.
.111133.
.111133.
........

The four square inches marked with X are claimed by both 1 and 2. (Claim 3, while adjacent to the others, does not overlap either of them.)

If the Elves all proceed with their own plans, none of them will have enough fabric. How many square inches of fabric are within two or more claims?

Your puzzle answer was 101196.
--- Part Two ---

Amidst the chaos, you notice that exactly one claim doesn't overlap by even a single square inch of fabric with any other claim. If you can somehow draw attention to it, maybe the Elves will be able to make Santa's suit after all!

For example, in the claims above, only claim 3 is intact after all claims are made.

What is the ID of the only claim that doesn't overlap?

Your puzzle answer was 243.

Both parts of this puzzle are complete! They provide two gold stars: **
** part 1
#+BEGIN_SRC python :results output
import re

def f(lines):
  grid = {}
  for line in lines:
    m = re.search("#([0-9]+) @ ([0-9]+),([0-9]+): ([0-9]+)x([0-9]+)", line)
    x = int(m.group(2))
    y = int(m.group(3))
    w = int(m.group(4))
    h = int(m.group(5))
    for xx in range(x, x+w):
      for yy in range(y, y+h):
        key = str((xx, yy))
        grid[key] = grid.get(key, 0) + 1
  return len([c for c in grid.values() if c >= 2])

assert f(["#1 @ 1,3: 4x4", "#2 @ 3,1: 4x4", "#3 @ 5,5: 2x2"]) == 4
print(f(list(open("03.txt"))))
#+END_SRC

#+RESULTS:
: 101196

** part 2
#+BEGIN_SRC python :results output
  import re

  def liner(line):
    m = re.search("#([0-9]+) @ ([0-9]+),([0-9]+): ([0-9]+)x([0-9]+)", line)
    return {"id": int(m.group(1)), \
            "x": int(m.group(2)), \
            "y": int(m.group(3)), \
            "w": int(m.group(4)), \
            "h": int(m.group(5))}

  def f(lines):
    grid = {}
    for line in lines:
      l = liner(line)
      for x in range(l["x"], l["x"]+l["w"]):
        for y in range(l["y"], l["y"]+l["h"]):
          key = str((x, y))
          grid[key] = grid.get(key, 0) + 1

    for line in lines:
      l = liner(line)
      keys = [str((x, y)) for x in range(l["x"], l["x"]+l["w"]) 
                          for y in range(l["y"], l["y"]+l["h"])]
      if len([grid[key] for key in keys if grid[key] >= 2]) == 0:
        return l["id"]
    return None

  assert f(["#1 @ 1,3: 4x4", "#2 @ 3,1: 4x4", "#3 @ 5,5: 2x2"]) == 3
  print(f(list(open("03.txt"))))
#+END_SRC

#+RESULTS:
: 243

** part 2 B
#+BEGIN_SRC python :results output
  import re
  from collections import defaultdict

  def f(lines):
    grid = defaultdict()
    datas = [map(int, re.findall("[0-9]+", line)) for line in lines]
    for (id, x, y, w, h) in datas:
      for xx in xrange(x, x+w):
        for yy in xrange(y, y+h):
          key = (xx, yy)
          grid[key] = grid.get(key, 0) + 1

    for (id, x, y, w, h) in datas:
      keys = [(xx, yy) for xx in xrange(x, x+w) 
                       for yy in xrange(y, y+h)]
      if len([grid[key] for key in keys if grid[key] >= 2]) == 0:
        return id
    return None

  assert f(["#1 @ 1,3: 4x4", "#2 @ 3,1: 4x4", "#3 @ 5,5: 2x2"]) == 3
  print(f(list(open("03.txt"))))
#+END_SRC

#+RESULTS:
: 243
* day 4
** text
--- Day 4: Repose Record ---

You've sneaked into another supply closet - this time, it's across from the prototype suit manufacturing lab. You need to sneak inside and fix the issues with the suit, but there's a guard stationed outside the lab, so this is as close as you can safely get.

As you search the closet for anything that might help, you discover that you're not the first person to want to sneak in. Covering the walls, someone has spent an hour starting every midnight for the past few months secretly observing this guard post! They've been writing down the ID of the one guard on duty that night - the Elves seem to have decided that one guard was enough for the overnight shift - as well as when they fall asleep or wake up while at their post (your puzzle input).

For example, consider the following records, which have already been organized into chronological order:

[1518-11-01 00:00] Guard #10 begins shift
[1518-11-01 00:05] falls asleep
[1518-11-01 00:25] wakes up
[1518-11-01 00:30] falls asleep
[1518-11-01 00:55] wakes up
[1518-11-01 23:58] Guard #99 begins shift
[1518-11-02 00:40] falls asleep
[1518-11-02 00:50] wakes up
[1518-11-03 00:05] Guard #10 begins shift
[1518-11-03 00:24] falls asleep
[1518-11-03 00:29] wakes up
[1518-11-04 00:02] Guard #99 begins shift
[1518-11-04 00:36] falls asleep
[1518-11-04 00:46] wakes up
[1518-11-05 00:03] Guard #99 begins shift
[1518-11-05 00:45] falls asleep
[1518-11-05 00:55] wakes up

Timestamps are written using year-month-day hour:minute format. The guard falling asleep or waking up is always the one whose shift most recently started. Because all asleep/awake times are during the midnight hour (00:00 - 00:59), only the minute portion (00 - 59) is relevant for those events.

Visually, these records show that the guards are asleep at these times:

Date   ID   Minute
            000000000011111111112222222222333333333344444444445555555555
            012345678901234567890123456789012345678901234567890123456789
11-01  #10  .....####################.....#########################.....
11-02  #99  ........................................##########..........
11-03  #10  ........................#####...............................
11-04  #99  ....................................##########..............
11-05  #99  .............................................##########.....

The columns are Date, which shows the month-day portion of the relevant day; ID, which shows the guard on duty that day; and Minute, which shows the minutes during which the guard was asleep within the midnight hour. (The Minute column's header shows the minute's ten's digit in the first row and the one's digit in the second row.) Awake is shown as ., and asleep is shown as #.

Note that guards count as asleep on the minute they fall asleep, and they count as awake on the minute they wake up. For example, because Guard #10 wakes up at 00:25 on 1518-11-01, minute 25 is marked as awake.

If you can figure out the guard most likely to be asleep at a specific time, you might be able to trick that guard into working tonight so you can have the best chance of sneaking in. You have two strategies for choosing the best guard/minute combination.

Strategy 1: Find the guard that has the most minutes asleep. What minute does that guard spend asleep the most?

In the example above, Guard #10 spent the most minutes asleep, a total of 50 minutes (20+25+5), while Guard #99 only slept for a total of 30 minutes (10+10+10). Guard #10 was asleep most during minute 24 (on two days, whereas any other minute the guard was asleep was only seen on one day).

While this example listed the entries in chronological order, your entries are in the order you found them. You'll need to organize them before they can be analyzed.

What is the ID of the guard you chose multiplied by the minute you chose? (In the above example, the answer would be 10 * 24 = 240.)

Your puzzle answer was 95199.
--- Part Two ---

Strategy 2: Of all guards, which guard is most frequently asleep on the same minute?

In the example above, Guard #99 spent minute 45 asleep more than any other guard or minute - three times in total. (In all other cases, any guard spent any minute asleep at most twice.)

What is the ID of the guard you chose multiplied by the minute you chose? (In the above example, the answer would be 99 * 45 = 4455.)

Your puzzle answer was 7887.

Both parts of this puzzle are complete! They provide two gold stars: **
** part 1
#+BEGIN_SRC python :results output
import re
def f(lines):
  guard = {}
  id = None
  start = -1
  end = -1
  for line in sorted(lines):
    if line.strip().endswith("shift"):
      id = int(re.search('[0-9]+', line[26:]).group())
    elif line.strip().endswith("asleep"):
      start = int(line[15:17])
    else:
      sleeps = guard.get(id, {});
      end = int(line[15:17])
      for min in xrange(start, end):
        sleeps[min] = sleeps.get(min, 0) + 1
      guard[id] = sleeps
  id, sleeps = max(guard.items(), key=lambda g: sum(g[1].values()))
  m = max(sleeps.items(), key=lambda m: m[1])[0]
  return id * m

assert f([
"[1518-11-01 00:00] Guard #10 begins shift",
"[1518-11-01 00:05] falls asleep",
"[1518-11-01 00:25] wakes up",
"[1518-11-01 00:30] falls asleep",
"[1518-11-01 00:55] wakes up",
"[1518-11-01 23:58] Guard #99 begins shift",
"[1518-11-02 00:40] falls asleep",
"[1518-11-02 00:50] wakes up",
"[1518-11-03 00:05] Guard #10 begins shift",
"[1518-11-03 00:24] falls asleep",
"[1518-11-03 00:29] wakes up",
"[1518-11-04 00:02] Guard #99 begins shift",
"[1518-11-04 00:36] falls asleep",
"[1518-11-04 00:46] wakes up",
"[1518-11-05 00:03] Guard #99 begins shift",
"[1518-11-05 00:45] falls asleep",
"[1518-11-05 00:55] wakes up"]) == 240
print(f(list(open("04.txt"))))
#+END_SRC

#+RESULTS:
: 95199

 - guess: 39

** part 2
#+BEGIN_SRC python :results output
import re
def f(lines):
  guard = {}
  id = None
  start = -1
  end = -1
  for line in sorted(lines):
    if line.strip().endswith("shift"):
      id = int(re.search('[0-9]+', line[26:]).group())
    elif line.strip().endswith("asleep"):
      start = int(line[15:17])
    else:
      sleeps = guard.get(id, {});
      end = int(line[15:17])
      for min in xrange(start, end):
        sleeps[min] = sleeps.get(min, 0) + 1
      guard[id] = sleeps
  id, sleeps = max(guard.items(), key=lambda g: max(g[1].values()))
  m = max(sleeps.items(), key=lambda m: m[1])[0]
  return id * m

assert f([
"[1518-11-01 00:00] Guard #10 begins shift",
"[1518-11-01 00:05] falls asleep",
"[1518-11-01 00:25] wakes up",
"[1518-11-01 00:30] falls asleep",
"[1518-11-01 00:55] wakes up",
"[1518-11-01 23:58] Guard #99 begins shift",
"[1518-11-02 00:40] falls asleep",
"[1518-11-02 00:50] wakes up",
"[1518-11-03 00:05] Guard #10 begins shift",
"[1518-11-03 00:24] falls asleep",
"[1518-11-03 00:29] wakes up",
"[1518-11-04 00:02] Guard #99 begins shift",
"[1518-11-04 00:36] falls asleep",
"[1518-11-04 00:46] wakes up",
"[1518-11-05 00:03] Guard #99 begins shift",
"[1518-11-05 00:45] falls asleep",
"[1518-11-05 00:55] wakes up"]) == 4455
print(f(list(open("04.txt"))))
#+END_SRC

#+RESULTS:
: 7887

 - guess: 39
   
** part 2 B
#+BEGIN_SRC python :results output
import re
def f(lines):
  guard = {}
  id = None
  start = -1
  end = -1
  for line in sorted(lines):
    numbers = [ int(n) for n in re.findall("[0-9]+", line) ]
    if "shift" in line:
      id = numbers[5]
    elif "asleep" in line:
      start = numbers[4]
    else:
      sleeps = guard.get(id, {});
      end = numbers[4]
      for min in xrange(start, end):
        sleeps[min] = sleeps.get(min, 0) + 1
      guard[id] = sleeps
  id, sleeps = max(guard.items(), key=lambda g: max(g[1].values()))
  m = max(sleeps.items(), key=lambda m: m[1])[0]
  return id * m

assert f([
"[1518-11-01 00:00] Guard #10 begins shift",
"[1518-11-01 00:05] falls asleep",
"[1518-11-01 00:25] wakes up",
"[1518-11-01 00:30] falls asleep",
"[1518-11-01 00:55] wakes up",
"[1518-11-01 23:58] Guard #99 begins shift",
"[1518-11-02 00:40] falls asleep",
"[1518-11-02 00:50] wakes up",
"[1518-11-03 00:05] Guard #10 begins shift",
"[1518-11-03 00:24] falls asleep",
"[1518-11-03 00:29] wakes up",
"[1518-11-04 00:02] Guard #99 begins shift",
"[1518-11-04 00:36] falls asleep",
"[1518-11-04 00:46] wakes up",
"[1518-11-05 00:03] Guard #99 begins shift",
"[1518-11-05 00:45] falls asleep",
"[1518-11-05 00:55] wakes up"]) == 4455
print(f(list(open("04.txt"))))
#+END_SRC

#+RESULTS:
: 7887

 - guess: 39
   
* day 5
** text
--- Day 5: Alchemical Reduction ---

You've managed to sneak in to the prototype suit manufacturing lab. The Elves are making decent progress, but are still struggling with the suit's size reduction capabilities.

While the very latest in 1518 alchemical technology might have solved their problem eventually, you can do better. You scan the chemical composition of the suit's material and discover that it is formed by extremely long polymers (one of which is available as your puzzle input).

The polymer is formed by smaller units which, when triggered, react with each other such that two adjacent units of the same type and opposite polarity are destroyed. Units' types are represented by letters; units' polarity is represented by capitalization. For instance, r and R are units with the same type but opposite polarity, whereas r and s are entirely different types and do not react.

For example:

    In aA, a and A react, leaving nothing behind.
    In abBA, bB destroys itself, leaving aA. As above, this then destroys itself, leaving nothing.
    In abAB, no two adjacent units are of the same type, and so nothing happens.
    In aabAAB, even though aa and AA are of the same type, their polarities match, and so nothing happens.

Now, consider a larger example, dabAcCaCBAcCcaDA:

dabAcCaCBAcCcaDA  The first 'cC' is removed.
dabAaCBAcCcaDA    This creates 'Aa', which is removed.
dabCBAcCcaDA      Either 'cC' or 'Cc' are removed (the result is the same).
dabCBAcaDA        No further actions can be taken.

After all possible reactions, the resulting polymer contains 10 units.

How many units remain after fully reacting the polymer you scanned? (Note: in this puzzle and others, the input is large; if you copy/paste your input, make sure you get the whole thing.)

Your puzzle answer was 9370.
--- Part Two ---

Time to improve the polymer.

One of the unit types is causing problems; it's preventing the polymer from collapsing as much as it should. Your goal is to figure out which unit type is causing the most problems, remove all instances of it (regardless of polarity), fully react the remaining polymer, and measure its length.

For example, again using the polymer dabAcCaCBAcCcaDA from above:

    Removing all A/a units produces dbcCCBcCcD. Fully reacting this polymer produces dbCBcD, which has length 6.
    Removing all B/b units produces daAcCaCAcCcaDA. Fully reacting this polymer produces daCAcaDA, which has length 8.
    Removing all C/c units produces dabAaBAaDA. Fully reacting this polymer produces daDA, which has length 4.
    Removing all D/d units produces abAcCaCBAcCcaA. Fully reacting this polymer produces abCBAc, which has length 6.

In this example, removing all C/c units was best, producing the answer 4.

What is the length of the shortest polymer you can produce by removing all units of exactly one type and fully reacting the result?

Your puzzle answer was 6390.

Both parts of this puzzle are complete! They provide two gold stars: **
** part 1
#+BEGIN_SRC python :results output
def f(input):
  def react(a, b):
    return a.upper() == b.upper() and a.isupper() != b.isupper()

  q = []
  for b in xrange(0, len(input)):
    q.append(input[b])
    while len(q) >= 2 and react(q[-1], q[-2]):
      q = q[:-2]
  return "".join(q)

assert f("aA") == ""
assert f("abBA") == ""
assert f("abAB") == "abAB"
assert f("aabAAB") == "aabAAB"
assert f("dabAcCaCBAcCcaDA") == "dabCBAcaDA"
assert len(f("dabAcCaCBAcCcaDA")) == 10

print(len(f(open("05.txt").read().strip())))
#+END_SRC

#+RESULTS:
: 9370
** part 1 naive
#+BEGIN_SRC python :results output
def f(input):
  def react(a, b):
    return a.upper() == b.upper() and a.isupper() != b.isupper()

  worked = True
  while worked:
    worked = False
    for i in xrange(1, len(input)):
      if react(input[i-1], input[i]):
        input = input[:i-1] + input[i+1:]
        worked = True
        break;
  return input

assert f("aA") == ""
assert f("abBA") == ""
assert f("abAB") == "abAB"
assert f("aabAAB") == "aabAAB"
assert f("dabAcCaCBAcCcaDA") == "dabCBAcaDA"
assert len(f("dabAcCaCBAcCcaDA")) == 10

print(f("YyLlXxYKkbNnQqBFfxXbyYWwBhHyYTCBbCjIiqwtTWQJczeEauUAZDdFfmwWMccbBOojBbXxKnNkkKsSeEsxX"))
print(f("YyLlXxY"))

#print(len(f(open("05.txt").read().strip())))
#+END_SRC

#+RESULTS:
: YTcjs
: Y

** part 2
#+BEGIN_SRC python :results output
def f(input):
  def react(a, b):
    return a.upper() == b.upper() and a.isupper() != b.isupper()
  q = []
  for b in xrange(0, len(input)):
    q.append(input[b])
    while len(q) >= 2 and react(q[-1], q[-2]):
      q = q[:-2]
  return "".join(q)

def ff(input):
  cs = set([ c.upper() for c in list(input)])
  withoutc = [ (c, f(input.replace(c.lower(), '').replace(c.upper(), ''))) for c in cs]
  return min([ len(x[1]) for x in withoutc])
    

assert ff("dabAcCaCBAcCcaDA") == 4
print(ff(open("05.txt").read().strip()))
#+END_SRC

#+RESULTS:
: 6390
* day 6
** text
--- Day 6: Chronal Coordinates ---

The device on your wrist beeps several times, and once again you feel like you're falling.

"Situation critical," the device announces. "Destination indeterminate. Chronal interference detected. Please specify new target coordinates."

The device then produces a list of coordinates (your puzzle input). Are they places it thinks are safe or dangerous? It recommends you check manual page 729. The Elves did not give you a manual.

If they're dangerous, maybe you can minimize the danger by finding the coordinate that gives the largest distance from the other points.

Using only the Manhattan distance, determine the area around each coordinate by counting the number of integer X,Y locations that are closest to that coordinate (and aren't tied in distance to any other coordinate).

Your goal is to find the size of the largest area that isn't infinite. For example, consider the following list of coordinates:

1, 1
1, 6
8, 3
3, 4
5, 5
8, 9

If we name these coordinates A through F, we can draw them on a grid, putting 0,0 at the top left:

..........
.A........
..........
........C.
...D......
.....E....
.B........
..........
..........
........F.

This view is partial - the actual grid extends infinitely in all directions. Using the Manhattan distance, each location's closest coordinate can be determined, shown here in lowercase:

aaaaa.cccc
aAaaa.cccc
aaaddecccc
aadddeccCc
..dDdeeccc
bb.deEeecc
bBb.eeee..
bbb.eeefff
bbb.eeffff
bbb.ffffFf

Locations shown as . are equally far from two or more coordinates, and so they don't count as being closest to any.

In this example, the areas of coordinates A, B, C, and F are infinite - while not shown here, their areas extend forever outside the visible grid. However, the areas of coordinates D and E are finite: D is closest to 9 locations, and E is closest to 17 (both including the coordinate's location itself). Therefore, in this example, the size of the largest area is 17.

What is the size of the largest area that isn't infinite?

Your puzzle answer was 3890.
--- Part Two ---

On the other hand, if the coordinates are safe, maybe the best you can do is try to find a region near as many coordinates as possible.

For example, suppose you want the sum of the Manhattan distance to all of the coordinates to be less than 32. For each location, add up the distances to all of the given coordinates; if the total of those distances is less than 32, that location is within the desired region. Using the same coordinates as above, the resulting region looks like this:

..........
.A........
..........
...###..C.
..#D###...
..###E#...
.B.###....
..........
..........
........F.

In particular, consider the highlighted location 4,3 located at the top middle of the region. Its calculation is as follows, where abs() is the absolute value function:

    Distance to coordinate A: abs(4-1) + abs(3-1) =  5
    Distance to coordinate B: abs(4-1) + abs(3-6) =  6
    Distance to coordinate C: abs(4-8) + abs(3-3) =  4
    Distance to coordinate D: abs(4-3) + abs(3-4) =  2
    Distance to coordinate E: abs(4-5) + abs(3-5) =  3
    Distance to coordinate F: abs(4-8) + abs(3-9) = 10
    Total distance: 5 + 6 + 4 + 2 + 3 + 10 = 30

Because the total distance to all coordinates (30) is less than 32, the location is within the region.

This region, which also includes coordinates D and E, has a total size of 16.

Your actual region will need to be much larger than this example, though, instead including all locations with a total distance of less than 10000.

What is the size of the region containing all locations which have a total distance to all given coordinates of less than 10000?

Your puzzle answer was 40284.

Both parts of this puzzle are complete! They provide two gold stars: **
** part 1
#+BEGIN_SRC python :results output
import re
def f(lines):
  xys = [ re.findall("[0-9]+", line.strip()) for line in lines ]
  xys = [ (int(xy[0]), int(xy[1])) for xy in xys ]

  xs = [ xy[0] for xy in xys ]
  minx = min(xs)
  maxx = max(xs)
  ys = [ xy[1] for xy in xys ]
  miny = min(ys)
  maxy = max(ys)
  closests = {}
  for x in xrange(minx, maxx):
    for y in xrange(miny, maxy):
      xy = min(xys, key=lambda xy: abs(xy[0] - x) + abs(xy[1] - y))
      if x == minx or x == maxx or y == miny or y == maxy:
        closests[xy] = None
      else :
        val = closests.get(xy, 0)
        if val != None:
          closests[xy] = val + 1
  return max(closests.values())

assert f(["1, 1", "1, 6", "8, 3", "3, 4", "5, 5", "8, 9"]) == 17
print(f(list(open("06.txt"))))
#+END_SRC

#+RESULTS:
: 3890
** part 2
#+BEGIN_SRC python :results output
import re
def f(lines, dist):
  xys = [ re.findall("[0-9]+", line.strip()) for line in lines ]
  xys = [ (int(xy[0]), int(xy[1])) for xy in xys ]

  xs = [ xy[0] for xy in xys ]
  minx = min(xs)
  maxx = max(xs)
  ys = [ xy[1] for xy in xys ]
  miny = min(ys)
  maxy = max(ys)
  withindist = 0
  for x in xrange(minx, maxx):
    for y in xrange(miny, maxy):
      if sum([ abs(xy[0] - x) + abs(xy[1] - y) for xy in xys ]) < dist:
        withindist += 1
  return withindist

#print(f(["1, 1", "1, 6", "8, 3", "3, 4", "5, 5", "8, 9"], 32))
print(f(list(open("06.txt")), 10000))
#+END_SRC

#+RESULTS:
: 40284
* day 07
** text
--- Day 7: The Sum of Its Parts ---

You find yourself standing on a snow-covered coastline; apparently, you landed a little off course. The region is too hilly to see the North Pole from here, but you do spot some Elves that seem to be trying to unpack something that washed ashore. It's quite cold out, so you decide to risk creating a paradox by asking them for directions.

"Oh, are you the search party?" Somehow, you can understand whatever Elves from the year 1018 speak; you assume it's Ancient Nordic Elvish. Could the device on your wrist also be a translator? "Those clothes don't look very warm; take this." They hand you a heavy coat.

"We do need to find our way back to the North Pole, but we have higher priorities at the moment. You see, believe it or not, this box contains something that will solve all of Santa's transportation problems - at least, that's what it looks like from the pictures in the instructions." It doesn't seem like they can read whatever language it's in, but you can: "Sleigh kit. Some assembly required."

"'Sleigh'? What a wonderful name! You must help us assemble this 'sleigh' at once!" They start excitedly pulling more parts out of the box.

The instructions specify a series of steps and requirements about which steps must be finished before others can begin (your puzzle input). Each step is designated by a single letter. For example, suppose you have the following instructions:

Step C must be finished before step A can begin.
Step C must be finished before step F can begin.
Step A must be finished before step B can begin.
Step A must be finished before step D can begin.
Step B must be finished before step E can begin.
Step D must be finished before step E can begin.
Step F must be finished before step E can begin.

Visually, these requirements look like this:


  -->A--->B--
 /    \      \
C      -->D----->E
 \           /
  ---->F-----

Your first goal is to determine the order in which the steps should be completed. If more than one step is ready, choose the step which is first alphabetically. In this example, the steps would be completed as follows:

    Only C is available, and so it is done first.
    Next, both A and F are available. A is first alphabetically, so it is done next.
    Then, even though F was available earlier, steps B and D are now also available, and B is the first alphabetically of the three.
    After that, only D and F are available. E is not available because only some of its prerequisites are complete. Therefore, D is completed next.
    F is the only choice, so it is done next.
    Finally, E is completed.

So, in this example, the correct order is CABDFE.

In what order should the steps in your instructions be completed?

Your puzzle answer was GJKLDFNPTMQXIYHUVREOZSAWCB.
--- Part Two ---

As you're about to begin construction, four of the Elves offer to help. "The sun will set soon; it'll go faster if we work together." Now, you need to account for multiple people working on steps simultaneously. If multiple steps are available, workers should still begin them in alphabetical order.

Each step takes 60 seconds plus an amount corresponding to its letter: A=1, B=2, C=3, and so on. So, step A takes 60+1=61 seconds, while step Z takes 60+26=86 seconds. No time is required between steps.

To simplify things for the example, however, suppose you only have help from one Elf (a total of two workers) and that each step takes 60 fewer seconds (so that step A takes 1 second and step Z takes 26 seconds). Then, using the same instructions as above, this is how each second would be spent:

Second   Worker 1   Worker 2   Done
   0        C          .        
   1        C          .        
   2        C          .        
   3        A          F       C
   4        B          F       CA
   5        B          F       CA
   6        D          F       CAB
   7        D          F       CAB
   8        D          F       CAB
   9        D          .       CABF
  10        E          .       CABFD
  11        E          .       CABFD
  12        E          .       CABFD
  13        E          .       CABFD
  14        E          .       CABFD
  15        .          .       CABFDE

Each row represents one second of time. The Second column identifies how many seconds have passed as of the beginning of that second. Each worker column shows the step that worker is currently doing (or . if they are idle). The Done column shows completed steps.

Note that the order of the steps has changed; this is because steps now take time to finish and multiple workers can begin multiple steps simultaneously.

In this example, it would take 15 seconds for two workers to complete these steps.

With 5 workers and the 60+ second step durations described above, how long will it take to complete all of the steps?

Your puzzle answer was 967.

Both parts of this puzzle are complete! They provide two gold stars: **
** part 1
#+BEGIN_SRC python :results output
  def f(lines):
    beforeAfter = [ (line[5], line[36]) for line in lines]
    befores = {}
    afters = {}
    for x in set([ a for a,b in beforeAfter ] + [b for a,b in beforeAfter ]):
      befores[x] = set()
      afters[x] = set()
    for a, b in beforeAfter:
      befores[b].add(a)
      afters[a].add(b)

    output = []
    while len(befores) > 0:
      x = min([ x for x,y in befores.items() if len(y) == 0 ])
      output.append(x)
      for y in afters[x]:
        if y in befores:
          befores[y].remove(x)
      befores.pop(x, None)
    return "".join(output)

  assert f(["Step C must be finished before step A can begin.",
  "Step C must be finished before step F can begin.",
  "Step A must be finished before step B can begin.",
  "Step A must be finished before step D can begin.",
  "Step B must be finished before step E can begin.",
  "Step D must be finished before step E can begin.",
  "Step F must be finished before step E can begin."]) == "CABDFE"

  print(f(list(open("07.txt"))))
#+END_SRC

#+RESULTS:
: GJKLDFNPTMQXIYHUVREOZSAWCB

** part 2
#+BEGIN_SRC python :results output
  def f(lines, workers, add):
    beforeAfter = [ (line[5], line[36]) for line in lines]
    befores = {}
    afters = {}
    for x in set([ a for a,b in beforeAfter ] + [b for a,b in beforeAfter ]):
      befores[x] = set()
      afters[x] = set()
    for a, b in beforeAfter:
      befores[b].add(a)
      afters[a].add(b)

    done = ""
    sec = 0
    donesecs = {}
    while len(befores) > 0:
      for x, s in donesecs.items():
        if sec >= s:
          for y in afters[x]:
            if y in befores and x in befores[y]:
              befores[y].remove(x)
          befores.pop(x, None)
          donesecs.pop(x, None)
          done += x
          print(x, sec, "STOP")

      nexts = sorted([ x for x,y in befores.items() if len(y) == 0 ])
      for x in nexts:
        if not x in donesecs and len(donesecs) < workers:
          donesecs[x] = sec + add + ord(x) - ord('A') + 1
          print(x, sec, "START", donesecs, nexts)

      doing = []
      fookeys = sorted(donesecs.keys())
      for i in xrange(5):
        if i < len(fookeys):
          doing.append(fookeys[i])
        else:
          doing.append(".")
      print("%5d  %s  %s  %s  %s  %s  %-20s %-20s" % (sec, 
            doing[0], doing[1], doing[2], doing[3], doing[4],
            nexts, done))
      sec += 1

    return sec - 1


  assert f(["Step C must be finished before step A can begin.",
  "Step C must be finished before step F can begin.",
  "Step A must be finished before step B can begin.",
  "Step A must be finished before step D can begin.",
  "Step B must be finished before step E can begin.",
  "Step D must be finished before step E can begin.",
  "Step F must be finished before step E can begin."], 2, 0) == 15
  print()
  print(f(list(open("07.txt")), 5, 60))
#+END_SRC

#+RESULTS:
#+begin_example
('C', 0, 'START', {'C': 3}, ['C'])
    0  C  .  .  .  .  ['C']                                    
    1  C  .  .  .  .  ['C']                                    
    2  C  .  .  .  .  ['C']                                    
('C', 3, 'STOP')
('A', 3, 'START', {'A': 4}, ['A', 'F'])
('F', 3, 'START', {'A': 4, 'F': 9}, ['A', 'F'])
    3  A  F  .  .  .  ['A', 'F']           C                   
('A', 4, 'STOP')
('B', 4, 'START', {'B': 6, 'F': 9}, ['B', 'D', 'F'])
    4  B  F  .  .  .  ['B', 'D', 'F']      CA                  
    5  B  F  .  .  .  ['B', 'D', 'F']      CA                  
('B', 6, 'STOP')
('D', 6, 'START', {'D': 10, 'F': 9}, ['D', 'F'])
    6  D  F  .  .  .  ['D', 'F']           CAB                 
    7  D  F  .  .  .  ['D', 'F']           CAB                 
    8  D  F  .  .  .  ['D', 'F']           CAB                 
('F', 9, 'STOP')
    9  D  .  .  .  .  ['D']                CABF                
('D', 10, 'STOP')
('E', 10, 'START', {'E': 15}, ['E'])
   10  E  .  .  .  .  ['E']                CABFD               
   11  E  .  .  .  .  ['E']                CABFD               
   12  E  .  .  .  .  ['E']                CABFD               
   13  E  .  .  .  .  ['E']                CABFD               
   14  E  .  .  .  .  ['E']                CABFD               
('E', 15, 'STOP')
   15  .  .  .  .  .  []                   CABFDE              
()
('G', 0, 'START', {'G': 67}, ['G', 'J', 'L', 'N'])
('J', 0, 'START', {'J': 70, 'G': 67}, ['G', 'J', 'L', 'N'])
('L', 0, 'START', {'J': 70, 'L': 72, 'G': 67}, ['G', 'J', 'L', 'N'])
('N', 0, 'START', {'J': 70, 'L': 72, 'G': 67, 'N': 74}, ['G', 'J', 'L', 'N'])
    0  G  J  L  N  .  ['G', 'J', 'L', 'N']                     
    1  G  J  L  N  .  ['G', 'J', 'L', 'N']                     
    2  G  J  L  N  .  ['G', 'J', 'L', 'N']                     
    3  G  J  L  N  .  ['G', 'J', 'L', 'N']                     
    4  G  J  L  N  .  ['G', 'J', 'L', 'N']                     
    5  G  J  L  N  .  ['G', 'J', 'L', 'N']                     
    6  G  J  L  N  .  ['G', 'J', 'L', 'N']                     
    7  G  J  L  N  .  ['G', 'J', 'L', 'N']                     
    8  G  J  L  N  .  ['G', 'J', 'L', 'N']                     
    9  G  J  L  N  .  ['G', 'J', 'L', 'N']                     
   10  G  J  L  N  .  ['G', 'J', 'L', 'N']                     
   11  G  J  L  N  .  ['G', 'J', 'L', 'N']                     
   12  G  J  L  N  .  ['G', 'J', 'L', 'N']                     
   13  G  J  L  N  .  ['G', 'J', 'L', 'N']                     
   14  G  J  L  N  .  ['G', 'J', 'L', 'N']                     
   15  G  J  L  N  .  ['G', 'J', 'L', 'N']                     
   16  G  J  L  N  .  ['G', 'J', 'L', 'N']                     
   17  G  J  L  N  .  ['G', 'J', 'L', 'N']                     
   18  G  J  L  N  .  ['G', 'J', 'L', 'N']                     
   19  G  J  L  N  .  ['G', 'J', 'L', 'N']                     
   20  G  J  L  N  .  ['G', 'J', 'L', 'N']                     
   21  G  J  L  N  .  ['G', 'J', 'L', 'N']                     
   22  G  J  L  N  .  ['G', 'J', 'L', 'N']                     
   23  G  J  L  N  .  ['G', 'J', 'L', 'N']                     
   24  G  J  L  N  .  ['G', 'J', 'L', 'N']                     
   25  G  J  L  N  .  ['G', 'J', 'L', 'N']                     
   26  G  J  L  N  .  ['G', 'J', 'L', 'N']                     
   27  G  J  L  N  .  ['G', 'J', 'L', 'N']                     
   28  G  J  L  N  .  ['G', 'J', 'L', 'N']                     
   29  G  J  L  N  .  ['G', 'J', 'L', 'N']                     
   30  G  J  L  N  .  ['G', 'J', 'L', 'N']                     
   31  G  J  L  N  .  ['G', 'J', 'L', 'N']                     
   32  G  J  L  N  .  ['G', 'J', 'L', 'N']                     
   33  G  J  L  N  .  ['G', 'J', 'L', 'N']                     
   34  G  J  L  N  .  ['G', 'J', 'L', 'N']                     
   35  G  J  L  N  .  ['G', 'J', 'L', 'N']                     
   36  G  J  L  N  .  ['G', 'J', 'L', 'N']                     
   37  G  J  L  N  .  ['G', 'J', 'L', 'N']                     
   38  G  J  L  N  .  ['G', 'J', 'L', 'N']                     
   39  G  J  L  N  .  ['G', 'J', 'L', 'N']                     
   40  G  J  L  N  .  ['G', 'J', 'L', 'N']                     
   41  G  J  L  N  .  ['G', 'J', 'L', 'N']                     
   42  G  J  L  N  .  ['G', 'J', 'L', 'N']                     
   43  G  J  L  N  .  ['G', 'J', 'L', 'N']                     
   44  G  J  L  N  .  ['G', 'J', 'L', 'N']                     
   45  G  J  L  N  .  ['G', 'J', 'L', 'N']                     
   46  G  J  L  N  .  ['G', 'J', 'L', 'N']                     
   47  G  J  L  N  .  ['G', 'J', 'L', 'N']                     
   48  G  J  L  N  .  ['G', 'J', 'L', 'N']                     
   49  G  J  L  N  .  ['G', 'J', 'L', 'N']                     
   50  G  J  L  N  .  ['G', 'J', 'L', 'N']                     
   51  G  J  L  N  .  ['G', 'J', 'L', 'N']                     
   52  G  J  L  N  .  ['G', 'J', 'L', 'N']                     
   53  G  J  L  N  .  ['G', 'J', 'L', 'N']                     
   54  G  J  L  N  .  ['G', 'J', 'L', 'N']                     
   55  G  J  L  N  .  ['G', 'J', 'L', 'N']                     
   56  G  J  L  N  .  ['G', 'J', 'L', 'N']                     
   57  G  J  L  N  .  ['G', 'J', 'L', 'N']                     
   58  G  J  L  N  .  ['G', 'J', 'L', 'N']                     
   59  G  J  L  N  .  ['G', 'J', 'L', 'N']                     
   60  G  J  L  N  .  ['G', 'J', 'L', 'N']                     
   61  G  J  L  N  .  ['G', 'J', 'L', 'N']                     
   62  G  J  L  N  .  ['G', 'J', 'L', 'N']                     
   63  G  J  L  N  .  ['G', 'J', 'L', 'N']                     
   64  G  J  L  N  .  ['G', 'J', 'L', 'N']                     
   65  G  J  L  N  .  ['G', 'J', 'L', 'N']                     
   66  G  J  L  N  .  ['G', 'J', 'L', 'N']                     
('G', 67, 'STOP')
   67  J  L  N  .  .  ['J', 'L', 'N']      G                   
   68  J  L  N  .  .  ['J', 'L', 'N']      G                   
   69  J  L  N  .  .  ['J', 'L', 'N']      G                   
('J', 70, 'STOP')
('K', 70, 'START', {'K': 141, 'L': 72, 'N': 74}, ['K', 'L', 'N'])
   70  K  L  N  .  .  ['K', 'L', 'N']      GJ                  
   71  K  L  N  .  .  ['K', 'L', 'N']      GJ                  
('L', 72, 'STOP')
('D', 72, 'START', {'K': 141, 'D': 136, 'N': 74}, ['D', 'K', 'N'])
   72  D  K  N  .  .  ['D', 'K', 'N']      GJL                 
   73  D  K  N  .  .  ['D', 'K', 'N']      GJL                 
('N', 74, 'STOP')
   74  D  K  .  .  .  ['D', 'K']           GJLN                
   75  D  K  .  .  .  ['D', 'K']           GJLN                
   76  D  K  .  .  .  ['D', 'K']           GJLN                
   77  D  K  .  .  .  ['D', 'K']           GJLN                
   78  D  K  .  .  .  ['D', 'K']           GJLN                
   79  D  K  .  .  .  ['D', 'K']           GJLN                
   80  D  K  .  .  .  ['D', 'K']           GJLN                
   81  D  K  .  .  .  ['D', 'K']           GJLN                
   82  D  K  .  .  .  ['D', 'K']           GJLN                
   83  D  K  .  .  .  ['D', 'K']           GJLN                
   84  D  K  .  .  .  ['D', 'K']           GJLN                
   85  D  K  .  .  .  ['D', 'K']           GJLN                
   86  D  K  .  .  .  ['D', 'K']           GJLN                
   87  D  K  .  .  .  ['D', 'K']           GJLN                
   88  D  K  .  .  .  ['D', 'K']           GJLN                
   89  D  K  .  .  .  ['D', 'K']           GJLN                
   90  D  K  .  .  .  ['D', 'K']           GJLN                
   91  D  K  .  .  .  ['D', 'K']           GJLN                
   92  D  K  .  .  .  ['D', 'K']           GJLN                
   93  D  K  .  .  .  ['D', 'K']           GJLN                
   94  D  K  .  .  .  ['D', 'K']           GJLN                
   95  D  K  .  .  .  ['D', 'K']           GJLN                
   96  D  K  .  .  .  ['D', 'K']           GJLN                
   97  D  K  .  .  .  ['D', 'K']           GJLN                
   98  D  K  .  .  .  ['D', 'K']           GJLN                
   99  D  K  .  .  .  ['D', 'K']           GJLN                
  100  D  K  .  .  .  ['D', 'K']           GJLN                
  101  D  K  .  .  .  ['D', 'K']           GJLN                
  102  D  K  .  .  .  ['D', 'K']           GJLN                
  103  D  K  .  .  .  ['D', 'K']           GJLN                
  104  D  K  .  .  .  ['D', 'K']           GJLN                
  105  D  K  .  .  .  ['D', 'K']           GJLN                
  106  D  K  .  .  .  ['D', 'K']           GJLN                
  107  D  K  .  .  .  ['D', 'K']           GJLN                
  108  D  K  .  .  .  ['D', 'K']           GJLN                
  109  D  K  .  .  .  ['D', 'K']           GJLN                
  110  D  K  .  .  .  ['D', 'K']           GJLN                
  111  D  K  .  .  .  ['D', 'K']           GJLN                
  112  D  K  .  .  .  ['D', 'K']           GJLN                
  113  D  K  .  .  .  ['D', 'K']           GJLN                
  114  D  K  .  .  .  ['D', 'K']           GJLN                
  115  D  K  .  .  .  ['D', 'K']           GJLN                
  116  D  K  .  .  .  ['D', 'K']           GJLN                
  117  D  K  .  .  .  ['D', 'K']           GJLN                
  118  D  K  .  .  .  ['D', 'K']           GJLN                
  119  D  K  .  .  .  ['D', 'K']           GJLN                
  120  D  K  .  .  .  ['D', 'K']           GJLN                
  121  D  K  .  .  .  ['D', 'K']           GJLN                
  122  D  K  .  .  .  ['D', 'K']           GJLN                
  123  D  K  .  .  .  ['D', 'K']           GJLN                
  124  D  K  .  .  .  ['D', 'K']           GJLN                
  125  D  K  .  .  .  ['D', 'K']           GJLN                
  126  D  K  .  .  .  ['D', 'K']           GJLN                
  127  D  K  .  .  .  ['D', 'K']           GJLN                
  128  D  K  .  .  .  ['D', 'K']           GJLN                
  129  D  K  .  .  .  ['D', 'K']           GJLN                
  130  D  K  .  .  .  ['D', 'K']           GJLN                
  131  D  K  .  .  .  ['D', 'K']           GJLN                
  132  D  K  .  .  .  ['D', 'K']           GJLN                
  133  D  K  .  .  .  ['D', 'K']           GJLN                
  134  D  K  .  .  .  ['D', 'K']           GJLN                
  135  D  K  .  .  .  ['D', 'K']           GJLN                
('D', 136, 'STOP')
('F', 136, 'START', {'K': 141, 'F': 202}, ['F', 'K', 'P'])
('P', 136, 'START', {'P': 212, 'F': 202, 'K': 141}, ['F', 'K', 'P'])
  136  F  K  P  .  .  ['F', 'K', 'P']      GJLND               
  137  F  K  P  .  .  ['F', 'K', 'P']      GJLND               
  138  F  K  P  .  .  ['F', 'K', 'P']      GJLND               
  139  F  K  P  .  .  ['F', 'K', 'P']      GJLND               
  140  F  K  P  .  .  ['F', 'K', 'P']      GJLND               
('K', 141, 'STOP')
('T', 141, 'START', {'P': 212, 'T': 221, 'F': 202}, ['F', 'P', 'T', 'X', 'Y'])
('X', 141, 'START', {'P': 212, 'T': 221, 'F': 202, 'X': 225}, ['F', 'P', 'T', 'X', 'Y'])
('Y', 141, 'START', {'P': 212, 'T': 221, 'F': 202, 'Y': 226, 'X': 225}, ['F', 'P', 'T', 'X', 'Y'])
  141  F  P  T  X  Y  ['F', 'P', 'T', 'X', 'Y'] GJLNDK              
  142  F  P  T  X  Y  ['F', 'P', 'T', 'X', 'Y'] GJLNDK              
  143  F  P  T  X  Y  ['F', 'P', 'T', 'X', 'Y'] GJLNDK              
  144  F  P  T  X  Y  ['F', 'P', 'T', 'X', 'Y'] GJLNDK              
  145  F  P  T  X  Y  ['F', 'P', 'T', 'X', 'Y'] GJLNDK              
  146  F  P  T  X  Y  ['F', 'P', 'T', 'X', 'Y'] GJLNDK              
  147  F  P  T  X  Y  ['F', 'P', 'T', 'X', 'Y'] GJLNDK              
  148  F  P  T  X  Y  ['F', 'P', 'T', 'X', 'Y'] GJLNDK              
  149  F  P  T  X  Y  ['F', 'P', 'T', 'X', 'Y'] GJLNDK              
  150  F  P  T  X  Y  ['F', 'P', 'T', 'X', 'Y'] GJLNDK              
  151  F  P  T  X  Y  ['F', 'P', 'T', 'X', 'Y'] GJLNDK              
  152  F  P  T  X  Y  ['F', 'P', 'T', 'X', 'Y'] GJLNDK              
  153  F  P  T  X  Y  ['F', 'P', 'T', 'X', 'Y'] GJLNDK              
  154  F  P  T  X  Y  ['F', 'P', 'T', 'X', 'Y'] GJLNDK              
  155  F  P  T  X  Y  ['F', 'P', 'T', 'X', 'Y'] GJLNDK              
  156  F  P  T  X  Y  ['F', 'P', 'T', 'X', 'Y'] GJLNDK              
  157  F  P  T  X  Y  ['F', 'P', 'T', 'X', 'Y'] GJLNDK              
  158  F  P  T  X  Y  ['F', 'P', 'T', 'X', 'Y'] GJLNDK              
  159  F  P  T  X  Y  ['F', 'P', 'T', 'X', 'Y'] GJLNDK              
  160  F  P  T  X  Y  ['F', 'P', 'T', 'X', 'Y'] GJLNDK              
  161  F  P  T  X  Y  ['F', 'P', 'T', 'X', 'Y'] GJLNDK              
  162  F  P  T  X  Y  ['F', 'P', 'T', 'X', 'Y'] GJLNDK              
  163  F  P  T  X  Y  ['F', 'P', 'T', 'X', 'Y'] GJLNDK              
  164  F  P  T  X  Y  ['F', 'P', 'T', 'X', 'Y'] GJLNDK              
  165  F  P  T  X  Y  ['F', 'P', 'T', 'X', 'Y'] GJLNDK              
  166  F  P  T  X  Y  ['F', 'P', 'T', 'X', 'Y'] GJLNDK              
  167  F  P  T  X  Y  ['F', 'P', 'T', 'X', 'Y'] GJLNDK              
  168  F  P  T  X  Y  ['F', 'P', 'T', 'X', 'Y'] GJLNDK              
  169  F  P  T  X  Y  ['F', 'P', 'T', 'X', 'Y'] GJLNDK              
  170  F  P  T  X  Y  ['F', 'P', 'T', 'X', 'Y'] GJLNDK              
  171  F  P  T  X  Y  ['F', 'P', 'T', 'X', 'Y'] GJLNDK              
  172  F  P  T  X  Y  ['F', 'P', 'T', 'X', 'Y'] GJLNDK              
  173  F  P  T  X  Y  ['F', 'P', 'T', 'X', 'Y'] GJLNDK              
  174  F  P  T  X  Y  ['F', 'P', 'T', 'X', 'Y'] GJLNDK              
  175  F  P  T  X  Y  ['F', 'P', 'T', 'X', 'Y'] GJLNDK              
  176  F  P  T  X  Y  ['F', 'P', 'T', 'X', 'Y'] GJLNDK              
  177  F  P  T  X  Y  ['F', 'P', 'T', 'X', 'Y'] GJLNDK              
  178  F  P  T  X  Y  ['F', 'P', 'T', 'X', 'Y'] GJLNDK              
  179  F  P  T  X  Y  ['F', 'P', 'T', 'X', 'Y'] GJLNDK              
  180  F  P  T  X  Y  ['F', 'P', 'T', 'X', 'Y'] GJLNDK              
  181  F  P  T  X  Y  ['F', 'P', 'T', 'X', 'Y'] GJLNDK              
  182  F  P  T  X  Y  ['F', 'P', 'T', 'X', 'Y'] GJLNDK              
  183  F  P  T  X  Y  ['F', 'P', 'T', 'X', 'Y'] GJLNDK              
  184  F  P  T  X  Y  ['F', 'P', 'T', 'X', 'Y'] GJLNDK              
  185  F  P  T  X  Y  ['F', 'P', 'T', 'X', 'Y'] GJLNDK              
  186  F  P  T  X  Y  ['F', 'P', 'T', 'X', 'Y'] GJLNDK              
  187  F  P  T  X  Y  ['F', 'P', 'T', 'X', 'Y'] GJLNDK              
  188  F  P  T  X  Y  ['F', 'P', 'T', 'X', 'Y'] GJLNDK              
  189  F  P  T  X  Y  ['F', 'P', 'T', 'X', 'Y'] GJLNDK              
  190  F  P  T  X  Y  ['F', 'P', 'T', 'X', 'Y'] GJLNDK              
  191  F  P  T  X  Y  ['F', 'P', 'T', 'X', 'Y'] GJLNDK              
  192  F  P  T  X  Y  ['F', 'P', 'T', 'X', 'Y'] GJLNDK              
  193  F  P  T  X  Y  ['F', 'P', 'T', 'X', 'Y'] GJLNDK              
  194  F  P  T  X  Y  ['F', 'P', 'T', 'X', 'Y'] GJLNDK              
  195  F  P  T  X  Y  ['F', 'P', 'T', 'X', 'Y'] GJLNDK              
  196  F  P  T  X  Y  ['F', 'P', 'T', 'X', 'Y'] GJLNDK              
  197  F  P  T  X  Y  ['F', 'P', 'T', 'X', 'Y'] GJLNDK              
  198  F  P  T  X  Y  ['F', 'P', 'T', 'X', 'Y'] GJLNDK              
  199  F  P  T  X  Y  ['F', 'P', 'T', 'X', 'Y'] GJLNDK              
  200  F  P  T  X  Y  ['F', 'P', 'T', 'X', 'Y'] GJLNDK              
  201  F  P  T  X  Y  ['F', 'P', 'T', 'X', 'Y'] GJLNDK              
('F', 202, 'STOP')
  202  P  T  X  Y  .  ['P', 'T', 'X', 'Y'] GJLNDKF             
  203  P  T  X  Y  .  ['P', 'T', 'X', 'Y'] GJLNDKF             
  204  P  T  X  Y  .  ['P', 'T', 'X', 'Y'] GJLNDKF             
  205  P  T  X  Y  .  ['P', 'T', 'X', 'Y'] GJLNDKF             
  206  P  T  X  Y  .  ['P', 'T', 'X', 'Y'] GJLNDKF             
  207  P  T  X  Y  .  ['P', 'T', 'X', 'Y'] GJLNDKF             
  208  P  T  X  Y  .  ['P', 'T', 'X', 'Y'] GJLNDKF             
  209  P  T  X  Y  .  ['P', 'T', 'X', 'Y'] GJLNDKF             
  210  P  T  X  Y  .  ['P', 'T', 'X', 'Y'] GJLNDKF             
  211  P  T  X  Y  .  ['P', 'T', 'X', 'Y'] GJLNDKF             
('P', 212, 'STOP')
  212  T  X  Y  .  .  ['T', 'X', 'Y']      GJLNDKFP            
  213  T  X  Y  .  .  ['T', 'X', 'Y']      GJLNDKFP            
  214  T  X  Y  .  .  ['T', 'X', 'Y']      GJLNDKFP            
  215  T  X  Y  .  .  ['T', 'X', 'Y']      GJLNDKFP            
  216  T  X  Y  .  .  ['T', 'X', 'Y']      GJLNDKFP            
  217  T  X  Y  .  .  ['T', 'X', 'Y']      GJLNDKFP            
  218  T  X  Y  .  .  ['T', 'X', 'Y']      GJLNDKFP            
  219  T  X  Y  .  .  ['T', 'X', 'Y']      GJLNDKFP            
  220  T  X  Y  .  .  ['T', 'X', 'Y']      GJLNDKFP            
('T', 221, 'STOP')
('M', 221, 'START', {'Y': 226, 'X': 225, 'M': 294}, ['M', 'X', 'Y'])
  221  M  X  Y  .  .  ['M', 'X', 'Y']      GJLNDKFPT           
  222  M  X  Y  .  .  ['M', 'X', 'Y']      GJLNDKFPT           
  223  M  X  Y  .  .  ['M', 'X', 'Y']      GJLNDKFPT           
  224  M  X  Y  .  .  ['M', 'X', 'Y']      GJLNDKFPT           
('X', 225, 'STOP')
('I', 225, 'START', {'I': 294, 'Y': 226, 'M': 294}, ['I', 'M', 'Y'])
  225  I  M  Y  .  .  ['I', 'M', 'Y']      GJLNDKFPTX          
('Y', 226, 'STOP')
('H', 226, 'START', {'I': 294, 'H': 294, 'M': 294}, ['H', 'I', 'M'])
  226  H  I  M  .  .  ['H', 'I', 'M']      GJLNDKFPTXY         
  227  H  I  M  .  .  ['H', 'I', 'M']      GJLNDKFPTXY         
  228  H  I  M  .  .  ['H', 'I', 'M']      GJLNDKFPTXY         
  229  H  I  M  .  .  ['H', 'I', 'M']      GJLNDKFPTXY         
  230  H  I  M  .  .  ['H', 'I', 'M']      GJLNDKFPTXY         
  231  H  I  M  .  .  ['H', 'I', 'M']      GJLNDKFPTXY         
  232  H  I  M  .  .  ['H', 'I', 'M']      GJLNDKFPTXY         
  233  H  I  M  .  .  ['H', 'I', 'M']      GJLNDKFPTXY         
  234  H  I  M  .  .  ['H', 'I', 'M']      GJLNDKFPTXY         
  235  H  I  M  .  .  ['H', 'I', 'M']      GJLNDKFPTXY         
  236  H  I  M  .  .  ['H', 'I', 'M']      GJLNDKFPTXY         
  237  H  I  M  .  .  ['H', 'I', 'M']      GJLNDKFPTXY         
  238  H  I  M  .  .  ['H', 'I', 'M']      GJLNDKFPTXY         
  239  H  I  M  .  .  ['H', 'I', 'M']      GJLNDKFPTXY         
  240  H  I  M  .  .  ['H', 'I', 'M']      GJLNDKFPTXY         
  241  H  I  M  .  .  ['H', 'I', 'M']      GJLNDKFPTXY         
  242  H  I  M  .  .  ['H', 'I', 'M']      GJLNDKFPTXY         
  243  H  I  M  .  .  ['H', 'I', 'M']      GJLNDKFPTXY         
  244  H  I  M  .  .  ['H', 'I', 'M']      GJLNDKFPTXY         
  245  H  I  M  .  .  ['H', 'I', 'M']      GJLNDKFPTXY         
  246  H  I  M  .  .  ['H', 'I', 'M']      GJLNDKFPTXY         
  247  H  I  M  .  .  ['H', 'I', 'M']      GJLNDKFPTXY         
  248  H  I  M  .  .  ['H', 'I', 'M']      GJLNDKFPTXY         
  249  H  I  M  .  .  ['H', 'I', 'M']      GJLNDKFPTXY         
  250  H  I  M  .  .  ['H', 'I', 'M']      GJLNDKFPTXY         
  251  H  I  M  .  .  ['H', 'I', 'M']      GJLNDKFPTXY         
  252  H  I  M  .  .  ['H', 'I', 'M']      GJLNDKFPTXY         
  253  H  I  M  .  .  ['H', 'I', 'M']      GJLNDKFPTXY         
  254  H  I  M  .  .  ['H', 'I', 'M']      GJLNDKFPTXY         
  255  H  I  M  .  .  ['H', 'I', 'M']      GJLNDKFPTXY         
  256  H  I  M  .  .  ['H', 'I', 'M']      GJLNDKFPTXY         
  257  H  I  M  .  .  ['H', 'I', 'M']      GJLNDKFPTXY         
  258  H  I  M  .  .  ['H', 'I', 'M']      GJLNDKFPTXY         
  259  H  I  M  .  .  ['H', 'I', 'M']      GJLNDKFPTXY         
  260  H  I  M  .  .  ['H', 'I', 'M']      GJLNDKFPTXY         
  261  H  I  M  .  .  ['H', 'I', 'M']      GJLNDKFPTXY         
  262  H  I  M  .  .  ['H', 'I', 'M']      GJLNDKFPTXY         
  263  H  I  M  .  .  ['H', 'I', 'M']      GJLNDKFPTXY         
  264  H  I  M  .  .  ['H', 'I', 'M']      GJLNDKFPTXY         
  265  H  I  M  .  .  ['H', 'I', 'M']      GJLNDKFPTXY         
  266  H  I  M  .  .  ['H', 'I', 'M']      GJLNDKFPTXY         
  267  H  I  M  .  .  ['H', 'I', 'M']      GJLNDKFPTXY         
  268  H  I  M  .  .  ['H', 'I', 'M']      GJLNDKFPTXY         
  269  H  I  M  .  .  ['H', 'I', 'M']      GJLNDKFPTXY         
  270  H  I  M  .  .  ['H', 'I', 'M']      GJLNDKFPTXY         
  271  H  I  M  .  .  ['H', 'I', 'M']      GJLNDKFPTXY         
  272  H  I  M  .  .  ['H', 'I', 'M']      GJLNDKFPTXY         
  273  H  I  M  .  .  ['H', 'I', 'M']      GJLNDKFPTXY         
  274  H  I  M  .  .  ['H', 'I', 'M']      GJLNDKFPTXY         
  275  H  I  M  .  .  ['H', 'I', 'M']      GJLNDKFPTXY         
  276  H  I  M  .  .  ['H', 'I', 'M']      GJLNDKFPTXY         
  277  H  I  M  .  .  ['H', 'I', 'M']      GJLNDKFPTXY         
  278  H  I  M  .  .  ['H', 'I', 'M']      GJLNDKFPTXY         
  279  H  I  M  .  .  ['H', 'I', 'M']      GJLNDKFPTXY         
  280  H  I  M  .  .  ['H', 'I', 'M']      GJLNDKFPTXY         
  281  H  I  M  .  .  ['H', 'I', 'M']      GJLNDKFPTXY         
  282  H  I  M  .  .  ['H', 'I', 'M']      GJLNDKFPTXY         
  283  H  I  M  .  .  ['H', 'I', 'M']      GJLNDKFPTXY         
  284  H  I  M  .  .  ['H', 'I', 'M']      GJLNDKFPTXY         
  285  H  I  M  .  .  ['H', 'I', 'M']      GJLNDKFPTXY         
  286  H  I  M  .  .  ['H', 'I', 'M']      GJLNDKFPTXY         
  287  H  I  M  .  .  ['H', 'I', 'M']      GJLNDKFPTXY         
  288  H  I  M  .  .  ['H', 'I', 'M']      GJLNDKFPTXY         
  289  H  I  M  .  .  ['H', 'I', 'M']      GJLNDKFPTXY         
  290  H  I  M  .  .  ['H', 'I', 'M']      GJLNDKFPTXY         
  291  H  I  M  .  .  ['H', 'I', 'M']      GJLNDKFPTXY         
  292  H  I  M  .  .  ['H', 'I', 'M']      GJLNDKFPTXY         
  293  H  I  M  .  .  ['H', 'I', 'M']      GJLNDKFPTXY         
('I', 294, 'STOP')
('H', 294, 'STOP')
('M', 294, 'STOP')
('Q', 294, 'START', {'Q': 371}, ['Q', 'U', 'V'])
('U', 294, 'START', {'Q': 371, 'U': 375}, ['Q', 'U', 'V'])
('V', 294, 'START', {'Q': 371, 'U': 375, 'V': 376}, ['Q', 'U', 'V'])
  294  Q  U  V  .  .  ['Q', 'U', 'V']      GJLNDKFPTXYIHM      
  295  Q  U  V  .  .  ['Q', 'U', 'V']      GJLNDKFPTXYIHM      
  296  Q  U  V  .  .  ['Q', 'U', 'V']      GJLNDKFPTXYIHM      
  297  Q  U  V  .  .  ['Q', 'U', 'V']      GJLNDKFPTXYIHM      
  298  Q  U  V  .  .  ['Q', 'U', 'V']      GJLNDKFPTXYIHM      
  299  Q  U  V  .  .  ['Q', 'U', 'V']      GJLNDKFPTXYIHM      
  300  Q  U  V  .  .  ['Q', 'U', 'V']      GJLNDKFPTXYIHM      
  301  Q  U  V  .  .  ['Q', 'U', 'V']      GJLNDKFPTXYIHM      
  302  Q  U  V  .  .  ['Q', 'U', 'V']      GJLNDKFPTXYIHM      
  303  Q  U  V  .  .  ['Q', 'U', 'V']      GJLNDKFPTXYIHM      
  304  Q  U  V  .  .  ['Q', 'U', 'V']      GJLNDKFPTXYIHM      
  305  Q  U  V  .  .  ['Q', 'U', 'V']      GJLNDKFPTXYIHM      
  306  Q  U  V  .  .  ['Q', 'U', 'V']      GJLNDKFPTXYIHM      
  307  Q  U  V  .  .  ['Q', 'U', 'V']      GJLNDKFPTXYIHM      
  308  Q  U  V  .  .  ['Q', 'U', 'V']      GJLNDKFPTXYIHM      
  309  Q  U  V  .  .  ['Q', 'U', 'V']      GJLNDKFPTXYIHM      
  310  Q  U  V  .  .  ['Q', 'U', 'V']      GJLNDKFPTXYIHM      
  311  Q  U  V  .  .  ['Q', 'U', 'V']      GJLNDKFPTXYIHM      
  312  Q  U  V  .  .  ['Q', 'U', 'V']      GJLNDKFPTXYIHM      
  313  Q  U  V  .  .  ['Q', 'U', 'V']      GJLNDKFPTXYIHM      
  314  Q  U  V  .  .  ['Q', 'U', 'V']      GJLNDKFPTXYIHM      
  315  Q  U  V  .  .  ['Q', 'U', 'V']      GJLNDKFPTXYIHM      
  316  Q  U  V  .  .  ['Q', 'U', 'V']      GJLNDKFPTXYIHM      
  317  Q  U  V  .  .  ['Q', 'U', 'V']      GJLNDKFPTXYIHM      
  318  Q  U  V  .  .  ['Q', 'U', 'V']      GJLNDKFPTXYIHM      
  319  Q  U  V  .  .  ['Q', 'U', 'V']      GJLNDKFPTXYIHM      
  320  Q  U  V  .  .  ['Q', 'U', 'V']      GJLNDKFPTXYIHM      
  321  Q  U  V  .  .  ['Q', 'U', 'V']      GJLNDKFPTXYIHM      
  322  Q  U  V  .  .  ['Q', 'U', 'V']      GJLNDKFPTXYIHM      
  323  Q  U  V  .  .  ['Q', 'U', 'V']      GJLNDKFPTXYIHM      
  324  Q  U  V  .  .  ['Q', 'U', 'V']      GJLNDKFPTXYIHM      
  325  Q  U  V  .  .  ['Q', 'U', 'V']      GJLNDKFPTXYIHM      
  326  Q  U  V  .  .  ['Q', 'U', 'V']      GJLNDKFPTXYIHM      
  327  Q  U  V  .  .  ['Q', 'U', 'V']      GJLNDKFPTXYIHM      
  328  Q  U  V  .  .  ['Q', 'U', 'V']      GJLNDKFPTXYIHM      
  329  Q  U  V  .  .  ['Q', 'U', 'V']      GJLNDKFPTXYIHM      
  330  Q  U  V  .  .  ['Q', 'U', 'V']      GJLNDKFPTXYIHM      
  331  Q  U  V  .  .  ['Q', 'U', 'V']      GJLNDKFPTXYIHM      
  332  Q  U  V  .  .  ['Q', 'U', 'V']      GJLNDKFPTXYIHM      
  333  Q  U  V  .  .  ['Q', 'U', 'V']      GJLNDKFPTXYIHM      
  334  Q  U  V  .  .  ['Q', 'U', 'V']      GJLNDKFPTXYIHM      
  335  Q  U  V  .  .  ['Q', 'U', 'V']      GJLNDKFPTXYIHM      
  336  Q  U  V  .  .  ['Q', 'U', 'V']      GJLNDKFPTXYIHM      
  337  Q  U  V  .  .  ['Q', 'U', 'V']      GJLNDKFPTXYIHM      
  338  Q  U  V  .  .  ['Q', 'U', 'V']      GJLNDKFPTXYIHM      
  339  Q  U  V  .  .  ['Q', 'U', 'V']      GJLNDKFPTXYIHM      
  340  Q  U  V  .  .  ['Q', 'U', 'V']      GJLNDKFPTXYIHM      
  341  Q  U  V  .  .  ['Q', 'U', 'V']      GJLNDKFPTXYIHM      
  342  Q  U  V  .  .  ['Q', 'U', 'V']      GJLNDKFPTXYIHM      
  343  Q  U  V  .  .  ['Q', 'U', 'V']      GJLNDKFPTXYIHM      
  344  Q  U  V  .  .  ['Q', 'U', 'V']      GJLNDKFPTXYIHM      
  345  Q  U  V  .  .  ['Q', 'U', 'V']      GJLNDKFPTXYIHM      
  346  Q  U  V  .  .  ['Q', 'U', 'V']      GJLNDKFPTXYIHM      
  347  Q  U  V  .  .  ['Q', 'U', 'V']      GJLNDKFPTXYIHM      
  348  Q  U  V  .  .  ['Q', 'U', 'V']      GJLNDKFPTXYIHM      
  349  Q  U  V  .  .  ['Q', 'U', 'V']      GJLNDKFPTXYIHM      
  350  Q  U  V  .  .  ['Q', 'U', 'V']      GJLNDKFPTXYIHM      
  351  Q  U  V  .  .  ['Q', 'U', 'V']      GJLNDKFPTXYIHM      
  352  Q  U  V  .  .  ['Q', 'U', 'V']      GJLNDKFPTXYIHM      
  353  Q  U  V  .  .  ['Q', 'U', 'V']      GJLNDKFPTXYIHM      
  354  Q  U  V  .  .  ['Q', 'U', 'V']      GJLNDKFPTXYIHM      
  355  Q  U  V  .  .  ['Q', 'U', 'V']      GJLNDKFPTXYIHM      
  356  Q  U  V  .  .  ['Q', 'U', 'V']      GJLNDKFPTXYIHM      
  357  Q  U  V  .  .  ['Q', 'U', 'V']      GJLNDKFPTXYIHM      
  358  Q  U  V  .  .  ['Q', 'U', 'V']      GJLNDKFPTXYIHM      
  359  Q  U  V  .  .  ['Q', 'U', 'V']      GJLNDKFPTXYIHM      
  360  Q  U  V  .  .  ['Q', 'U', 'V']      GJLNDKFPTXYIHM      
  361  Q  U  V  .  .  ['Q', 'U', 'V']      GJLNDKFPTXYIHM      
  362  Q  U  V  .  .  ['Q', 'U', 'V']      GJLNDKFPTXYIHM      
  363  Q  U  V  .  .  ['Q', 'U', 'V']      GJLNDKFPTXYIHM      
  364  Q  U  V  .  .  ['Q', 'U', 'V']      GJLNDKFPTXYIHM      
  365  Q  U  V  .  .  ['Q', 'U', 'V']      GJLNDKFPTXYIHM      
  366  Q  U  V  .  .  ['Q', 'U', 'V']      GJLNDKFPTXYIHM      
  367  Q  U  V  .  .  ['Q', 'U', 'V']      GJLNDKFPTXYIHM      
  368  Q  U  V  .  .  ['Q', 'U', 'V']      GJLNDKFPTXYIHM      
  369  Q  U  V  .  .  ['Q', 'U', 'V']      GJLNDKFPTXYIHM      
  370  Q  U  V  .  .  ['Q', 'U', 'V']      GJLNDKFPTXYIHM      
('Q', 371, 'STOP')
  371  U  V  .  .  .  ['U', 'V']           GJLNDKFPTXYIHMQ     
  372  U  V  .  .  .  ['U', 'V']           GJLNDKFPTXYIHMQ     
  373  U  V  .  .  .  ['U', 'V']           GJLNDKFPTXYIHMQ     
  374  U  V  .  .  .  ['U', 'V']           GJLNDKFPTXYIHMQ     
('U', 375, 'STOP')
  375  V  .  .  .  .  ['V']                GJLNDKFPTXYIHMQU    
('V', 376, 'STOP')
('R', 376, 'START', {'R': 454}, ['R'])
  376  R  .  .  .  .  ['R']                GJLNDKFPTXYIHMQUV   
  377  R  .  .  .  .  ['R']                GJLNDKFPTXYIHMQUV   
  378  R  .  .  .  .  ['R']                GJLNDKFPTXYIHMQUV   
  379  R  .  .  .  .  ['R']                GJLNDKFPTXYIHMQUV   
  380  R  .  .  .  .  ['R']                GJLNDKFPTXYIHMQUV   
  381  R  .  .  .  .  ['R']                GJLNDKFPTXYIHMQUV   
  382  R  .  .  .  .  ['R']                GJLNDKFPTXYIHMQUV   
  383  R  .  .  .  .  ['R']                GJLNDKFPTXYIHMQUV   
  384  R  .  .  .  .  ['R']                GJLNDKFPTXYIHMQUV   
  385  R  .  .  .  .  ['R']                GJLNDKFPTXYIHMQUV   
  386  R  .  .  .  .  ['R']                GJLNDKFPTXYIHMQUV   
  387  R  .  .  .  .  ['R']                GJLNDKFPTXYIHMQUV   
  388  R  .  .  .  .  ['R']                GJLNDKFPTXYIHMQUV   
  389  R  .  .  .  .  ['R']                GJLNDKFPTXYIHMQUV   
  390  R  .  .  .  .  ['R']                GJLNDKFPTXYIHMQUV   
  391  R  .  .  .  .  ['R']                GJLNDKFPTXYIHMQUV   
  392  R  .  .  .  .  ['R']                GJLNDKFPTXYIHMQUV   
  393  R  .  .  .  .  ['R']                GJLNDKFPTXYIHMQUV   
  394  R  .  .  .  .  ['R']                GJLNDKFPTXYIHMQUV   
  395  R  .  .  .  .  ['R']                GJLNDKFPTXYIHMQUV   
  396  R  .  .  .  .  ['R']                GJLNDKFPTXYIHMQUV   
  397  R  .  .  .  .  ['R']                GJLNDKFPTXYIHMQUV   
  398  R  .  .  .  .  ['R']                GJLNDKFPTXYIHMQUV   
  399  R  .  .  .  .  ['R']                GJLNDKFPTXYIHMQUV   
  400  R  .  .  .  .  ['R']                GJLNDKFPTXYIHMQUV   
  401  R  .  .  .  .  ['R']                GJLNDKFPTXYIHMQUV   
  402  R  .  .  .  .  ['R']                GJLNDKFPTXYIHMQUV   
  403  R  .  .  .  .  ['R']                GJLNDKFPTXYIHMQUV   
  404  R  .  .  .  .  ['R']                GJLNDKFPTXYIHMQUV   
  405  R  .  .  .  .  ['R']                GJLNDKFPTXYIHMQUV   
  406  R  .  .  .  .  ['R']                GJLNDKFPTXYIHMQUV   
  407  R  .  .  .  .  ['R']                GJLNDKFPTXYIHMQUV   
  408  R  .  .  .  .  ['R']                GJLNDKFPTXYIHMQUV   
  409  R  .  .  .  .  ['R']                GJLNDKFPTXYIHMQUV   
  410  R  .  .  .  .  ['R']                GJLNDKFPTXYIHMQUV   
  411  R  .  .  .  .  ['R']                GJLNDKFPTXYIHMQUV   
  412  R  .  .  .  .  ['R']                GJLNDKFPTXYIHMQUV   
  413  R  .  .  .  .  ['R']                GJLNDKFPTXYIHMQUV   
  414  R  .  .  .  .  ['R']                GJLNDKFPTXYIHMQUV   
  415  R  .  .  .  .  ['R']                GJLNDKFPTXYIHMQUV   
  416  R  .  .  .  .  ['R']                GJLNDKFPTXYIHMQUV   
  417  R  .  .  .  .  ['R']                GJLNDKFPTXYIHMQUV   
  418  R  .  .  .  .  ['R']                GJLNDKFPTXYIHMQUV   
  419  R  .  .  .  .  ['R']                GJLNDKFPTXYIHMQUV   
  420  R  .  .  .  .  ['R']                GJLNDKFPTXYIHMQUV   
  421  R  .  .  .  .  ['R']                GJLNDKFPTXYIHMQUV   
  422  R  .  .  .  .  ['R']                GJLNDKFPTXYIHMQUV   
  423  R  .  .  .  .  ['R']                GJLNDKFPTXYIHMQUV   
  424  R  .  .  .  .  ['R']                GJLNDKFPTXYIHMQUV   
  425  R  .  .  .  .  ['R']                GJLNDKFPTXYIHMQUV   
  426  R  .  .  .  .  ['R']                GJLNDKFPTXYIHMQUV   
  427  R  .  .  .  .  ['R']                GJLNDKFPTXYIHMQUV   
  428  R  .  .  .  .  ['R']                GJLNDKFPTXYIHMQUV   
  429  R  .  .  .  .  ['R']                GJLNDKFPTXYIHMQUV   
  430  R  .  .  .  .  ['R']                GJLNDKFPTXYIHMQUV   
  431  R  .  .  .  .  ['R']                GJLNDKFPTXYIHMQUV   
  432  R  .  .  .  .  ['R']                GJLNDKFPTXYIHMQUV   
  433  R  .  .  .  .  ['R']                GJLNDKFPTXYIHMQUV   
  434  R  .  .  .  .  ['R']                GJLNDKFPTXYIHMQUV   
  435  R  .  .  .  .  ['R']                GJLNDKFPTXYIHMQUV   
  436  R  .  .  .  .  ['R']                GJLNDKFPTXYIHMQUV   
  437  R  .  .  .  .  ['R']                GJLNDKFPTXYIHMQUV   
  438  R  .  .  .  .  ['R']                GJLNDKFPTXYIHMQUV   
  439  R  .  .  .  .  ['R']                GJLNDKFPTXYIHMQUV   
  440  R  .  .  .  .  ['R']                GJLNDKFPTXYIHMQUV   
  441  R  .  .  .  .  ['R']                GJLNDKFPTXYIHMQUV   
  442  R  .  .  .  .  ['R']                GJLNDKFPTXYIHMQUV   
  443  R  .  .  .  .  ['R']                GJLNDKFPTXYIHMQUV   
  444  R  .  .  .  .  ['R']                GJLNDKFPTXYIHMQUV   
  445  R  .  .  .  .  ['R']                GJLNDKFPTXYIHMQUV   
  446  R  .  .  .  .  ['R']                GJLNDKFPTXYIHMQUV   
  447  R  .  .  .  .  ['R']                GJLNDKFPTXYIHMQUV   
  448  R  .  .  .  .  ['R']                GJLNDKFPTXYIHMQUV   
  449  R  .  .  .  .  ['R']                GJLNDKFPTXYIHMQUV   
  450  R  .  .  .  .  ['R']                GJLNDKFPTXYIHMQUV   
  451  R  .  .  .  .  ['R']                GJLNDKFPTXYIHMQUV   
  452  R  .  .  .  .  ['R']                GJLNDKFPTXYIHMQUV   
  453  R  .  .  .  .  ['R']                GJLNDKFPTXYIHMQUV   
('R', 454, 'STOP')
('E', 454, 'START', {'E': 519}, ['E'])
  454  E  .  .  .  .  ['E']                GJLNDKFPTXYIHMQUVR  
  455  E  .  .  .  .  ['E']                GJLNDKFPTXYIHMQUVR  
  456  E  .  .  .  .  ['E']                GJLNDKFPTXYIHMQUVR  
  457  E  .  .  .  .  ['E']                GJLNDKFPTXYIHMQUVR  
  458  E  .  .  .  .  ['E']                GJLNDKFPTXYIHMQUVR  
  459  E  .  .  .  .  ['E']                GJLNDKFPTXYIHMQUVR  
  460  E  .  .  .  .  ['E']                GJLNDKFPTXYIHMQUVR  
  461  E  .  .  .  .  ['E']                GJLNDKFPTXYIHMQUVR  
  462  E  .  .  .  .  ['E']                GJLNDKFPTXYIHMQUVR  
  463  E  .  .  .  .  ['E']                GJLNDKFPTXYIHMQUVR  
  464  E  .  .  .  .  ['E']                GJLNDKFPTXYIHMQUVR  
  465  E  .  .  .  .  ['E']                GJLNDKFPTXYIHMQUVR  
  466  E  .  .  .  .  ['E']                GJLNDKFPTXYIHMQUVR  
  467  E  .  .  .  .  ['E']                GJLNDKFPTXYIHMQUVR  
  468  E  .  .  .  .  ['E']                GJLNDKFPTXYIHMQUVR  
  469  E  .  .  .  .  ['E']                GJLNDKFPTXYIHMQUVR  
  470  E  .  .  .  .  ['E']                GJLNDKFPTXYIHMQUVR  
  471  E  .  .  .  .  ['E']                GJLNDKFPTXYIHMQUVR  
  472  E  .  .  .  .  ['E']                GJLNDKFPTXYIHMQUVR  
  473  E  .  .  .  .  ['E']                GJLNDKFPTXYIHMQUVR  
  474  E  .  .  .  .  ['E']                GJLNDKFPTXYIHMQUVR  
  475  E  .  .  .  .  ['E']                GJLNDKFPTXYIHMQUVR  
  476  E  .  .  .  .  ['E']                GJLNDKFPTXYIHMQUVR  
  477  E  .  .  .  .  ['E']                GJLNDKFPTXYIHMQUVR  
  478  E  .  .  .  .  ['E']                GJLNDKFPTXYIHMQUVR  
  479  E  .  .  .  .  ['E']                GJLNDKFPTXYIHMQUVR  
  480  E  .  .  .  .  ['E']                GJLNDKFPTXYIHMQUVR  
  481  E  .  .  .  .  ['E']                GJLNDKFPTXYIHMQUVR  
  482  E  .  .  .  .  ['E']                GJLNDKFPTXYIHMQUVR  
  483  E  .  .  .  .  ['E']                GJLNDKFPTXYIHMQUVR  
  484  E  .  .  .  .  ['E']                GJLNDKFPTXYIHMQUVR  
  485  E  .  .  .  .  ['E']                GJLNDKFPTXYIHMQUVR  
  486  E  .  .  .  .  ['E']                GJLNDKFPTXYIHMQUVR  
  487  E  .  .  .  .  ['E']                GJLNDKFPTXYIHMQUVR  
  488  E  .  .  .  .  ['E']                GJLNDKFPTXYIHMQUVR  
  489  E  .  .  .  .  ['E']                GJLNDKFPTXYIHMQUVR  
  490  E  .  .  .  .  ['E']                GJLNDKFPTXYIHMQUVR  
  491  E  .  .  .  .  ['E']                GJLNDKFPTXYIHMQUVR  
  492  E  .  .  .  .  ['E']                GJLNDKFPTXYIHMQUVR  
  493  E  .  .  .  .  ['E']                GJLNDKFPTXYIHMQUVR  
  494  E  .  .  .  .  ['E']                GJLNDKFPTXYIHMQUVR  
  495  E  .  .  .  .  ['E']                GJLNDKFPTXYIHMQUVR  
  496  E  .  .  .  .  ['E']                GJLNDKFPTXYIHMQUVR  
  497  E  .  .  .  .  ['E']                GJLNDKFPTXYIHMQUVR  
  498  E  .  .  .  .  ['E']                GJLNDKFPTXYIHMQUVR  
  499  E  .  .  .  .  ['E']                GJLNDKFPTXYIHMQUVR  
  500  E  .  .  .  .  ['E']                GJLNDKFPTXYIHMQUVR  
  501  E  .  .  .  .  ['E']                GJLNDKFPTXYIHMQUVR  
  502  E  .  .  .  .  ['E']                GJLNDKFPTXYIHMQUVR  
  503  E  .  .  .  .  ['E']                GJLNDKFPTXYIHMQUVR  
  504  E  .  .  .  .  ['E']                GJLNDKFPTXYIHMQUVR  
  505  E  .  .  .  .  ['E']                GJLNDKFPTXYIHMQUVR  
  506  E  .  .  .  .  ['E']                GJLNDKFPTXYIHMQUVR  
  507  E  .  .  .  .  ['E']                GJLNDKFPTXYIHMQUVR  
  508  E  .  .  .  .  ['E']                GJLNDKFPTXYIHMQUVR  
  509  E  .  .  .  .  ['E']                GJLNDKFPTXYIHMQUVR  
  510  E  .  .  .  .  ['E']                GJLNDKFPTXYIHMQUVR  
  511  E  .  .  .  .  ['E']                GJLNDKFPTXYIHMQUVR  
  512  E  .  .  .  .  ['E']                GJLNDKFPTXYIHMQUVR  
  513  E  .  .  .  .  ['E']                GJLNDKFPTXYIHMQUVR  
  514  E  .  .  .  .  ['E']                GJLNDKFPTXYIHMQUVR  
  515  E  .  .  .  .  ['E']                GJLNDKFPTXYIHMQUVR  
  516  E  .  .  .  .  ['E']                GJLNDKFPTXYIHMQUVR  
  517  E  .  .  .  .  ['E']                GJLNDKFPTXYIHMQUVR  
  518  E  .  .  .  .  ['E']                GJLNDKFPTXYIHMQUVR  
('E', 519, 'STOP')
('O', 519, 'START', {'O': 594}, ['O'])
  519  O  .  .  .  .  ['O']                GJLNDKFPTXYIHMQUVRE 
  520  O  .  .  .  .  ['O']                GJLNDKFPTXYIHMQUVRE 
  521  O  .  .  .  .  ['O']                GJLNDKFPTXYIHMQUVRE 
  522  O  .  .  .  .  ['O']                GJLNDKFPTXYIHMQUVRE 
  523  O  .  .  .  .  ['O']                GJLNDKFPTXYIHMQUVRE 
  524  O  .  .  .  .  ['O']                GJLNDKFPTXYIHMQUVRE 
  525  O  .  .  .  .  ['O']                GJLNDKFPTXYIHMQUVRE 
  526  O  .  .  .  .  ['O']                GJLNDKFPTXYIHMQUVRE 
  527  O  .  .  .  .  ['O']                GJLNDKFPTXYIHMQUVRE 
  528  O  .  .  .  .  ['O']                GJLNDKFPTXYIHMQUVRE 
  529  O  .  .  .  .  ['O']                GJLNDKFPTXYIHMQUVRE 
  530  O  .  .  .  .  ['O']                GJLNDKFPTXYIHMQUVRE 
  531  O  .  .  .  .  ['O']                GJLNDKFPTXYIHMQUVRE 
  532  O  .  .  .  .  ['O']                GJLNDKFPTXYIHMQUVRE 
  533  O  .  .  .  .  ['O']                GJLNDKFPTXYIHMQUVRE 
  534  O  .  .  .  .  ['O']                GJLNDKFPTXYIHMQUVRE 
  535  O  .  .  .  .  ['O']                GJLNDKFPTXYIHMQUVRE 
  536  O  .  .  .  .  ['O']                GJLNDKFPTXYIHMQUVRE 
  537  O  .  .  .  .  ['O']                GJLNDKFPTXYIHMQUVRE 
  538  O  .  .  .  .  ['O']                GJLNDKFPTXYIHMQUVRE 
  539  O  .  .  .  .  ['O']                GJLNDKFPTXYIHMQUVRE 
  540  O  .  .  .  .  ['O']                GJLNDKFPTXYIHMQUVRE 
  541  O  .  .  .  .  ['O']                GJLNDKFPTXYIHMQUVRE 
  542  O  .  .  .  .  ['O']                GJLNDKFPTXYIHMQUVRE 
  543  O  .  .  .  .  ['O']                GJLNDKFPTXYIHMQUVRE 
  544  O  .  .  .  .  ['O']                GJLNDKFPTXYIHMQUVRE 
  545  O  .  .  .  .  ['O']                GJLNDKFPTXYIHMQUVRE 
  546  O  .  .  .  .  ['O']                GJLNDKFPTXYIHMQUVRE 
  547  O  .  .  .  .  ['O']                GJLNDKFPTXYIHMQUVRE 
  548  O  .  .  .  .  ['O']                GJLNDKFPTXYIHMQUVRE 
  549  O  .  .  .  .  ['O']                GJLNDKFPTXYIHMQUVRE 
  550  O  .  .  .  .  ['O']                GJLNDKFPTXYIHMQUVRE 
  551  O  .  .  .  .  ['O']                GJLNDKFPTXYIHMQUVRE 
  552  O  .  .  .  .  ['O']                GJLNDKFPTXYIHMQUVRE 
  553  O  .  .  .  .  ['O']                GJLNDKFPTXYIHMQUVRE 
  554  O  .  .  .  .  ['O']                GJLNDKFPTXYIHMQUVRE 
  555  O  .  .  .  .  ['O']                GJLNDKFPTXYIHMQUVRE 
  556  O  .  .  .  .  ['O']                GJLNDKFPTXYIHMQUVRE 
  557  O  .  .  .  .  ['O']                GJLNDKFPTXYIHMQUVRE 
  558  O  .  .  .  .  ['O']                GJLNDKFPTXYIHMQUVRE 
  559  O  .  .  .  .  ['O']                GJLNDKFPTXYIHMQUVRE 
  560  O  .  .  .  .  ['O']                GJLNDKFPTXYIHMQUVRE 
  561  O  .  .  .  .  ['O']                GJLNDKFPTXYIHMQUVRE 
  562  O  .  .  .  .  ['O']                GJLNDKFPTXYIHMQUVRE 
  563  O  .  .  .  .  ['O']                GJLNDKFPTXYIHMQUVRE 
  564  O  .  .  .  .  ['O']                GJLNDKFPTXYIHMQUVRE 
  565  O  .  .  .  .  ['O']                GJLNDKFPTXYIHMQUVRE 
  566  O  .  .  .  .  ['O']                GJLNDKFPTXYIHMQUVRE 
  567  O  .  .  .  .  ['O']                GJLNDKFPTXYIHMQUVRE 
  568  O  .  .  .  .  ['O']                GJLNDKFPTXYIHMQUVRE 
  569  O  .  .  .  .  ['O']                GJLNDKFPTXYIHMQUVRE 
  570  O  .  .  .  .  ['O']                GJLNDKFPTXYIHMQUVRE 
  571  O  .  .  .  .  ['O']                GJLNDKFPTXYIHMQUVRE 
  572  O  .  .  .  .  ['O']                GJLNDKFPTXYIHMQUVRE 
  573  O  .  .  .  .  ['O']                GJLNDKFPTXYIHMQUVRE 
  574  O  .  .  .  .  ['O']                GJLNDKFPTXYIHMQUVRE 
  575  O  .  .  .  .  ['O']                GJLNDKFPTXYIHMQUVRE 
  576  O  .  .  .  .  ['O']                GJLNDKFPTXYIHMQUVRE 
  577  O  .  .  .  .  ['O']                GJLNDKFPTXYIHMQUVRE 
  578  O  .  .  .  .  ['O']                GJLNDKFPTXYIHMQUVRE 
  579  O  .  .  .  .  ['O']                GJLNDKFPTXYIHMQUVRE 
  580  O  .  .  .  .  ['O']                GJLNDKFPTXYIHMQUVRE 
  581  O  .  .  .  .  ['O']                GJLNDKFPTXYIHMQUVRE 
  582  O  .  .  .  .  ['O']                GJLNDKFPTXYIHMQUVRE 
  583  O  .  .  .  .  ['O']                GJLNDKFPTXYIHMQUVRE 
  584  O  .  .  .  .  ['O']                GJLNDKFPTXYIHMQUVRE 
  585  O  .  .  .  .  ['O']                GJLNDKFPTXYIHMQUVRE 
  586  O  .  .  .  .  ['O']                GJLNDKFPTXYIHMQUVRE 
  587  O  .  .  .  .  ['O']                GJLNDKFPTXYIHMQUVRE 
  588  O  .  .  .  .  ['O']                GJLNDKFPTXYIHMQUVRE 
  589  O  .  .  .  .  ['O']                GJLNDKFPTXYIHMQUVRE 
  590  O  .  .  .  .  ['O']                GJLNDKFPTXYIHMQUVRE 
  591  O  .  .  .  .  ['O']                GJLNDKFPTXYIHMQUVRE 
  592  O  .  .  .  .  ['O']                GJLNDKFPTXYIHMQUVRE 
  593  O  .  .  .  .  ['O']                GJLNDKFPTXYIHMQUVRE 
('O', 594, 'STOP')
('Z', 594, 'START', {'Z': 680}, ['Z'])
  594  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  595  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  596  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  597  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  598  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  599  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  600  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  601  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  602  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  603  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  604  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  605  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  606  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  607  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  608  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  609  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  610  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  611  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  612  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  613  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  614  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  615  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  616  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  617  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  618  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  619  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  620  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  621  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  622  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  623  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  624  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  625  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  626  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  627  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  628  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  629  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  630  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  631  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  632  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  633  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  634  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  635  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  636  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  637  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  638  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  639  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  640  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  641  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  642  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  643  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  644  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  645  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  646  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  647  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  648  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  649  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  650  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  651  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  652  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  653  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  654  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  655  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  656  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  657  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  658  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  659  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  660  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  661  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  662  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  663  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  664  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  665  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  666  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  667  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  668  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  669  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  670  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  671  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  672  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  673  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  674  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  675  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  676  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  677  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  678  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
  679  Z  .  .  .  .  ['Z']                GJLNDKFPTXYIHMQUVREO
('Z', 680, 'STOP')
('S', 680, 'START', {'S': 759}, ['S'])
  680  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
  681  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
  682  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
  683  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
  684  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
  685  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
  686  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
  687  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
  688  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
  689  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
  690  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
  691  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
  692  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
  693  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
  694  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
  695  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
  696  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
  697  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
  698  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
  699  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
  700  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
  701  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
  702  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
  703  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
  704  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
  705  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
  706  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
  707  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
  708  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
  709  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
  710  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
  711  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
  712  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
  713  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
  714  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
  715  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
  716  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
  717  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
  718  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
  719  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
  720  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
  721  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
  722  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
  723  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
  724  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
  725  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
  726  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
  727  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
  728  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
  729  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
  730  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
  731  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
  732  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
  733  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
  734  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
  735  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
  736  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
  737  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
  738  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
  739  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
  740  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
  741  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
  742  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
  743  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
  744  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
  745  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
  746  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
  747  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
  748  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
  749  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
  750  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
  751  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
  752  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
  753  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
  754  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
  755  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
  756  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
  757  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
  758  S  .  .  .  .  ['S']                GJLNDKFPTXYIHMQUVREOZ
('S', 759, 'STOP')
('A', 759, 'START', {'A': 820}, ['A', 'W'])
('W', 759, 'START', {'A': 820, 'W': 842}, ['A', 'W'])
  759  A  W  .  .  .  ['A', 'W']           GJLNDKFPTXYIHMQUVREOZS
  760  A  W  .  .  .  ['A', 'W']           GJLNDKFPTXYIHMQUVREOZS
  761  A  W  .  .  .  ['A', 'W']           GJLNDKFPTXYIHMQUVREOZS
  762  A  W  .  .  .  ['A', 'W']           GJLNDKFPTXYIHMQUVREOZS
  763  A  W  .  .  .  ['A', 'W']           GJLNDKFPTXYIHMQUVREOZS
  764  A  W  .  .  .  ['A', 'W']           GJLNDKFPTXYIHMQUVREOZS
  765  A  W  .  .  .  ['A', 'W']           GJLNDKFPTXYIHMQUVREOZS
  766  A  W  .  .  .  ['A', 'W']           GJLNDKFPTXYIHMQUVREOZS
  767  A  W  .  .  .  ['A', 'W']           GJLNDKFPTXYIHMQUVREOZS
  768  A  W  .  .  .  ['A', 'W']           GJLNDKFPTXYIHMQUVREOZS
  769  A  W  .  .  .  ['A', 'W']           GJLNDKFPTXYIHMQUVREOZS
  770  A  W  .  .  .  ['A', 'W']           GJLNDKFPTXYIHMQUVREOZS
  771  A  W  .  .  .  ['A', 'W']           GJLNDKFPTXYIHMQUVREOZS
  772  A  W  .  .  .  ['A', 'W']           GJLNDKFPTXYIHMQUVREOZS
  773  A  W  .  .  .  ['A', 'W']           GJLNDKFPTXYIHMQUVREOZS
  774  A  W  .  .  .  ['A', 'W']           GJLNDKFPTXYIHMQUVREOZS
  775  A  W  .  .  .  ['A', 'W']           GJLNDKFPTXYIHMQUVREOZS
  776  A  W  .  .  .  ['A', 'W']           GJLNDKFPTXYIHMQUVREOZS
  777  A  W  .  .  .  ['A', 'W']           GJLNDKFPTXYIHMQUVREOZS
  778  A  W  .  .  .  ['A', 'W']           GJLNDKFPTXYIHMQUVREOZS
  779  A  W  .  .  .  ['A', 'W']           GJLNDKFPTXYIHMQUVREOZS
  780  A  W  .  .  .  ['A', 'W']           GJLNDKFPTXYIHMQUVREOZS
  781  A  W  .  .  .  ['A', 'W']           GJLNDKFPTXYIHMQUVREOZS
  782  A  W  .  .  .  ['A', 'W']           GJLNDKFPTXYIHMQUVREOZS
  783  A  W  .  .  .  ['A', 'W']           GJLNDKFPTXYIHMQUVREOZS
  784  A  W  .  .  .  ['A', 'W']           GJLNDKFPTXYIHMQUVREOZS
  785  A  W  .  .  .  ['A', 'W']           GJLNDKFPTXYIHMQUVREOZS
  786  A  W  .  .  .  ['A', 'W']           GJLNDKFPTXYIHMQUVREOZS
  787  A  W  .  .  .  ['A', 'W']           GJLNDKFPTXYIHMQUVREOZS
  788  A  W  .  .  .  ['A', 'W']           GJLNDKFPTXYIHMQUVREOZS
  789  A  W  .  .  .  ['A', 'W']           GJLNDKFPTXYIHMQUVREOZS
  790  A  W  .  .  .  ['A', 'W']           GJLNDKFPTXYIHMQUVREOZS
  791  A  W  .  .  .  ['A', 'W']           GJLNDKFPTXYIHMQUVREOZS
  792  A  W  .  .  .  ['A', 'W']           GJLNDKFPTXYIHMQUVREOZS
  793  A  W  .  .  .  ['A', 'W']           GJLNDKFPTXYIHMQUVREOZS
  794  A  W  .  .  .  ['A', 'W']           GJLNDKFPTXYIHMQUVREOZS
  795  A  W  .  .  .  ['A', 'W']           GJLNDKFPTXYIHMQUVREOZS
  796  A  W  .  .  .  ['A', 'W']           GJLNDKFPTXYIHMQUVREOZS
  797  A  W  .  .  .  ['A', 'W']           GJLNDKFPTXYIHMQUVREOZS
  798  A  W  .  .  .  ['A', 'W']           GJLNDKFPTXYIHMQUVREOZS
  799  A  W  .  .  .  ['A', 'W']           GJLNDKFPTXYIHMQUVREOZS
  800  A  W  .  .  .  ['A', 'W']           GJLNDKFPTXYIHMQUVREOZS
  801  A  W  .  .  .  ['A', 'W']           GJLNDKFPTXYIHMQUVREOZS
  802  A  W  .  .  .  ['A', 'W']           GJLNDKFPTXYIHMQUVREOZS
  803  A  W  .  .  .  ['A', 'W']           GJLNDKFPTXYIHMQUVREOZS
  804  A  W  .  .  .  ['A', 'W']           GJLNDKFPTXYIHMQUVREOZS
  805  A  W  .  .  .  ['A', 'W']           GJLNDKFPTXYIHMQUVREOZS
  806  A  W  .  .  .  ['A', 'W']           GJLNDKFPTXYIHMQUVREOZS
  807  A  W  .  .  .  ['A', 'W']           GJLNDKFPTXYIHMQUVREOZS
  808  A  W  .  .  .  ['A', 'W']           GJLNDKFPTXYIHMQUVREOZS
  809  A  W  .  .  .  ['A', 'W']           GJLNDKFPTXYIHMQUVREOZS
  810  A  W  .  .  .  ['A', 'W']           GJLNDKFPTXYIHMQUVREOZS
  811  A  W  .  .  .  ['A', 'W']           GJLNDKFPTXYIHMQUVREOZS
  812  A  W  .  .  .  ['A', 'W']           GJLNDKFPTXYIHMQUVREOZS
  813  A  W  .  .  .  ['A', 'W']           GJLNDKFPTXYIHMQUVREOZS
  814  A  W  .  .  .  ['A', 'W']           GJLNDKFPTXYIHMQUVREOZS
  815  A  W  .  .  .  ['A', 'W']           GJLNDKFPTXYIHMQUVREOZS
  816  A  W  .  .  .  ['A', 'W']           GJLNDKFPTXYIHMQUVREOZS
  817  A  W  .  .  .  ['A', 'W']           GJLNDKFPTXYIHMQUVREOZS
  818  A  W  .  .  .  ['A', 'W']           GJLNDKFPTXYIHMQUVREOZS
  819  A  W  .  .  .  ['A', 'W']           GJLNDKFPTXYIHMQUVREOZS
('A', 820, 'STOP')
  820  W  .  .  .  .  ['W']                GJLNDKFPTXYIHMQUVREOZSA
  821  W  .  .  .  .  ['W']                GJLNDKFPTXYIHMQUVREOZSA
  822  W  .  .  .  .  ['W']                GJLNDKFPTXYIHMQUVREOZSA
  823  W  .  .  .  .  ['W']                GJLNDKFPTXYIHMQUVREOZSA
  824  W  .  .  .  .  ['W']                GJLNDKFPTXYIHMQUVREOZSA
  825  W  .  .  .  .  ['W']                GJLNDKFPTXYIHMQUVREOZSA
  826  W  .  .  .  .  ['W']                GJLNDKFPTXYIHMQUVREOZSA
  827  W  .  .  .  .  ['W']                GJLNDKFPTXYIHMQUVREOZSA
  828  W  .  .  .  .  ['W']                GJLNDKFPTXYIHMQUVREOZSA
  829  W  .  .  .  .  ['W']                GJLNDKFPTXYIHMQUVREOZSA
  830  W  .  .  .  .  ['W']                GJLNDKFPTXYIHMQUVREOZSA
  831  W  .  .  .  .  ['W']                GJLNDKFPTXYIHMQUVREOZSA
  832  W  .  .  .  .  ['W']                GJLNDKFPTXYIHMQUVREOZSA
  833  W  .  .  .  .  ['W']                GJLNDKFPTXYIHMQUVREOZSA
  834  W  .  .  .  .  ['W']                GJLNDKFPTXYIHMQUVREOZSA
  835  W  .  .  .  .  ['W']                GJLNDKFPTXYIHMQUVREOZSA
  836  W  .  .  .  .  ['W']                GJLNDKFPTXYIHMQUVREOZSA
  837  W  .  .  .  .  ['W']                GJLNDKFPTXYIHMQUVREOZSA
  838  W  .  .  .  .  ['W']                GJLNDKFPTXYIHMQUVREOZSA
  839  W  .  .  .  .  ['W']                GJLNDKFPTXYIHMQUVREOZSA
  840  W  .  .  .  .  ['W']                GJLNDKFPTXYIHMQUVREOZSA
  841  W  .  .  .  .  ['W']                GJLNDKFPTXYIHMQUVREOZSA
('W', 842, 'STOP')
('C', 842, 'START', {'C': 905}, ['C'])
  842  C  .  .  .  .  ['C']                GJLNDKFPTXYIHMQUVREOZSAW
  843  C  .  .  .  .  ['C']                GJLNDKFPTXYIHMQUVREOZSAW
  844  C  .  .  .  .  ['C']                GJLNDKFPTXYIHMQUVREOZSAW
  845  C  .  .  .  .  ['C']                GJLNDKFPTXYIHMQUVREOZSAW
  846  C  .  .  .  .  ['C']                GJLNDKFPTXYIHMQUVREOZSAW
  847  C  .  .  .  .  ['C']                GJLNDKFPTXYIHMQUVREOZSAW
  848  C  .  .  .  .  ['C']                GJLNDKFPTXYIHMQUVREOZSAW
  849  C  .  .  .  .  ['C']                GJLNDKFPTXYIHMQUVREOZSAW
  850  C  .  .  .  .  ['C']                GJLNDKFPTXYIHMQUVREOZSAW
  851  C  .  .  .  .  ['C']                GJLNDKFPTXYIHMQUVREOZSAW
  852  C  .  .  .  .  ['C']                GJLNDKFPTXYIHMQUVREOZSAW
  853  C  .  .  .  .  ['C']                GJLNDKFPTXYIHMQUVREOZSAW
  854  C  .  .  .  .  ['C']                GJLNDKFPTXYIHMQUVREOZSAW
  855  C  .  .  .  .  ['C']                GJLNDKFPTXYIHMQUVREOZSAW
  856  C  .  .  .  .  ['C']                GJLNDKFPTXYIHMQUVREOZSAW
  857  C  .  .  .  .  ['C']                GJLNDKFPTXYIHMQUVREOZSAW
  858  C  .  .  .  .  ['C']                GJLNDKFPTXYIHMQUVREOZSAW
  859  C  .  .  .  .  ['C']                GJLNDKFPTXYIHMQUVREOZSAW
  860  C  .  .  .  .  ['C']                GJLNDKFPTXYIHMQUVREOZSAW
  861  C  .  .  .  .  ['C']                GJLNDKFPTXYIHMQUVREOZSAW
  862  C  .  .  .  .  ['C']                GJLNDKFPTXYIHMQUVREOZSAW
  863  C  .  .  .  .  ['C']                GJLNDKFPTXYIHMQUVREOZSAW
  864  C  .  .  .  .  ['C']                GJLNDKFPTXYIHMQUVREOZSAW
  865  C  .  .  .  .  ['C']                GJLNDKFPTXYIHMQUVREOZSAW
  866  C  .  .  .  .  ['C']                GJLNDKFPTXYIHMQUVREOZSAW
  867  C  .  .  .  .  ['C']                GJLNDKFPTXYIHMQUVREOZSAW
  868  C  .  .  .  .  ['C']                GJLNDKFPTXYIHMQUVREOZSAW
  869  C  .  .  .  .  ['C']                GJLNDKFPTXYIHMQUVREOZSAW
  870  C  .  .  .  .  ['C']                GJLNDKFPTXYIHMQUVREOZSAW
  871  C  .  .  .  .  ['C']                GJLNDKFPTXYIHMQUVREOZSAW
  872  C  .  .  .  .  ['C']                GJLNDKFPTXYIHMQUVREOZSAW
  873  C  .  .  .  .  ['C']                GJLNDKFPTXYIHMQUVREOZSAW
  874  C  .  .  .  .  ['C']                GJLNDKFPTXYIHMQUVREOZSAW
  875  C  .  .  .  .  ['C']                GJLNDKFPTXYIHMQUVREOZSAW
  876  C  .  .  .  .  ['C']                GJLNDKFPTXYIHMQUVREOZSAW
  877  C  .  .  .  .  ['C']                GJLNDKFPTXYIHMQUVREOZSAW
  878  C  .  .  .  .  ['C']                GJLNDKFPTXYIHMQUVREOZSAW
  879  C  .  .  .  .  ['C']                GJLNDKFPTXYIHMQUVREOZSAW
  880  C  .  .  .  .  ['C']                GJLNDKFPTXYIHMQUVREOZSAW
  881  C  .  .  .  .  ['C']                GJLNDKFPTXYIHMQUVREOZSAW
  882  C  .  .  .  .  ['C']                GJLNDKFPTXYIHMQUVREOZSAW
  883  C  .  .  .  .  ['C']                GJLNDKFPTXYIHMQUVREOZSAW
  884  C  .  .  .  .  ['C']                GJLNDKFPTXYIHMQUVREOZSAW
  885  C  .  .  .  .  ['C']                GJLNDKFPTXYIHMQUVREOZSAW
  886  C  .  .  .  .  ['C']                GJLNDKFPTXYIHMQUVREOZSAW
  887  C  .  .  .  .  ['C']                GJLNDKFPTXYIHMQUVREOZSAW
  888  C  .  .  .  .  ['C']                GJLNDKFPTXYIHMQUVREOZSAW
  889  C  .  .  .  .  ['C']                GJLNDKFPTXYIHMQUVREOZSAW
  890  C  .  .  .  .  ['C']                GJLNDKFPTXYIHMQUVREOZSAW
  891  C  .  .  .  .  ['C']                GJLNDKFPTXYIHMQUVREOZSAW
  892  C  .  .  .  .  ['C']                GJLNDKFPTXYIHMQUVREOZSAW
  893  C  .  .  .  .  ['C']                GJLNDKFPTXYIHMQUVREOZSAW
  894  C  .  .  .  .  ['C']                GJLNDKFPTXYIHMQUVREOZSAW
  895  C  .  .  .  .  ['C']                GJLNDKFPTXYIHMQUVREOZSAW
  896  C  .  .  .  .  ['C']                GJLNDKFPTXYIHMQUVREOZSAW
  897  C  .  .  .  .  ['C']                GJLNDKFPTXYIHMQUVREOZSAW
  898  C  .  .  .  .  ['C']                GJLNDKFPTXYIHMQUVREOZSAW
  899  C  .  .  .  .  ['C']                GJLNDKFPTXYIHMQUVREOZSAW
  900  C  .  .  .  .  ['C']                GJLNDKFPTXYIHMQUVREOZSAW
  901  C  .  .  .  .  ['C']                GJLNDKFPTXYIHMQUVREOZSAW
  902  C  .  .  .  .  ['C']                GJLNDKFPTXYIHMQUVREOZSAW
  903  C  .  .  .  .  ['C']                GJLNDKFPTXYIHMQUVREOZSAW
  904  C  .  .  .  .  ['C']                GJLNDKFPTXYIHMQUVREOZSAW
('C', 905, 'STOP')
('B', 905, 'START', {'B': 967}, ['B'])
  905  B  .  .  .  .  ['B']                GJLNDKFPTXYIHMQUVREOZSAWC
  906  B  .  .  .  .  ['B']                GJLNDKFPTXYIHMQUVREOZSAWC
  907  B  .  .  .  .  ['B']                GJLNDKFPTXYIHMQUVREOZSAWC
  908  B  .  .  .  .  ['B']                GJLNDKFPTXYIHMQUVREOZSAWC
  909  B  .  .  .  .  ['B']                GJLNDKFPTXYIHMQUVREOZSAWC
  910  B  .  .  .  .  ['B']                GJLNDKFPTXYIHMQUVREOZSAWC
  911  B  .  .  .  .  ['B']                GJLNDKFPTXYIHMQUVREOZSAWC
  912  B  .  .  .  .  ['B']                GJLNDKFPTXYIHMQUVREOZSAWC
  913  B  .  .  .  .  ['B']                GJLNDKFPTXYIHMQUVREOZSAWC
  914  B  .  .  .  .  ['B']                GJLNDKFPTXYIHMQUVREOZSAWC
  915  B  .  .  .  .  ['B']                GJLNDKFPTXYIHMQUVREOZSAWC
  916  B  .  .  .  .  ['B']                GJLNDKFPTXYIHMQUVREOZSAWC
  917  B  .  .  .  .  ['B']                GJLNDKFPTXYIHMQUVREOZSAWC
  918  B  .  .  .  .  ['B']                GJLNDKFPTXYIHMQUVREOZSAWC
  919  B  .  .  .  .  ['B']                GJLNDKFPTXYIHMQUVREOZSAWC
  920  B  .  .  .  .  ['B']                GJLNDKFPTXYIHMQUVREOZSAWC
  921  B  .  .  .  .  ['B']                GJLNDKFPTXYIHMQUVREOZSAWC
  922  B  .  .  .  .  ['B']                GJLNDKFPTXYIHMQUVREOZSAWC
  923  B  .  .  .  .  ['B']                GJLNDKFPTXYIHMQUVREOZSAWC
  924  B  .  .  .  .  ['B']                GJLNDKFPTXYIHMQUVREOZSAWC
  925  B  .  .  .  .  ['B']                GJLNDKFPTXYIHMQUVREOZSAWC
  926  B  .  .  .  .  ['B']                GJLNDKFPTXYIHMQUVREOZSAWC
  927  B  .  .  .  .  ['B']                GJLNDKFPTXYIHMQUVREOZSAWC
  928  B  .  .  .  .  ['B']                GJLNDKFPTXYIHMQUVREOZSAWC
  929  B  .  .  .  .  ['B']                GJLNDKFPTXYIHMQUVREOZSAWC
  930  B  .  .  .  .  ['B']                GJLNDKFPTXYIHMQUVREOZSAWC
  931  B  .  .  .  .  ['B']                GJLNDKFPTXYIHMQUVREOZSAWC
  932  B  .  .  .  .  ['B']                GJLNDKFPTXYIHMQUVREOZSAWC
  933  B  .  .  .  .  ['B']                GJLNDKFPTXYIHMQUVREOZSAWC
  934  B  .  .  .  .  ['B']                GJLNDKFPTXYIHMQUVREOZSAWC
  935  B  .  .  .  .  ['B']                GJLNDKFPTXYIHMQUVREOZSAWC
  936  B  .  .  .  .  ['B']                GJLNDKFPTXYIHMQUVREOZSAWC
  937  B  .  .  .  .  ['B']                GJLNDKFPTXYIHMQUVREOZSAWC
  938  B  .  .  .  .  ['B']                GJLNDKFPTXYIHMQUVREOZSAWC
  939  B  .  .  .  .  ['B']                GJLNDKFPTXYIHMQUVREOZSAWC
  940  B  .  .  .  .  ['B']                GJLNDKFPTXYIHMQUVREOZSAWC
  941  B  .  .  .  .  ['B']                GJLNDKFPTXYIHMQUVREOZSAWC
  942  B  .  .  .  .  ['B']                GJLNDKFPTXYIHMQUVREOZSAWC
  943  B  .  .  .  .  ['B']                GJLNDKFPTXYIHMQUVREOZSAWC
  944  B  .  .  .  .  ['B']                GJLNDKFPTXYIHMQUVREOZSAWC
  945  B  .  .  .  .  ['B']                GJLNDKFPTXYIHMQUVREOZSAWC
  946  B  .  .  .  .  ['B']                GJLNDKFPTXYIHMQUVREOZSAWC
  947  B  .  .  .  .  ['B']                GJLNDKFPTXYIHMQUVREOZSAWC
  948  B  .  .  .  .  ['B']                GJLNDKFPTXYIHMQUVREOZSAWC
  949  B  .  .  .  .  ['B']                GJLNDKFPTXYIHMQUVREOZSAWC
  950  B  .  .  .  .  ['B']                GJLNDKFPTXYIHMQUVREOZSAWC
  951  B  .  .  .  .  ['B']                GJLNDKFPTXYIHMQUVREOZSAWC
  952  B  .  .  .  .  ['B']                GJLNDKFPTXYIHMQUVREOZSAWC
  953  B  .  .  .  .  ['B']                GJLNDKFPTXYIHMQUVREOZSAWC
  954  B  .  .  .  .  ['B']                GJLNDKFPTXYIHMQUVREOZSAWC
  955  B  .  .  .  .  ['B']                GJLNDKFPTXYIHMQUVREOZSAWC
  956  B  .  .  .  .  ['B']                GJLNDKFPTXYIHMQUVREOZSAWC
  957  B  .  .  .  .  ['B']                GJLNDKFPTXYIHMQUVREOZSAWC
  958  B  .  .  .  .  ['B']                GJLNDKFPTXYIHMQUVREOZSAWC
  959  B  .  .  .  .  ['B']                GJLNDKFPTXYIHMQUVREOZSAWC
  960  B  .  .  .  .  ['B']                GJLNDKFPTXYIHMQUVREOZSAWC
  961  B  .  .  .  .  ['B']                GJLNDKFPTXYIHMQUVREOZSAWC
  962  B  .  .  .  .  ['B']                GJLNDKFPTXYIHMQUVREOZSAWC
  963  B  .  .  .  .  ['B']                GJLNDKFPTXYIHMQUVREOZSAWC
  964  B  .  .  .  .  ['B']                GJLNDKFPTXYIHMQUVREOZSAWC
  965  B  .  .  .  .  ['B']                GJLNDKFPTXYIHMQUVREOZSAWC
  966  B  .  .  .  .  ['B']                GJLNDKFPTXYIHMQUVREOZSAWC
('B', 967, 'STOP')
  967  .  .  .  .  .  []                   GJLNDKFPTXYIHMQUVREOZSAWCB
967
#+end_example

 - 1108 too high
 - 1039 too high
 - 1038 too high

* day 8
** text
--- Day 8: Memory Maneuver ---

The sleigh is much easier to pull than you'd expect for something its weight. Unfortunately, neither you nor the Elves know which way the North Pole is from here.

You check your wrist device for anything that might help. It seems to have some kind of navigation system! Activating the navigation system produces more bad news: "Failed to start navigation system. Could not read software license file."

The navigation system's license file consists of a list of numbers (your puzzle input). The numbers define a data structure which, when processed, produces some kind of tree that can be used to calculate the license number.

The tree is made up of nodes; a single, outermost node forms the tree's root, and it contains all other nodes in the tree (or contains nodes that contain nodes, and so on).

Specifically, a node consists of:

    A header, which is always exactly two numbers:
        The quantity of child nodes.
        The quantity of metadata entries.
    Zero or more child nodes (as specified in the header).
    One or more metadata entries (as specified in the header).

Each child node is itself a node that has its own header, child nodes, and metadata. For example:

2 3 0 3 10 11 12 1 1 0 1 99 2 1 1 2
A----------------------------------
    B----------- C-----------
                     D-----

In this example, each node of the tree is also marked with an underline starting with a letter for easier identification. In it, there are four nodes:

    A, which has 2 child nodes (B, C) and 3 metadata entries (1, 1, 2).
    B, which has 0 child nodes and 3 metadata entries (10, 11, 12).
    C, which has 1 child node (D) and 1 metadata entry (2).
    D, which has 0 child nodes and 1 metadata entry (99).

The first check done on the license file is to simply add up all of the metadata entries. In this example, that sum is 1+1+2+10+11+12+2+99=138.

What is the sum of all metadata entries?

Your puzzle answer was 48260.
--- Part Two ---

The second check is slightly more complicated: you need to find the value of the root node (A in the example above).

The value of a node depends on whether it has child nodes.

If a node has no child nodes, its value is the sum of its metadata entries. So, the value of node B is 10+11+12=33, and the value of node D is 99.

However, if a node does have child nodes, the metadata entries become indexes which refer to those child nodes. A metadata entry of 1 refers to the first child node, 2 to the second, 3 to the third, and so on. The value of this node is the sum of the values of the child nodes referenced by the metadata entries. If a referenced child node does not exist, that reference is skipped. A child node can be referenced multiple time and counts each time it is referenced. A metadata entry of 0 does not refer to any child node.

For example, again using the above nodes:

    Node C has one metadata entry, 2. Because node C has only one child node, 2 references a child node which does not exist, and so the value of node C is 0.
    Node A has three metadata entries: 1, 1, and 2. The 1 references node A's first child node, B, and the 2 references node A's second child node, C. Because node B has a value of 33 and node C has a value of 0, the value of node A is 33+33+0=66.

So, in this example, the value of the root node is 66.

What is the value of the root node?

Your puzzle answer was 25981.

Both parts of this puzzle are complete! They provide two gold stars: **
** part 1
#+BEGIN_SRC python :results output
  from collections import deque

  def f(input):
    input = [ int(n) for n in input.split(" ") ]
    q = deque()
    q.extendleft(input)

    checksum = [] # python hides call-by-value
    checksum.append(0)
    def rec():
      children = q.pop()
      metadata = q.pop()
      for j in xrange(children):
        rec()
      for j in xrange(metadata):
        checksum[0] += q.pop()
    rec()
    return checksum

  print(f("2 3 0 3 10 11 12 1 1 0 1 99 2 1 1 2"))
  print(f(open("08.txt").read()))
#+END_SRC

#+RESULTS:
: [138]
: [48260]

** part 2
#+BEGIN_SRC python :results output
  from collections import deque

  def f(input):
    input = [ int(n) for n in input.split(" ") ]
    q = deque()
    q.extendleft(input)

    def rec():
      children = q.pop()
      metadata = q.pop()
      score = 0
      childscores = []
      for j in xrange(children):
        childscores.append(rec())
      for j in xrange(metadata):
        meta = q.pop()
        if children == 0:
          score += meta
        else:
          if 0 <= meta-1 < len(childscores):
            score += childscores[meta-1]
      #print(children, metadata, score, childscores)
      return score

    return rec()

  print(f("2 3 0 3 10 11 12 1 1 0 1 99 2 1 1 2"))
  print(f(open("08.txt").read()))
#+END_SRC

#+RESULTS:
: 66
: 25981

* day 09
** puzzle
--- Day 9: Marble Mania ---

You talk to the Elves while you wait for your navigation system to initialize. To pass the time, they introduce you to their favorite marble game.

The Elves play this game by taking turns arranging the marbles in a circle according to very particular rules. The marbles are numbered starting with 0 and increasing by 1 until every marble has a number.

First, the marble numbered 0 is placed in the circle. At this point, while it contains only a single marble, it is still a circle: the marble is both clockwise from itself and counter-clockwise from itself. This marble is designated the current marble.

Then, each Elf takes a turn placing the lowest-numbered remaining marble into the circle between the marbles that are 1 and 2 marbles clockwise of the current marble. (When the circle is large enough, this means that there is one marble between the marble that was just placed and the current marble.) The marble that was just placed then becomes the current marble.

However, if the marble that is about to be placed has a number which is a multiple of 23, something entirely different happens. First, the current player keeps the marble they would have placed, adding it to their score. In addition, the marble 7 marbles counter-clockwise from the current marble is removed from the circle and also added to the current player's score. The marble located immediately clockwise of the marble that was removed becomes the new current marble.

For example, suppose there are 9 players. After the marble with value 0 is placed in the middle, each player (shown in square brackets) takes a turn. The result of each of those turns would produce circles of marbles like this, where clockwise is to the right and the resulting current marble is in parentheses:

[-] (0)
[1]  0 (1)
[2]  0 (2) 1 
[3]  0  2  1 (3)
[4]  0 (4) 2  1  3 
[5]  0  4  2 (5) 1  3 
[6]  0  4  2  5  1 (6) 3 
[7]  0  4  2  5  1  6  3 (7)
[8]  0 (8) 4  2  5  1  6  3  7 
[9]  0  8  4 (9) 2  5  1  6  3  7 
[1]  0  8  4  9  2(10) 5  1  6  3  7 
[2]  0  8  4  9  2 10  5(11) 1  6  3  7 
[3]  0  8  4  9  2 10  5 11  1(12) 6  3  7 
[4]  0  8  4  9  2 10  5 11  1 12  6(13) 3  7 
[5]  0  8  4  9  2 10  5 11  1 12  6 13  3(14) 7 
[6]  0  8  4  9  2 10  5 11  1 12  6 13  3 14  7(15)
[7]  0(16) 8  4  9  2 10  5 11  1 12  6 13  3 14  7 15 
[8]  0 16  8(17) 4  9  2 10  5 11  1 12  6 13  3 14  7 15 
[9]  0 16  8 17  4(18) 9  2 10  5 11  1 12  6 13  3 14  7 15 
[1]  0 16  8 17  4 18  9(19) 2 10  5 11  1 12  6 13  3 14  7 15 
[2]  0 16  8 17  4 18  9 19  2(20)10  5 11  1 12  6 13  3 14  7 15 
[3]  0 16  8 17  4 18  9 19  2 20 10(21) 5 11  1 12  6 13  3 14  7 15 
[4]  0 16  8 17  4 18  9 19  2 20 10 21  5(22)11  1 12  6 13  3 14  7 15 
[5]  0 16  8 17  4 18(19) 2 20 10 21  5 22 11  1 12  6 13  3 14  7 15 
[6]  0 16  8 17  4 18 19  2(24)20 10 21  5 22 11  1 12  6 13  3 14  7 15 
[7]  0 16  8 17  4 18 19  2 24 20(25)10 21  5 22 11  1 12  6 13  3 14  7 15

The goal is to be the player with the highest score after the last marble is used up. Assuming the example above ends after the marble numbered 25, the winning score is 23+9=32 (because player 5 kept marble 23 and removed marble 9, while no other player got any points in this very short example game).

Here are a few more examples:

    10 players; last marble is worth 1618 points: high score is 8317
    13 players; last marble is worth 7999 points: high score is 146373
    17 players; last marble is worth 1104 points: high score is 2764
    21 players; last marble is worth 6111 points: high score is 54718
    30 players; last marble is worth 5807 points: high score is 37305

What is the winning Elf's score?

Your puzzle answer was 396136.
--- Part Two ---

Amused by the speed of your answer, the Elves are curious:

What would the new winning Elf's score be if the number of the last marble were 100 times larger?

Your puzzle answer was 3183301184.

Both parts of this puzzle are complete! They provide two gold stars: **
** part 1
#+BEGIN_SRC python :results output
def f(players, lastmarblepoints):
  marble = 2
  marbles = []
  marbles.append(0)
  marbles.append(1)
  current = 1
  scores = {}
  for player in xrange(players):
    scores[player] = 0
  player = 1


  while True:
    if marble == lastmarblepoints:
      return max(scores.values())
      
    if (marble % 23) == 0:
      current = (current - 7 + len(marbles)) % len(marbles)
      score = marble + marbles[current]
      scores[player] += score
      #print("points", marble, player, score, max(scores.values()))
      marbles.pop(current)
    else:
      current = (current + 2) % len(marbles)
      if current == 0:
        marbles.append(marble)
        current = len(marbles) - 1
      else:
        marbles.insert(current, marble)
    #print(marble, player+1, current, marbles)
    marble += 1
    player = (player + 1) % players

  return "?"

assert f(9, 32) == 32
assert f(10, 1618) == 8317
assert f(13, 7999) == 146373

input = open("09.txt").read().split()
print(f(int(input[0]), int(input[6])))
#+END_SRC

#+RESULTS:
: 396136

** part 2
#+BEGIN_SRC python :results output
class linkedlist:
  class node:
    def __init__(self, value, prev, next):
      self.value = value
      self.prev = prev
      self.next = next

  cur = None
  def add(self, e):
    if self.cur is None:
      self.cur = linkedlist.node(e, None, None)
      self.cur.prev = self.cur
      self.cur.next = self.cur
    else:
      old = self.cur
      self.cur = linkedlist.node(e, old, old.next)
      old.next.prev = self.cur
      old.next = self.cur

  def remove(self):
    self.cur.prev.next = self.cur.next
    self.cur.next.prev = self.cur.prev
    self.cur = self.cur.next
      
  def next(self):
    self.cur = self.cur.next
  def prev(self):
    self.cur = self.cur.prev
  def value(self):
    return self.cur.value


def f(players, lastmarblepoints):
  marble = 2
  marbles = linkedlist()
  marbles.add(0)
  marbles.add(1)
  scores = {}
  for player in xrange(players):
    scores[player] = 0
  player = 1


  while True:
    if marble == lastmarblepoints:
      return max(scores.values())
      
    if (marble % 23) == 0:
      for i in xrange(7):
        marbles.prev()
      score = marble + marbles.value()
      scores[player] += score
      #print("points", marble, player, score, max(scores.values()))
      marbles.remove()
    else:
      marbles.next()
      marbles.add(marble)
    #print(marble, player+1)
    marble += 1
    player = (player + 1) % players

  return "?"

assert f(9, 32) == 32
assert f(10, 1618) == 8317
assert f(13, 7999) == 146373

input = open("09.txt").read().split()
#print(f(int(input[0]), int(input[6])))
print(f(int(input[0]), 100*int(input[6])))

#+END_SRC

#+RESULTS:
: 3183301184

* day 10
** puzzle
--- Day 10: The Stars Align ---

It's no use; your navigation system simply isn't capable of providing walking directions in the arctic circle, and certainly not in 1018.

The Elves suggest an alternative. In times like these, North Pole rescue operations will arrange points of light in the sky to guide missing Elves back to base. Unfortunately, the message is easy to miss: the points move slowly enough that it takes hours to align them, but have so much momentum that they only stay aligned for a second. If you blink at the wrong time, it might be hours before another message appears.

You can see these points of light floating in the distance, and record their position in the sky and their velocity, the relative change in position per second (your puzzle input). The coordinates are all given from your perspective; given enough time, those positions and velocities will move the points into a cohesive message!

Rather than wait, you decide to fast-forward the process and calculate what the points will eventually spell.

For example, suppose you note the following points:

position=< 9,  1> velocity=< 0,  2>
position=< 7,  0> velocity=<-1,  0>
position=< 3, -2> velocity=<-1,  1>
position=< 6, 10> velocity=<-2, -1>
position=< 2, -4> velocity=< 2,  2>
position=<-6, 10> velocity=< 2, -2>
position=< 1,  8> velocity=< 1, -1>
position=< 1,  7> velocity=< 1,  0>
position=<-3, 11> velocity=< 1, -2>
position=< 7,  6> velocity=<-1, -1>
position=<-2,  3> velocity=< 1,  0>
position=<-4,  3> velocity=< 2,  0>
position=<10, -3> velocity=<-1,  1>
position=< 5, 11> velocity=< 1, -2>
position=< 4,  7> velocity=< 0, -1>
position=< 8, -2> velocity=< 0,  1>
position=<15,  0> velocity=<-2,  0>
position=< 1,  6> velocity=< 1,  0>
position=< 8,  9> velocity=< 0, -1>
position=< 3,  3> velocity=<-1,  1>
position=< 0,  5> velocity=< 0, -1>
position=<-2,  2> velocity=< 2,  0>
position=< 5, -2> velocity=< 1,  2>
position=< 1,  4> velocity=< 2,  1>
position=<-2,  7> velocity=< 2, -2>
position=< 3,  6> velocity=<-1, -1>
position=< 5,  0> velocity=< 1,  0>
position=<-6,  0> velocity=< 2,  0>
position=< 5,  9> velocity=< 1, -2>
position=<14,  7> velocity=<-2,  0>
position=<-3,  6> velocity=< 2, -1>

Each line represents one point. Positions are given as <X, Y> pairs: X represents how far left (negative) or right (positive) the point appears, while Y represents how far up (negative) or down (positive) the point appears.

At 0 seconds, each point has the position given. Each second, each point's velocity is added to its position. So, a point with velocity <1, -2> is moving to the right, but is moving upward twice as quickly. If this point's initial position were <3, 9>, after 3 seconds, its position would become <6, 3>.

Over time, the points listed above would move like this:

Initially:
........#.............
................#.....
.........#.#..#.......
......................
#..........#.#.......#
...............#......
....#.................
..#.#....#............
.......#..............
......#...............
...#...#.#...#........
....#..#..#.........#.
.......#..............
...........#..#.......
#...........#.........
...#.......#..........

After 1 second:
......................
......................
..........#....#......
........#.....#.......
..#.........#......#..
......................
......#...............
....##.........#......
......#.#.............
.....##.##..#.........
........#.#...........
........#...#.....#...
..#...........#.......
....#.....#.#.........
......................
......................

After 2 seconds:
......................
......................
......................
..............#.......
....#..#...####..#....
......................
........#....#........
......#.#.............
.......#...#..........
.......#..#..#.#......
....#....#.#..........
.....#...#...##.#.....
........#.............
......................
......................
......................

After 3 seconds:
......................
......................
......................
......................
......#...#..###......
......#...#...#.......
......#...#...#.......
......#####...#.......
......#...#...#.......
......#...#...#.......
......#...#...#.......
......#...#..###......
......................
......................
......................
......................

After 4 seconds:
......................
......................
......................
............#.........
........##...#.#......
......#.....#..#......
.....#..##.##.#.......
.......##.#....#......
...........#....#.....
..............#.......
....#......#...#......
.....#.....##.........
...............#......
...............#......
......................
......................

After 3 seconds, the message appeared briefly: HI. Of course, your message will be much longer and will take many more seconds to appear.

What message will eventually appear in the sky?

Your puzzle answer was GEJKHGHZ.
--- Part Two ---

Good thing you didn't have to wait, because that would have taken a long time - much longer than the 3 seconds in the example above.

Impressed by your sub-hour communication capabilities, the Elves are curious: exactly how many seconds would they have needed to wait for that message to appear?

Your puzzle answer was 10681.

Both parts of this puzzle are complete! They provide two gold stars: **
** part 1
#+BEGIN_SRC python :results output
import re
def f(endsec, input):
  input = [ map(int, re.findall("-?[0-9]+", line)) for line in input ]

  for _ in xrange(endsec):
    input = [ (x+dx, y+dy, dx, dy) for (x,y,dx,dy) in input ]

  maxx = max([ x for (x,y,dx,dt) in input ])
  maxy = max([ y for (x,y,dx,dt) in input ])
  a = []
  for y in range(maxy+1):
    row = []
    for x in range(maxx+1):
      row.append('.')
    a.append(row)

  for (x,y,dx,dy) in input:
    a[y][x] = '#'
  
  for y in range(maxy+1):
    line = []
    for x in range(maxx+1):
      line.append(a[y][x])
    print("".join(line))

#print f(3, ["position=< 9,  1> velocity=< 0,  2>", "position=< 7,  0> velocity=<-1,  0>","position=< 3, -2> velocity=<-1,  1>", "position=< 6, 10> velocity=<-2, -1>","position=< 2, -4> velocity=< 2,  2>", "position=<-6, 10> velocity=< 2, -2>","position=< 1,  8> velocity=< 1, -1>", "position=< 1,  7> velocity=< 1,  0>","position=<-3, 11> velocity=< 1, -2>", "position=< 7,  6> velocity=<-1, -1>","position=<-2,  3> velocity=< 1,  0>", "position=<-4,  3> velocity=< 2,  0>","position=<10, -3> velocity=<-1,  1>", "position=< 5, 11> velocity=< 1, -2>","position=< 4,  7> velocity=< 0, -1>", "position=< 8, -2> velocity=< 0,  1>","position=<15,  0> velocity=<-2,  0>", "position=< 1,  6> velocity=< 1,  0>","position=< 8,  9> velocity=< 0, -1>", "position=< 3,  3> velocity=<-1,  1>","position=< 0,  5> velocity=< 0, -1>", "position=<-2,  2> velocity=< 2,  0>","position=< 5, -2> velocity=< 1,  2>", "position=< 1,  4> velocity=< 2,  1>","position=<-2,  7> velocity=< 2, -2>", "position=< 3,  6> velocity=<-1, -1>","position=< 5,  0> velocity=< 1,  0>", "position=<-6,  0> velocity=< 2,  0>","position=< 5,  9> velocity=< 1, -2>", "position=<14,  7> velocity=<-2,  0>","position=<-3,  6> velocity=< 2, -1>"])
print f(0, list(open("10.txt")))
#+END_SRC

#+RESULTS:
: #...#..###
: #...#...#.
: #...#...#.
: #####...#.
: #...#...#.
: #...#...#.
: #...#...#.
: #...#..###
: None

** part 1 B
#+BEGIN_SRC python :results output
import re
from collections import defaultdict
from PIL import Image

def f(endsec, input):
  input = [ map(int, re.findall("-?[0-9]+", line)) for line in input ]
  input = [ (x+dx*endsec, y+dy*endsec, dx, dy) for (x,y,dx,dy) in input ]

  s = set()
  a = defaultdict(lambda: '.')
  for (x,y,dx,dy) in input:
    a[(x,y)] = "#"
    s.add((x,y))
  
  maxx = max([ x for (x,y,dx,dt) in input ])+1
  maxy = max([ y for (x,y,dx,dt) in input ])+1
  print(maxx, maxy)
  img = Image.new("RGB", (maxx, maxy), "#FFFFFF")
  imgdata = []
  for y in range(maxy):
    for x in range(maxx):
      if (x,y) in s:
        imgdata.append((0,0,0))
      else:
        imgdata.append((255,255,255))
  img.putdata(imgdata)
  img.save("/tmp/a.png", "PNG")

#print f(3, ["position=< 9,  1> velocity=< 0,  2>", "position=< 7,  0> velocity=<-1,  0>","position=< 3, -2> velocity=<-1,  1>", "position=< 6, 10> velocity=<-2, -1>","position=< 2, -4> velocity=< 2,  2>", "position=<-6, 10> velocity=< 2, -2>","position=< 1,  8> velocity=< 1, -1>", "position=< 1,  7> velocity=< 1,  0>","position=<-3, 11> velocity=< 1, -2>", "position=< 7,  6> velocity=<-1, -1>","position=<-2,  3> velocity=< 1,  0>", "position=<-4,  3> velocity=< 2,  0>","position=<10, -3> velocity=<-1,  1>", "position=< 5, 11> velocity=< 1, -2>","position=< 4,  7> velocity=< 0, -1>", "position=< 8, -2> velocity=< 0,  1>","position=<15,  0> velocity=<-2,  0>", "position=< 1,  6> velocity=< 1,  0>","position=< 8,  9> velocity=< 0, -1>", "position=< 3,  3> velocity=<-1,  1>","position=< 0,  5> velocity=< 0, -1>", "position=<-2,  2> velocity=< 2,  0>","position=< 5, -2> velocity=< 1,  2>", "position=< 1,  4> velocity=< 2,  1>","position=<-2,  7> velocity=< 2, -2>", "position=< 3,  6> velocity=<-1, -1>","position=< 5,  0> velocity=< 1,  0>", "position=<-6,  0> velocity=< 2,  0>","position=< 5,  9> velocity=< 1, -2>", "position=<14,  7> velocity=<-2,  0>","position=<-3,  6> velocity=< 2, -1>"])
print f(1, list(open("10.txt")))

#img = Image.new("RGB", (100, 100), "#ffffff")
#img.putdata([(1,1,1), (2,2,2), (3,3,3)])
#img.save("/tmp/a.png", "PNG")
#+END_SRC

#+RESULTS:
: STDERR:

** part 1 C
#+BEGIN_SRC python :results output
import re
from collections import defaultdict
from PIL import Image

def f(endsec, input):
  input = [ map(int, re.findall("-?[0-9]+", line)) for line in input ]
  input = [ (x+dx*endsec, y+dy*endsec, dx, dy) for (x,y,dx,dy) in input ]

  s = set()
  a = defaultdict(lambda: '.')
  for (x,y,dx,dy) in input:
    a[(x,y)] = "#"
    s.add((x,y))
  
  maxx = max([ x for (x,y,dx,dt) in input ])+1
  maxy = max([ y for (x,y,dx,dt) in input ])+1
  print(maxx, maxy, maxx*maxy/1000000)
  return
  f = open("/tmp/10.txt", "w")
  for y in range(maxy):
    for x in range(maxx):
      if (x,y) in s:
        f.write('#')
      else:
        f.write('.')
    f.write('\n')
  f.close()

#print f(3, ["position=< 9,  1> velocity=< 0,  2>", "position=< 7,  0> velocity=<-1,  0>","position=< 3, -2> velocity=<-1,  1>", "position=< 6, 10> velocity=<-2, -1>","position=< 2, -4> velocity=< 2,  2>", "position=<-6, 10> velocity=< 2, -2>","position=< 1,  8> velocity=< 1, -1>", "position=< 1,  7> velocity=< 1,  0>","position=<-3, 11> velocity=< 1, -2>", "position=< 7,  6> velocity=<-1, -1>","position=<-2,  3> velocity=< 1,  0>", "position=<-4,  3> velocity=< 2,  0>","position=<10, -3> velocity=<-1,  1>", "position=< 5, 11> velocity=< 1, -2>","position=< 4,  7> velocity=< 0, -1>", "position=< 8, -2> velocity=< 0,  1>","position=<15,  0> velocity=<-2,  0>", "position=< 1,  6> velocity=< 1,  0>","position=< 8,  9> velocity=< 0, -1>", "position=< 3,  3> velocity=<-1,  1>","position=< 0,  5> velocity=< 0, -1>", "position=<-2,  2> velocity=< 2,  0>","position=< 5, -2> velocity=< 1,  2>", "position=< 1,  4> velocity=< 2,  1>","position=<-2,  7> velocity=< 2, -2>", "position=< 3,  6> velocity=<-1, -1>","position=< 5,  0> velocity=< 1,  0>", "position=<-6,  0> velocity=< 2,  0>","position=< 5,  9> velocity=< 1, -2>", "position=<14,  7> velocity=<-2,  0>","position=<-3,  6> velocity=< 2, -1>"])
print f(1, list(open("10.txt")))

#img = Image.new("RGB", (100, 100), "#ffffff")
#img.putdata([(1,1,1), (2,2,2), (3,3,3)])
#img.save("/tmp/a.png", "PNG")
#+END_SRC

#+RESULTS:
: (53648, 53597, 2875)
: None

** part 1 D
#+BEGIN_SRC python :results output
import re

def f(input):
  input = [ map(int, re.findall("-?[0-9]+", line)) for line in input ]

  mininput = None
  minsize = 9999999999999
  for _ in range(100000):
    input = [ (x+dx, y+dy, dx, dy) for (x,y,dx,dy) in input ]
    maxx = max([ x for (x,y,dx,dt) in input ])+1
    maxy = max([ y for (x,y,dx,dt) in input ])+1
    size = maxx * maxy
    if size < minsize:
      minsize = size
      mininput = list(input)

  input = mininput

  minx = min([ x for (x,y,dx,dt) in input ])
  miny = min([ y for (x,y,dx,dt) in input ])
  input = [ (x-minx, y-miny, dx, dy) for (x,y,dx,dy) in input ]

  s = set()
  for (x,y,dx,dy) in input:
    s.add((x,y))

  maxx = max([ x for (x,y,dx,dt) in input ])+1
  maxy = max([ y for (x,y,dx,dt) in input ])+1

  for y in xrange(maxy):
    line = []
    for x in xrange(maxx):
      if (x,y) in s:
        line.append("#")
      else:
        line.append(".")
    print("".join(line))

  #print(maxx, maxy)
  #f = open("/tmp/10.html", "w")
  #f.write('<svg width="%d" height="%d">\n' % (maxx, maxy))
  #for (x,y,dx,dy) in input:
  #  f.write('<rect x="%d" y="%d" width="1" height="1" fill="#FF0000" />\n' % (x, y))
  #f.write('</svg>\n')
  #f.close()

#print f(3, ["position=< 9,  1> velocity=< 0,  2>", "position=< 7,  0> velocity=<-1,  0>","position=< 3, -2> velocity=<-1,  1>", "position=< 6, 10> velocity=<-2, -1>","position=< 2, -4> velocity=< 2,  2>", "position=<-6, 10> velocity=< 2, -2>","position=< 1,  8> velocity=< 1, -1>", "position=< 1,  7> velocity=< 1,  0>","position=<-3, 11> velocity=< 1, -2>", "position=< 7,  6> velocity=<-1, -1>","position=<-2,  3> velocity=< 1,  0>", "position=<-4,  3> velocity=< 2,  0>","position=<10, -3> velocity=<-1,  1>", "position=< 5, 11> velocity=< 1, -2>","position=< 4,  7> velocity=< 0, -1>", "position=< 8, -2> velocity=< 0,  1>","position=<15,  0> velocity=<-2,  0>", "position=< 1,  6> velocity=< 1,  0>","position=< 8,  9> velocity=< 0, -1>", "position=< 3,  3> velocity=<-1,  1>","position=< 0,  5> velocity=< 0, -1>", "position=<-2,  2> velocity=< 2,  0>","position=< 5, -2> velocity=< 1,  2>", "position=< 1,  4> velocity=< 2,  1>","position=<-2,  7> velocity=< 2, -2>", "position=< 3,  6> velocity=<-1, -1>","position=< 5,  0> velocity=< 1,  0>", "position=<-6,  0> velocity=< 2,  0>","position=< 5,  9> velocity=< 1, -2>", "position=<14,  7> velocity=<-2,  0>","position=<-3,  6> velocity=< 2, -1>"])
f(list(open("10.txt")))

#img = Image.new("RGB", (100, 100), "#ffffff")
#img.putdata([(1,1,1), (2,2,2), (3,3,3)])
#img.save("/tmp/a.png", "PNG")
#+END_SRC

#+RESULTS:
#+begin_example
.####...######.....###..#....#..#....#...####...#....#..######
#....#..#...........#...#...#...#....#..#....#..#....#.......#
#.......#...........#...#..#....#....#..#.......#....#.......#
#.......#...........#...#.#.....#....#..#.......#....#......#.
#.......#####.......#...##......######..#.......######.....#..
#..###..#...........#...##......#....#..#..###..#....#....#...
#....#..#...........#...#.#.....#....#..#....#..#....#...#....
#....#..#.......#...#...#..#....#....#..#....#..#....#..#.....
#...##..#.......#...#...#...#...#....#..#...##..#....#..#.....
.###.#..######...###....#....#..#....#...###.#..#....#..######
None
#+end_example

 - GEJKHGHZ

** part 2
#+BEGIN_SRC python :results output
import re

def f(input):
  input = [ map(int, re.findall("-?[0-9]+", line)) for line in input ]

  for sec in range(100000):
    oldsize = max([ x for (x,y,dx,dt) in input ]) * max([ y for (x,y,dx,dt) in input ])
    input = [ (x+dx, y+dy, dx, dy) for (x,y,dx,dy) in input ]
    newsize = max([ x for (x,y,dx,dt) in input ]) * max([ y for (x,y,dx,dt) in input ])
    if newsize > oldsize:
      return sec

#print f(["position=< 9,  1> velocity=< 0,  2>", "position=< 7,  0> velocity=<-1,  0>","position=< 3, -2> velocity=<-1,  1>", "position=< 6, 10> velocity=<-2, -1>","position=< 2, -4> velocity=< 2,  2>", "position=<-6, 10> velocity=< 2, -2>","position=< 1,  8> velocity=< 1, -1>", "position=< 1,  7> velocity=< 1,  0>","position=<-3, 11> velocity=< 1, -2>", "position=< 7,  6> velocity=<-1, -1>","position=<-2,  3> velocity=< 1,  0>", "position=<-4,  3> velocity=< 2,  0>","position=<10, -3> velocity=<-1,  1>", "position=< 5, 11> velocity=< 1, -2>","position=< 4,  7> velocity=< 0, -1>", "position=< 8, -2> velocity=< 0,  1>","position=<15,  0> velocity=<-2,  0>", "position=< 1,  6> velocity=< 1,  0>","position=< 8,  9> velocity=< 0, -1>", "position=< 3,  3> velocity=<-1,  1>","position=< 0,  5> velocity=< 0, -1>", "position=<-2,  2> velocity=< 2,  0>","position=< 5, -2> velocity=< 1,  2>", "position=< 1,  4> velocity=< 2,  1>","position=<-2,  7> velocity=< 2, -2>", "position=< 3,  6> velocity=<-1, -1>","position=< 5,  0> velocity=< 1,  0>", "position=<-6,  0> velocity=< 2,  0>","position=< 5,  9> velocity=< 1, -2>", "position=<14,  7> velocity=<-2,  0>","position=<-3,  6> velocity=< 2, -1>"])
print(f(list(open("10.txt"))))
#+END_SRC

#+RESULTS:
: 10681

 - GEJKHGHZ
* day 11
** puzzle
--- Day 11: Chronal Charge ---

You watch the Elves and their sleigh fade into the distance as they head toward the North Pole.

Actually, you're the one fading. The falling sensation returns.

The low fuel warning light is illuminated on your wrist-mounted device. Tapping it once causes it to project a hologram of the situation: a 300x300 grid of fuel cells and their current power levels, some negative. You're not sure what negative power means in the context of time travel, but it can't be good.

Each fuel cell has a coordinate ranging from 1 to 300 in both the X (horizontal) and Y (vertical) direction. In X,Y notation, the top-left cell is 1,1, and the top-right cell is 300,1.

The interface lets you select any 3x3 square of fuel cells. To increase your chances of getting to your destination, you decide to choose the 3x3 square with the largest total power.

The power level in a given fuel cell can be found through the following process:

    Find the fuel cell's rack ID, which is its X coordinate plus 10.
    Begin with a power level of the rack ID times the Y coordinate.
    Increase the power level by the value of the grid serial number (your puzzle input).
    Set the power level to itself multiplied by the rack ID.
    Keep only the hundreds digit of the power level (so 12345 becomes 3; numbers with no hundreds digit become 0).
    Subtract 5 from the power level.

For example, to find the power level of the fuel cell at 3,5 in a grid with serial number 8:

    The rack ID is 3 + 10 = 13.
    The power level starts at 13 * 5 = 65.
    Adding the serial number produces 65 + 8 = 73.
    Multiplying by the rack ID produces 73 * 13 = 949.
    The hundreds digit of 949 is 9.
    Subtracting 5 produces 9 - 5 = 4.

So, the power level of this fuel cell is 4.

Here are some more example power levels:

    Fuel cell at  122,79, grid serial number 57: power level -5.
    Fuel cell at 217,196, grid serial number 39: power level  0.
    Fuel cell at 101,153, grid serial number 71: power level  4.

Your goal is to find the 3x3 square which has the largest total power. The square must be entirely within the 300x300 grid. Identify this square using the X,Y coordinate of its top-left fuel cell. For example:

For grid serial number 18, the largest total 3x3 square has a top-left corner of 33,45 (with a total power of 29); these fuel cells appear in the middle of this 5x5 region:

-2  -4   4   4   4
-4   4   4   4  -5
 4   3   3   4  -4
 1   1   2   4  -3
-1   0   2  -5  -2

For grid serial number 42, the largest 3x3 square's top-left is 21,61 (with a total power of 30); they are in the middle of this region:

-3   4   2   2   2
-4   4   3   3   4
-5   3   3   4  -4
 4   3   3   4  -3
 3   3   3  -5  -1

What is the X,Y coordinate of the top-left fuel cell of the 3x3 square with the largest total power?

Your puzzle answer was 21,13.
--- Part Two ---

You discover a dial on the side of the device; it seems to let you select a square of any size, not just 3x3. Sizes from 1x1 to 300x300 are supported.

Realizing this, you now must find the square of any size with the largest total power. Identify this square by including its size as a third parameter after the top-left coordinate: a 9x9 square with a top-left corner of 3,5 is identified as 3,5,9.

For example:

    For grid serial number 18, the largest total square (with a total power of 113) is 16x16 and has a top-left corner of 90,269, so its identifier is 90,269,16.
    For grid serial number 42, the largest total square (with a total power of 119) is 12x12 and has a top-left corner of 232,251, so its identifier is 232,251,12.

What is the X,Y,size identifier of the square with the largest total power?

Your puzzle answer was 235,268,13.

Both parts of this puzzle are complete! They provide two gold stars: **
** part 1
#+BEGIN_SRC python :results output
import math
from collections import defaultdict

def power(x,y, grid_serial_number):
  rack_id = x + 10
  power_level = rack_id * y
  power_level += grid_serial_number
  power_level *= rack_id
  power_level = math.floor(power_level / 100) % 10
  power_level -= 5
  return power_level

def f(grid_serial_number):
  grid = defaultdict(int)
  for x in xrange(1, 301):
    for y in xrange(1, 301):
      grid[(x,y)] = power(x,y, grid_serial_number)

  max_xy = (0,0)
  max_power_level = 0
  for x in xrange(1, 301):
    for y in xrange(1, 301):
      power_level = sum([ grid[(x+dx,y+dy)] for dx in xrange(3) for dy in xrange(3) ])
      if power_level > max_power_level:
        max_power_level = power_level
        max_xy = (x,y)

  return max_xy

assert power(3,5, 8) == 4
assert power(122,79, 57) == -5
assert f(18) == (33,45)

print(f(int(open("11.txt").read())))
#+END_SRC

#+RESULTS:
: (21, 13)

** part 2
#+BEGIN_SRC python :results output
import math
from collections import defaultdict

def power(x,y, grid_serial_number):
  rack_id = x + 10
  power_level = rack_id * y
  power_level += grid_serial_number
  power_level *= rack_id
  power_level = math.floor(power_level / 100) % 10
  power_level -= 5
  return power_level

def f(grid_serial_number):
  grid = defaultdict(int)
  for x in xrange(1, 301):
    for y in xrange(1, 301):
      grid[(x,y)] = power(x,y, grid_serial_number)

  max_top_value = 0
  max_top_xy = (0,0)
  grid_top = defaultdict(int)
  for x in xrange(1, 301):
    for y in xrange(1, 301):
      size = min(x,y)
      aboves = sum([ grid[(x, y-d)] for d in xrange(1, size) ])
      lefts = sum([ grid[(x-d, y)] for d in xrange(1, size) ])
      grid_top[(x,y)] = grid_top[(x-1,y-1)] + grid[(x,y)] + aboves + lefts
      if grid_top[(x,y)] > max_top_value:
        max_top_value = grid_top[(x,y)]
        max_top_xy = (x,y)

  max_bot_value = 0
  max_bot_xy = (0,0)
  grid_bot = defaultdict(int)
  for x in reversed(range(1, 301)):
    for y in reversed(range(1, 301)):
      size = min(301-x,301-y)
      belows = sum([ grid[(x, y+d)] for yy in xrange(1, size) ])
      rights = sum([ grid[(x+d, y)] for xx in xrange(1, size) ])
      grid_bot[(x,y)] = grid_bot[(x+1,y+1)] + grid[(x,y)] + belows + rights
      if grid_bot[(x,y)] > max_bot_value:
        max_bot_value = grid_bot[(x,y)]
        max_bot_xy = (x,y)


  print(max_top_xy, max_top_value)
  print(max_bot_xy, max_bot_value)

# 0 1 2 3 
# 4 5 6 7
# 8 9 A B
# C D E F

  return 1

#assert f(18) == (90, 269, 16)
f(18)
#print(f(int(open("11.txt").read())))
#+END_SRC

#+RESULTS:
: ((90, 11), 34.0)
: ((3, 1), 1033.0)


** part 2 B
#+BEGIN_SRC python :results output
import math
from collections import defaultdict

def power(x,y, grid_serial_number):
  rack_id = x + 10
  power_level = rack_id * y
  power_level += grid_serial_number
  power_level *= rack_id
  power_level = math.floor(power_level / 100) % 10
  power_level -= 5
  return power_level

def f(grid_serial_number):
  grid = defaultdict(int)
  for x in xrange(1, 301):
    for y in xrange(1, 301):
      grid[(x,y)] = power(x,y, grid_serial_number)

  grid_sum_xs = defaultdict(int)
  grid_sum_ys = defaultdict(int)
  for x in xrange(1, 301):
    for y in xrange(1, 301):
      grid_sum_xs[(x,y)] = grid_sum_xs[(x-1,y)] + grid[(x,y)]
      grid_sum_ys[(x,y)] = grid_sum_ys[(x,y-1)] + grid[(x,y)]

  maxxy = (0,0)

  grid_max = defaultdict(int)
  grid_size = defaultdict(lambda: 1)
  for x in xrange(1, 301):
    for y in xrange(1, 301):
      size = grid_size[(x,y)]
      expand_xs = grid_sum_xs[(x-1,y)] - grid_sum_xs[(x-size-1,y)]
      expand_ys = grid_sum_ys[(x,y-1)] - grid_sum_ys[(x,y-size-1)]
      expand = grid_max[(x,y)] + grid[(x,y)] + expand_xs + expand_ys
      if (x,y) == (3,3):
        print((x,y), grid[(x,y)], expand, expand_xs, expand_ys)
      if grid[(x,y)] > expand:
        grid_max[(x,y)] = grid[(x,y)]
      else:
        grid_max[(x,y)] = expand
        grid_size[(x,y)] += 1
      if grid_max[(x,y)] > grid_max[maxxy]:
        maxxy = (x,y)
        #print (maxxy[0],maxxy[1],grid_size[maxxy], grid_max[maxxy])

  dx = 90
  dy = 269
  ds = 16
  dx = 90
  dy = 269
  ds = 20
  for y in xrange(ds):
    l = ""
    for x in xrange(ds):
      l += "%3d " % grid[(dx+x,dy+y)]
    print l
  print
  for y in xrange(ds):
    l = ""
    for x in xrange(ds):
      l += "%3d/%1d " % (grid_max[(dx+x,dy+y)], grid_size[(dx+x,dy+y)])
    print l
  print

  t = 0
  for x in xrange(ds):
    for y in xrange(ds):
      t += grid[(dx+x,dy+y)]
  print(t, grid_max[(dx+ds, dy+ds)], grid_size[(dx+ds, dy+ds)])

  return (maxxy[0],maxxy[1],grid_size[maxxy], grid_max[maxxy])

#assert f(18) == (90, 269, 16)
print(f(18))
#print(f(int(open("11.txt").read())))
#+END_SRC

#+RESULTS:
#+begin_example
((3, 3), 2.0, 3.0, 1.0, 0.0)
  3   3   0   1  -2   1  -2   2   0   4   3  -2  -2   3   4   0   2  -1   1  -1 
  3  -5   4  -3  -4   1   1  -4  -3   3   4   1   3   1   4   3  -3  -4   1   1 
  3  -3  -2   3  -5   1   3   1   3   2  -5   4  -1  -1   4  -5   1   3   0   2 
  3  -1   2   0   3   1  -4  -5   0   0  -4  -2   4  -3   4  -3  -4   0  -1   4 
  3   1  -4  -4   1   2  -2   0  -3  -1  -3   1   0   4   4  -1   0  -3  -2  -5 
  3   3   0   2  -1   2   0   4   3  -2  -2   4  -5   2   4   2  -5   3  -2  -3 
  3  -5   4  -2  -3   2   3  -1   0  -3  -1  -3   1   0   4   4  -1   0  -3  -1 
  3  -3  -2   4  -5   2  -5   3  -3  -4   0   0  -4  -3   4  -4   4  -3  -4   0 
  3  -1   2   0   4   3  -3  -3   3   4   1   4   2  -5   4  -2  -1   4  -5   2 
  3   1  -4  -4   2   3   0   2   0   3   2  -3  -3   3   4   1   3   1   4   4 
  3   3   0   2   0   3   2  -4  -3   2   3   0   2   0   4   3  -2  -2   4  -5 
  3  -5   4  -2  -2   3   4   1   3   1   4   3  -2  -2   4  -5   2  -5   3  -3 
  3  -3  -2   4  -4   4  -3  -5   0   0  -5  -4   3  -4   4  -3  -3   2   2  -2 
  3   0   2   0   4   4  -1   0  -4  -1  -4   0  -1   3   4   0   1  -1   1   0 
  3   2  -4  -3   3   4   1   4   3  -3  -3   3   4   1   4   2  -4  -5   1   2 
  3   4   0   3   1   4   4  -1   0  -4  -2  -4   0  -1   4   4   0   2   0   3 
  3  -4   4  -1  -1  -5  -4   3  -4  -5  -1  -1  -5  -4   4  -4  -5  -1  -1  -5 
  3  -2  -2  -5  -3  -5  -1  -2   3   4   0   3   1   4   4  -1   0  -4  -2  -4 
  3   0   2   1  -5  -5   1   2   0   3   1  -4  -4   2   4   1   4   3  -2  -2 
  3   2  -4  -3   3  -5   3  -3  -4   1   2  -1   1   0   4   3  -1   0  -3   0 

  3/2   7/2   0/1   1/1  -1/2   1/1  -2/1   2/1   5/2   4/1   9/2  -2/1  -1/2   3/1  11/2   2/2   2/1   3/2   2/2  -1/1 
  3/1   1/2   4/1   2/2  -4/1   1/1   1/1  -1/2  -3/1   4/2  10/2   3/2   3/1   7/2   9/2   7/2   2/2  -4/1   1/1   1/2 
  9/2  -3/1  -1/2   3/1  -5/1   1/1   5/2   1/1   3/1   8/2   1/2   4/1   6/2  -1/2   7/2   2/2   1/1   3/1   4/2   3/2 
  7/2  -1/2   2/1   5/2   3/1   5/2   0/2  -5/1   0/1   2/2  -4/1  -2/2   4/1   0/2   5/2  -3/1  -4/1   0/1  -1/2   5/2 
  5/2   3/2  -1/2  -4/1   1/1   4/2  -2/1   0/1  -3/2  -1/1  -3/1   1/1   5/2   4/1  12/2   0/2   0/1  -3/2  -2/1  -3/2 
  3/2   7/2   0/1   2/1   2/2   3/2   0/2   4/2   4/2   0/2  -2/1   4/1  -1/2   2/1  10/2   5/2  -3/2   3/1  -1/2  -3/1 
  3/1   1/2   4/1   4/2  -3/1   2/1   5/2   6/2   2/2  -3/1  -1/1   0/2   1/1   3/2   8/2  10/2  -1/1   2/2  -3/1  -1/1 
  9/2  -3/1  -1/2   4/1  -4/2   2/1   0/2   3/1   0/2  -4/1   0/1   0/1  -3/2  -3/1   5/2   4/2   4/1   1/2  -4/1   0/1 
  7/2  -1/2   2/1   6/2   4/1   9/2  -3/1  -3/2   3/1   4/1   5/2   5/2   2/2  -5/1   4/1  -2/2   1/2   4/1  -5/2   2/1 
  5/2   3/2  -1/2  -4/1   2/2   8/2   0/2   2/1   5/2   7/2   6/2   3/2  -3/1   3/1  11/2   3/2   3/2   8/2   4/1  10/2 
  3/2   7/2   0/1   2/1   4/2   6/2   5/2   0/2  -3/1   2/2   7/2   0/2   2/1   5/2   8/2   8/2   4/2  -2/1   6/2   3/2 
  3/1   1/2   4/1   4/2  -2/1   4/2   9/2   1/2   3/1   6/2   8/2   7/2   3/2  -2/1   6/2   2/2   2/1  -5/2   3/1  -3/1 
  9/2  -3/1  -1/2   4/1  -2/2   4/1   5/2  -5/1   0/1   1/2  -1/2  -4/1   3/1  -3/2   4/2  -3/1  -3/1   2/1   7/2  -2/1 
  7/2   0/2   2/1   6/2   4/1  12/2   0/2   0/1  -4/2  -1/1  -4/1   0/1   2/2   3/1  11/2   1/2   1/1   2/2   2/2   0/1 
  5/2   5/2   0/2  -3/1   4/2  11/2   4/2   5/2   3/2  -1/2  -3/1   3/1   6/2   8/2   9/2   6/2  -1/2  -5/1   1/1   3/2 
  3/2   9/2   0/2   3/1   7/2   9/2   9/2   7/2   2/2  -4/1  -2/1  -3/2   0/2   0/2   7/2  10/2   0/2   2/1   3/2   5/2 
  3/1   3/2   4/1   6/2  -1/2  -2/2  -4/1   3/1  -1/2  -5/1  -1/1  -1/1  -5/1  -4/1   4/2   4/2  -5/1  -1/1  -1/1  -3/2 
  9/2  -2/1   0/2  -5/1  -3/1  -5/1  -1/1   0/2   3/1   4/1   3/2   3/1   1/1   4/1  12/2  -1/2   0/1  -4/1  -2/1  -4/1 
  7/2   1/2   2/1   1/1  -5/1  -5/1   1/1   2/1   5/2   7/2   4/2   0/2  -4/1   2/2  10/2   4/2   5/2   3/2  -1/2  -2/1 
  5/2   5/2   0/2  -3/1   3/1  -5/1   3/1   2/2  -4/1   1/1   4/2  -1/1   1/1   3/2   8/2   8/2   6/2   2/2  -3/1   0/1 

(49.0, 2.0, 1)
(21, 16, 2, 12.0)
#+end_example


** part 2 C
#+BEGIN_SRC python :results output
  import math
  from collections import defaultdict

  def power(x,y, grid_serial_number):
    rack_id = x + 10
    power_level = rack_id * y
    power_level += grid_serial_number
    power_level *= rack_id
    power_level = math.floor(power_level / 100) % 10
    power_level -= 5
    return power_level

  def f(grid_serial_number):
    grid = defaultdict(int)
    for x in xrange(1, 301):
      for y in xrange(1, 301):
        grid[(x,y)] = power(x,y, grid_serial_number)

    grid_sum_xs = defaultdict(int)
    grid_sum_ys = defaultdict(int)
    for x in xrange(1, 301):
      for y in xrange(1, 301):
        grid_sum_xs[(x,y)] = grid_sum_xs[(x-1,y)] + grid[(x,y)]
        grid_sum_ys[(x,y)] = grid_sum_ys[(x,y-1)] + grid[(x,y)]

    # for y in xrange(1, 11):
    #   l = ""
    #   for x in xrange(1, 11):
    #     l += "%2d " % grid[(x,y)]
    #   print(l)
    # print()

    max_val = 0
    out = (0,0,0)
    for x in xrange(1, 301):
      for y in xrange(1, 301):
        val = 0
        for s in xrange(301-max(x,y)):
          val += grid[(x+s,y+s)]
          val += grid_sum_xs[(x+s-1,y+s)] - grid_sum_xs[(x-1,y+s)]
          val += grid_sum_ys[(x+s,y+s-1)] - grid_sum_ys[(x+s,y-1)]
          # if x < 11 and y < 11 and s < 3:
          #   print(x,y,s,val, grid[(x+s,y+s)])
          #   print((x+s-1,y+s), grid_sum_xs[(x+s-1,y+s)], (x-1,y+s), grid_sum_xs[(x-1,y+s)])
          #   print((x+s,y+s-1), grid_sum_ys[(x+s,y+s-1)], (x+s,y-1), grid_sum_ys[(x+s,y-1)])
          if val > max_val:
            max_val = val
            out = (x,y,s+1)

    return out
  assert f(18) == (90, 269, 16)
  assert f(42) == (232, 251, 12)
  print(f(int(open("11.txt").read())))
#+END_SRC

#+RESULTS:
: (235, 268, 13)
* day 12
** puzzle
--- Day 12: Subterranean Sustainability ---

The year 518 is significantly more underground than your history books implied. Either that, or you've arrived in a vast cavern network under the North Pole.

After exploring a little, you discover a long tunnel that contains a row of small pots as far as you can see to your left and right. A few of them contain plants - someone is trying to grow things in these geothermally-heated caves.

The pots are numbered, with 0 in front of you. To the left, the pots are numbered -1, -2, -3, and so on; to the right, 1, 2, 3.... Your puzzle input contains a list of pots from 0 to the right and whether they do (#) or do not (.) currently contain a plant, the initial state. (No other pots currently contain plants.) For example, an initial state of #..##.... indicates that pots 0, 3, and 4 currently contain plants.

Your puzzle input also contains some notes you find on a nearby table: someone has been trying to figure out how these plants spread to nearby pots. Based on the notes, for each generation of plants, a given pot has or does not have a plant based on whether that pot (and the two pots on either side of it) had a plant in the last generation. These are written as LLCRR => N, where L are pots to the left, C is the current pot being considered, R are the pots to the right, and N is whether the current pot will have a plant in the next generation. For example:

    A note like ..#.. => . means that a pot that contains a plant but with no plants within two pots of it will not have a plant in it during the next generation.
    A note like ##.## => . means that an empty pot with two plants on each side of it will remain empty in the next generation.
    A note like .##.# => # means that a pot has a plant in a given generation if, in the previous generation, there were plants in that pot, the one immediately to the left, and the one two pots to the right, but not in the ones immediately to the right and two to the left.

It's not clear what these plants are for, but you're sure it's important, so you'd like to make sure the current configuration of plants is sustainable by determining what will happen after 20 generations.

For example, given the following input:

initial state: #..#.#..##......###...###

...## => #
..#.. => #
.#... => #
.#.#. => #
.#.## => #
.##.. => #
.#### => #
#.#.# => #
#.### => #
##.#. => #
##.## => #
###.. => #
###.# => #
####. => #

For brevity, in this example, only the combinations which do produce a plant are listed. (Your input includes all possible combinations.) Then, the next 20 generations will look like this:

                 1         2         3     
       0         0         0         0     
 0: ...#..#.#..##......###...###...........
 1: ...#...#....#.....#..#..#..#...........
 2: ...##..##...##....#..#..#..##..........
 3: ..#.#...#..#.#....#..#..#...#..........
 4: ...#.#..#...#.#...#..#..##..##.........
 5: ....#...##...#.#..#..#...#...#.........
 6: ....##.#.#....#...#..##..##..##........
 7: ...#..###.#...##..#...#...#...#........
 8: ...#....##.#.#.#..##..##..##..##.......
 9: ...##..#..#####....#...#...#...#.......
10: ..#.#..#...#.##....##..##..##..##......
11: ...#...##...#.#...#.#...#...#...#......
12: ...##.#.#....#.#...#.#..##..##..##.....
13: ..#..###.#....#.#...#....#...#...#.....
14: ..#....##.#....#.#..##...##..##..##....
15: ..##..#..#.#....#....#..#.#...#...#....
16: .#.#..#...#.#...##...#...#.#..##..##...
17: ..#...##...#.#.#.#...##...#....#...#...
18: ..##.#.#....#####.#.#.#...##...##..##..
19: .#..###.#..#.#.#######.#.#.#..#.#...#..
20: .#....##....#####...#######....#.#..##.

The generation is shown along the left, where 0 is the initial state. The pot numbers are shown along the top, where 0 labels the center pot, negative-numbered pots extend to the left, and positive pots extend toward the right. Remember, the initial state begins at pot 0, which is not the leftmost pot used in this example.

After one generation, only seven plants remain. The one in pot 0 matched the rule looking for ..#.., the one in pot 4 matched the rule looking for .#.#., pot 9 matched .##.., and so on.

In this example, after 20 generations, the pots shown as # contain plants, the furthest left of which is pot -2, and the furthest right of which is pot 34. Adding up all the numbers of plant-containing pots after the 20th generation produces 325.

After 20 generations, what is the sum of the numbers of all pots which contain a plant?

Your puzzle answer was 3221.
--- Part Two ---

You realize that 20 generations aren't enough. After all, these plants will need to last another 1500 years to even reach your timeline, not to mention your future.

After fifty billion (50000000000) generations, what is the sum of the numbers of all pots which contain a plant?

Your puzzle answer was 2600000001872.

Both parts of this puzzle are complete! They provide two gold stars: **
** part 1
#+BEGIN_SRC python :results output
  from collections import defaultdict

  def ff(input):
    initial = list(input[0][15:].strip())
    perms = defaultdict(lambda: ".")
    for rule in input[2:]:
      perms[rule[0:5]] = rule[9]
    return f(initial, perms)

  def f(initial, perms):
    print(initial)
    print(perms.items())
    befores = 5
    state = [ "." for _ in range(befores) ] + initial + list("." * 100)
    print("%2d: %s" % (0, "".join(state)))
    for gen in xrange(20):
      new = []
      key = list("..") + state[:2]
      for i in xrange(len(state)):
        key = ""
        for j in xrange(-2, 3):
          if 0 <= i + j < len(state):
            key += state[i + j]
          else:
            key += "."
        new.append(perms[key])
      state = new
      print("%2d: %s" % (gen+1, "".join(state)))

    return sum([ i - befores for i in xrange(len(state)) if state[i] == "#" ])

  # print(ff(["initial state: #..#.#..##......###...###", "", "...## => #",
  #          "..#.. => #", ".#... => #", ".#.#. => #", ".#.## => #", ".##.. => #",
  #          ".#### => #", "#.#.# => #", "#.### => #", "##.#. => #", "##.## => #",
           # "###.. => #", "###.# => #", "####. => #"]))
  print(ff(list(open("12.txt"))))
#+END_SRC

#+RESULTS:
#+begin_example


 0: .....###.......##....#.#.#..###.##..##.....#....#.#.....##.###...###.#...###.###.#.###...#.####.##.#....#....................................................................................................
 1: .....####.......##..##.#.#..######...##...###..##.##......#####..###.##..#######.#.####.##.#..###..##..###...................................................................................................
 2: .....#..##.......#.....#.#..#.##.##...##..###....####.....#.#.#..######..#.###.#.#.#..###..#..###...#..####..................................................................................................
 3: ....##...##.....###...##.#.##.#.####...#..####...#..##...##.#.#..#.##.#.##.###.#.#.#..###.##..####.##..#..##.................................................................................................
 4: .....##...##....####.....#.#..#.#..##.##..#..##.##...##.....#.#.##.#..#.#.####.#.#.#..######..#..####.##...##................................................................................................
 5: ......##...##...#..##...##.#.##.#....###.##....####...##...##.#.#..#.##.#.#..#.#.#.#..#.##.#.##..#..#####...##...............................................................................................
 6: .......##...##.##...##.....#.#..##...#######...#..##...##.....#.#.##.#..#.#.##.#.#.#.##.#..#.##.##..#.#.##...##..............................................................................................
 7: ........##....####...##...##.#...##..#.###.##.##...##...##...##.#.#..#.##.#.#..#.#.#.#..#.##.#.###.##.#.###...##.............................................................................................
 8: .........##...#..##...##.....##...#.##.#####.####...##...##.....#.#.##.#..#.#.##.#.#.#.##.#..#.#####..#.####...##............................................................................................
 9: ..........##.##...##...##.....##.##.#.##.#.###..##...##...##...##.#.#..#.##.#.#..#.#.#.#..#.##.#.#.#.##.#..##...##...........................................................................................
10: ............####...##...##......##..#.#..#.###...##...##...##.....#.#.##.#..#.#.##.#.#.#.##.#..#.#.#.#..#...##...##..........................................................................................
11: ............#..##...##...##......#.##.#.##.####...##...##...##...##.#.#..#.##.#.#..#.#.#.#..#.##.#.#.#.###...##...##.........................................................................................
12: ...........##...##...##...##....##.#..#.#.##..##...##...##...##.....#.#.##.#..#.#.##.#.#.#.##.#..#.#.#.####...##...##........................................................................................
13: ............##...##...##...##......#.##.#.##...##...##...##...##...##.#.#..#.##.#.#..#.#.#.#..#.##.#.#.#..##...##...##.......................................................................................
14: .............##...##...##...##....##.#..#.###...##...##...##...##.....#.#.##.#..#.#.##.#.#.#.##.#..#.#.#...##...##...##......................................................................................
15: ..............##...##...##...##......#.##.####...##...##...##...##...##.#.#..#.##.#.#..#.#.#.#..#.##.#.##...##...##...##.....................................................................................
16: ...............##...##...##...##....##.#.##..##...##...##...##...##.....#.#.##.#..#.#.##.#.#.#.##.#..#.###...##...##...##....................................................................................
17: ................##...##...##...##......#.##...##...##...##...##...##...##.#.#..#.##.#.#..#.#.#.#..#.##.####...##...##...##...................................................................................
18: .................##...##...##...##....##.###...##...##...##...##...##.....#.#.##.#..#.#.##.#.#.#.##.#.##..##...##...##...##..................................................................................
19: ..................##...##...##...##.....#####...##...##...##...##...##...##.#.#..#.##.#.#..#.#.#.#..#.##...##...##...##...##.................................................................................
20: ...................##...##...##...##....#.#.##...##...##...##...##...##.....#.#.##.#..#.#.##.#.#.#.##.###...##...##...##...##................................................................................
3221
#+end_example
 
 - 2793 too low

** part 2
#+BEGIN_SRC python :results output
  from collections import defaultdict

  def ff(input):
    initial = list(input[0][15:].strip())
    perms = defaultdict(lambda: ".")
    for rule in input[2:]:
      perms[rule[0:5]] = rule[9]
    return f(initial, perms)

  def f(initial, perms):
    first = 0
    state = initial
    print("%2d %3d: %s" % (0, first, " "*(5-first) + "".join(state)))
    for gen in xrange(2000):
      new = []
      seen_first_plant = False
      i_latest_plant = 0
      for i in xrange(-2, len(state)+2):
        key = ""
        for j in xrange(-2, 3):
          if 0 <= i + j < len(state):
            key += state[i + j]
          else:
            key += "."
        if not seen_first_plant: 
          if perms[key] == "#":
            seen_first_plant = True
            first = first + i
            new.append(perms[key])
        else:
          new.append(perms[key])
          if perms[key] == "#":
            i_latest_plant = len(new)
      new = new[:i_latest_plant]
      # print("%2d %3d: %s" % (gen+1, first, " "*(5+first) + "".join(state)))
      if new == state:
        print("%2d %3d: %s" % (gen+1, first, " "*(5+first) + "".join(state)))
        return (new, gen, first)
      state = new
    return sum([ i + first for i in xrange(len(state)) if state[i] == "#" ])
    return None

  def f0(input):
    print(ff(input))
    state, gen, first = ff(input)
    return sum([ i + (50000000000 - gen-1 + first) for i in xrange(len(state)) if state[i] == "#" ])
  # print(ff(["initial state: #..#.#..##......###...###", "", "...## => #",
  #          "..#.. => #", ".#... => #", ".#.#. => #", ".#.## => #", ".##.. => #",
  #          ".#### => #", "#.#.# => #", "#.### => #", "##.#. => #", "##.## => #",
  #          "###.. => #", "###.# => #", "####. => #"]))
  #print(ff(list(open("12.txt"))))
  print(f0(list(open("12.txt"))))
#+END_SRC

#+RESULTS:
:  0   0:      ###.......##....#.#.#..###.##..##.....#....#.#.....##.###...###.#...###.###.#.###...#.####.##.#....#
: 130 103:                                                                                                             ##...##...##...##...##...##...##...##...##...##...##...##...##...##...##...##...##...##...##...##...##...##...##...##...##...##

:  0   0:      ###.......##....#.#.#..###.##..##.....#....#.#.....##.###...###.#...###.###.#.###...#.####.##.#....#
: 130 103:                                                                                                             ##...##...##...##...##...##...##...##...##...##...##...##...##...##...##...##...##...##...##...##...##...##...##...##...##...##
: 2600000001872
 
 - 2793 too low
 - 200 = 12272
 - 2000 = 105872
* day 13
** puzzle
--- Day 13: Mine Cart Madness ---

A crop of this size requires significant logistics to transport produce, soil, fertilizer, and so on. The Elves are very busy pushing things around in carts on some kind of rudimentary system of tracks they've come up with.

Seeing as how cart-and-track systems don't appear in recorded history for another 1000 years, the Elves seem to be making this up as they go along. They haven't even figured out how to avoid collisions yet.

You map out the tracks (your puzzle input) and see where you can help.

Tracks consist of straight paths (| and -), curves (/ and \), and intersections (+). Curves connect exactly two perpendicular pieces of track; for example, this is a closed loop:

/----\
|    |
|    |
\----/

Intersections occur when two perpendicular paths cross. At an intersection, a cart is capable of turning left, turning right, or continuing straight. Here are two loops connected by two intersections:

/-----\
|     |
|  /--+--\
|  |  |  |
\--+--/  |
   |     |
   \-----/

Several carts are also on the tracks. Carts always face either up (^), down (v), left (<), or right (>). (On your initial map, the track under each cart is a straight path matching the direction the cart is facing.)

Each time a cart has the option to turn (by arriving at any intersection), it turns left the first time, goes straight the second time, turns right the third time, and then repeats those directions starting again with left the fourth time, straight the fifth time, and so on. This process is independent of the particular intersection at which the cart has arrived - that is, the cart has no per-intersection memory.

Carts all move at the same speed; they take turns moving a single step at a time. They do this based on their current location: carts on the top row move first (acting from left to right), then carts on the second row move (again from left to right), then carts on the third row, and so on. Once each cart has moved one step, the process repeats; each of these loops is called a tick.

For example, suppose there are two carts on a straight track:

|  |  |  |  |
v  |  |  |  |
|  v  v  |  |
|  |  |  v  X
|  |  ^  ^  |
^  ^  |  |  |
|  |  |  |  |

First, the top cart moves. It is facing down (v), so it moves down one square. Second, the bottom cart moves. It is facing up (^), so it moves up one square. Because all carts have moved, the first tick ends. Then, the process repeats, starting with the first cart. The first cart moves down, then the second cart moves up - right into the first cart, colliding with it! (The location of the crash is marked with an X.) This ends the second and last tick.

Here is a longer example:

/->-\        
|   |  /----\
| /-+--+-\  |
| | |  | v  |
\-+-/  \-+--/
  \------/   

/-->\        
|   |  /----\
| /-+--+-\  |
| | |  | |  |
\-+-/  \->--/
  \------/   

/---v        
|   |  /----\
| /-+--+-\  |
| | |  | |  |
\-+-/  \-+>-/
  \------/   

/---\        
|   v  /----\
| /-+--+-\  |
| | |  | |  |
\-+-/  \-+->/
  \------/   

/---\        
|   |  /----\
| /->--+-\  |
| | |  | |  |
\-+-/  \-+--^
  \------/   

/---\        
|   |  /----\
| /-+>-+-\  |
| | |  | |  ^
\-+-/  \-+--/
  \------/   

/---\        
|   |  /----\
| /-+->+-\  ^
| | |  | |  |
\-+-/  \-+--/
  \------/   

/---\        
|   |  /----<
| /-+-->-\  |
| | |  | |  |
\-+-/  \-+--/
  \------/   

/---\        
|   |  /---<\
| /-+--+>\  |
| | |  | |  |
\-+-/  \-+--/
  \------/   

/---\        
|   |  /--<-\
| /-+--+-v  |
| | |  | |  |
\-+-/  \-+--/
  \------/   

/---\        
|   |  /-<--\
| /-+--+-\  |
| | |  | v  |
\-+-/  \-+--/
  \------/   

/---\        
|   |  /<---\
| /-+--+-\  |
| | |  | |  |
\-+-/  \-<--/
  \------/   

/---\        
|   |  v----\
| /-+--+-\  |
| | |  | |  |
\-+-/  \<+--/
  \------/   

/---\        
|   |  /----\
| /-+--v-\  |
| | |  | |  |
\-+-/  ^-+--/
  \------/   

/---\        
|   |  /----\
| /-+--+-\  |
| | |  X |  |
\-+-/  \-+--/
  \------/   

After following their respective paths for a while, the carts eventually crash. To help prevent crashes, you'd like to know the location of the first crash. Locations are given in X,Y coordinates, where the furthest left column is X=0 and the furthest top row is Y=0:

           111
 0123456789012
0/---\        
1|   |  /----\
2| /-+--+-\  |
3| | |  X |  |
4\-+-/  \-+--/
5  \------/   

In this example, the location of the first crash is 7,3.

Your puzzle answer was 32,8.
--- Part Two ---

There isn't much you can do to prevent crashes in this ridiculous system. However, by predicting the crashes, the Elves know where to be in advance and instantly remove the two crashing carts the moment any crash occurs.

They can proceed like this for a while, but eventually, they're going to run out of carts. It could be useful to figure out where the last cart that hasn't crashed will end up.

For example:

/>-<\  
|   |  
| /<+-\
| | | v
\>+</ |
  |   ^
  \<->/

/---\  
|   |  
| v-+-\
| | | |
\-+-/ |
  |   |
  ^---^

/---\  
|   |  
| /-+-\
| v | |
\-+-/ |
  ^   ^
  \---/

/---\  
|   |  
| /-+-\
| | | |
\-+-/ ^
  |   |
  \---/

After four very expensive crashes, a tick ends with only one cart remaining; its final location is 6,4.

What is the location of the last cart at the end of the first tick where it is the only cart left?

Your puzzle answer was 38,38.

Both parts of this puzzle are complete! They provide two gold stars: **
** part 1
#+BEGIN_SRC python :results output
  import copy
  import sys
  from collections import defaultdict
  def f(map):
    map = [ list(line.strip("\n")) for line in map ]

    rawmap = copy.deepcopy(map)
    for y in xrange(len(map)):
      for x in xrange(len(map[0])):
        if rawmap[y][x] in ["<", ">"]:
          rawmap[y][x] = "-"
        elif rawmap[y][x] in ["^", "v"]:
          rawmap[y][x] = "|"

    nextturn = defaultdict(lambda:"left")
    for _ in xrange(1000):
      # for y in xrange(len(map)):
      #   for x in xrange(len(map[0])):
      #     sys.stdout.write(map[y][x])
      #   print

      newmap = copy.deepcopy(map)

      turn_slash = {"^":">", ">":"^", "v":"<", "<":"v"}
      turn_backslash = {"^":"<", ">":"v", "v":">", "<":"^"}
      turn_left = {"^":"<", ">":"^", "v":">", "<":"v"}
      turn_right = {"^":">", ">":"v", "v":"<", "<":"^"}

      for y in xrange(len(map)):
        for x in xrange(len(map[0])):
          c = map[y][x]
          nx, ny = None, None
          if c == "^":
            nx, ny = (x, y-1)
          elif c == ">":
            nx, ny = (x+1, y)
          elif c == "v":
            nx, ny = (x, y+1)
          elif c == "<": 
            nx, ny = (x-1, y)
          else:
            continue
          newmap[y][x] = rawmap[y][x]
          n = newmap[ny][nx]
          # print ((x,y), c, (nx,ny), n, nextturn[(x,y)])
          new = None
          if n in ["^", ">", "v", "<"]:
            new = "X"
            return "%d,%d" % (nx,ny)
          elif n in ["-", "|"]:
            new = c
          elif n == "/":
            new = turn_slash[c]
          elif n == "\\":
            new = turn_backslash[c]
          elif n == "+":
            turn = nextturn[(x,y)]
            if turn == "left":
              new = turn_left[c]
              nextturn[(x,y)] = "straight"
            elif turn == "straight":
              new = c
              nextturn[(x,y)] = "right"
            elif turn == "right":
              new = turn_right[c]
              nextturn[(x,y)] = "left"
          else:
            raise
          nextturn[(nx,ny)] = nextturn[(x,y)]
          newmap[ny][nx] = new
      map = newmap

    return None

  # print(f([
  # r"/->-\        ",
  # r"|   |  /----\\",
  # r"| /-+--+-\  |",
  # r"| | |  | v  |",
  # r"\-+-/  \-+--/",
  # r"  \------/   "]))
  print(f(list(open("13.txt"))))
#+END_SRC

#+RESULTS:
: 32,8

** part 2
#+BEGIN_SRC python :results output
  import copy
  import sys
  from collections import defaultdict
  def f(map):
    map = [ list(line.strip("\n")) for line in map ]

    rawmap = copy.deepcopy(map)
    for y in xrange(len(map)):
      for x in xrange(len(map[0])):
        if rawmap[y][x] in ["<", ">"]:
          rawmap[y][x] = "-"
        elif rawmap[y][x] in ["^", "v"]:
          rawmap[y][x] = "|"

    turn_slash = {"^":">", ">":"^", "v":"<", "<":"v"}
    turn_backslash = {"^":"<", ">":"v", "v":">", "<":"^"}
    turn_left = {"^":"<", ">":"^", "v":">", "<":"v"}
    turn_right = {"^":">", ">":"v", "v":"<", "<":"^"}

    nextturn = defaultdict(lambda:"left")
    for tick in xrange(100000):
      # for y in xrange(len(map)):
      #   for x in xrange(len(map[0])):
      #     sys.stdout.write(map[y][x])
      #   print
      # print

      newmap = copy.deepcopy(map)

      oldmap = copy.deepcopy(map)
      crashed = False
      for y in xrange(len(map)):
        for x in xrange(len(map[0])):
          c = map[y][x]
          nx, ny = None, None
          if c == "^":
            nx, ny = (x, y-1)
          elif c == ">":
            nx, ny = (x+1, y)
          elif c == "v":
            nx, ny = (x, y+1)
          elif c == "<": 
            nx, ny = (x-1, y)
          else:
            continue
          if rawmap[y][x] == " ":
            raise "ARGH"
          newmap[y][x] = rawmap[y][x]
          n = newmap[ny][nx]
          # print ((x,y), c, (nx,ny), n, nextturn[(x,y)])
          new = False
          if n in ["^", ">", "v", "<"]:
            map[ny][nx] = rawmap[y][x]
            newmap[ny][nx] = rawmap[ny][nx]
            new = False
            print("crash", (nx,ny))
            crashed = True
          elif n in ["-", "|"]:
            new = c
          elif n == "/":
            new = turn_slash[c]
          elif n == "\\":
            new = turn_backslash[c]
          elif n == "+":
            turn = nextturn[(x,y)]
            if turn == "left":
              new = turn_left[c]
              nextturn[(x,y)] = "straight"
            elif turn == "straight":
              new = c
              nextturn[(x,y)] = "right"
            elif turn == "right":
              new = turn_right[c]
              nextturn[(x,y)] = "left"
          else:
            raise
          nextturn[(nx,ny)] = nextturn[(x,y)]
          if new:
            newmap[ny][nx] = new
      map = newmap

      # if crashed:
      #   print (tick)
      #   for y in xrange(len(map)):
      #     for x in xrange(len(map[0])):
      #       sys.stdout.write(map[y][x])
      #     print
      #   print

      cartxy = (0,0)
      carts = 0
      for y in xrange(len(map)):
        for x in xrange(len(map[0])):
          if map[y][x] in ["^", ">", "v", "<"]:
            carts += 1
            cartxy = (x,y)
      if carts <= 1:
        print (tick, carts)
        return "%d,%d" % cartxy

    return None

  # print(f([
  # r"/>-<\  ",
  # r"|   |  ",
  # r"| /<+-\\",
  # r"| | | v",
  # r"\>+</ |",
  # r"  |   ^",
  # r"  \<->/"]))
  print(f(list(open("13.txt"))))
#+END_SRC

#+RESULTS:
#+begin_example
38,38
#+end_example

 - wrong 149,26 (5363, 1)
* day 14
** puzzle
--- Day 14: Chocolate Charts ---

You finally have a chance to look at all of the produce moving around. Chocolate, cinnamon, mint, chili peppers, nutmeg, vanilla... the Elves must be growing these plants to make hot chocolate! As you realize this, you hear a conversation in the distance. When you go to investigate, you discover two Elves in what appears to be a makeshift underground kitchen/laboratory.

The Elves are trying to come up with the ultimate hot chocolate recipe; they're even maintaining a scoreboard which tracks the quality score (0-9) of each recipe.

Only two recipes are on the board: the first recipe got a score of 3, the second, 7. Each of the two Elves has a current recipe: the first Elf starts with the first recipe, and the second Elf starts with the second recipe.

To create new recipes, the two Elves combine their current recipes. This creates new recipes from the digits of the sum of the current recipes' scores. With the current recipes' scores of 3 and 7, their sum is 10, and so two new recipes would be created: the first with score 1 and the second with score 0. If the current recipes' scores were 2 and 3, the sum, 5, would only create one recipe (with a score of 5) with its single digit.

The new recipes are added to the end of the scoreboard in the order they are created. So, after the first round, the scoreboard is 3, 7, 1, 0.

After all new recipes are added to the scoreboard, each Elf picks a new current recipe. To do this, the Elf steps forward through the scoreboard a number of recipes equal to 1 plus the score of their current recipe. So, after the first round, the first Elf moves forward 1 + 3 = 4 times, while the second Elf moves forward 1 + 7 = 8 times. If they run out of recipes, they loop back around to the beginning. After the first round, both Elves happen to loop around until they land on the same recipe that they had in the beginning; in general, they will move to different recipes.

Drawing the first Elf as parentheses and the second Elf as square brackets, they continue this process:

(3)[7]
(3)[7] 1  0 
 3  7  1 [0](1) 0 
 3  7  1  0 [1] 0 (1)
(3) 7  1  0  1  0 [1] 2 
 3  7  1  0 (1) 0  1  2 [4]
 3  7  1 [0] 1  0 (1) 2  4  5 
 3  7  1  0 [1] 0  1  2 (4) 5  1 
 3 (7) 1  0  1  0 [1] 2  4  5  1  5 
 3  7  1  0  1  0  1  2 [4](5) 1  5  8 
 3 (7) 1  0  1  0  1  2  4  5  1  5  8 [9]
 3  7  1  0  1  0  1 [2] 4 (5) 1  5  8  9  1  6 
 3  7  1  0  1  0  1  2  4  5 [1] 5  8  9  1 (6) 7 
 3  7  1  0 (1) 0  1  2  4  5  1  5 [8] 9  1  6  7  7 
 3  7 [1] 0  1  0 (1) 2  4  5  1  5  8  9  1  6  7  7  9 
 3  7  1  0 [1] 0  1  2 (4) 5  1  5  8  9  1  6  7  7  9  2 

The Elves think their skill will improve after making a few recipes (your puzzle input). However, that could take ages; you can speed this up considerably by identifying the scores of the ten recipes after that. For example:

    If the Elves think their skill will improve after making 9 recipes, the scores of the ten recipes after the first nine on the scoreboard would be 5158916779 (highlighted in the last line of the diagram).
    After 5 recipes, the scores of the next ten would be 0124515891.
    After 18 recipes, the scores of the next ten would be 9251071085.
    After 2018 recipes, the scores of the next ten would be 5941429882.

What are the scores of the ten recipes immediately after the number of recipes in your puzzle input?

Your puzzle answer was 4910101614.
--- Part Two ---

As it turns out, you got the Elves' plan backwards. They actually want to know how many recipes appear on the scoreboard to the left of the first recipes whose scores are the digits from your puzzle input.

    51589 first appears after 9 recipes.
    01245 first appears after 5 recipes.
    92510 first appears after 18 recipes.
    59414 first appears after 2018 recipes.

How many recipes appear on the scoreboard to the left of the score sequence in your puzzle input?

Your puzzle answer was 20253137.

Both parts of this puzzle are complete! They provide two gold stars: **
** part 1
 - <2018-12-15 Sat 20:58>
#+BEGIN_SRC python :results output
  def f(input):
    recipes = [ 3, 7 ]
    elf1 = 0
    elf2 = 1
    for recipe in xrange(1, input+10):
      # print(recipe, elf1, elf2, recipes)
      recipes.extend([ int(c) for c in str(recipes[elf1] + recipes[elf2]) ])
      elf1 = (elf1 + 1 + recipes[elf1]) % len(recipes)
      elf2 = (elf2 + 1 + recipes[elf2]) % len(recipes)
    return "".join([ str(recipes[i]) for i in xrange(input, input+10) ])

  #print(f(2018))
  print(f(int(open("14.txt").read())))
#+END_SRC

#+RESULTS:
: 4910101614
 - <2018-12-15 Sat 21:23>
** part 2
#+BEGIN_SRC python :results output
  def f(input):
    check = [ int(c) for c in input ]
    recipes = [ 3, 7 ]
    elf1 = 0
    elf2 = 1
    while True:
      # print(recipe, elf1, elf2, recipes)
      recipes.extend([ int(c) for c in str(recipes[elf1] + recipes[elf2]) ])
      elf1 = (elf1 + 1 + recipes[elf1]) % len(recipes)
      elf2 = (elf2 + 1 + recipes[elf2]) % len(recipes)
      if recipes[-len(check):] == check:
        return len(recipes) - len(check)
      if recipes[-len(check)-1:-1] == check:
        return len(recipes) - len(check) - 1
    return None

  print(f("51589"))
  print(f("01245"))
  print(f("92510"))
  print(f("59414"))
  print(f("793031"))
  #print(f(open("14.txt").read().strip()))
#+END_SRC

#+RESULTS:
: 9
: 5
: 18
: 2018
: 20253137

 - 172962059 too high
 - <2018-12-15 Sat 21:35>
* day 15
** puzzle
--- Day 15: Beverage Bandits ---

Having perfected their hot chocolate, the Elves have a new problem: the Goblins that live in these caves will do anything to steal it. Looks like they're here for a fight.

You scan the area, generating a map of the walls (#), open cavern (.), and starting position of every Goblin (G) and Elf (E) (your puzzle input).

Combat proceeds in rounds; in each round, each unit that is still alive takes a turn, resolving all of its actions before the next unit's turn begins. On each unit's turn, it tries to move into range of an enemy (if it isn't already) and then attack (if it is in range).

All units are very disciplined and always follow very strict combat rules. Units never move or attack diagonally, as doing so would be dishonorable. When multiple choices are equally valid, ties are broken in reading order: top-to-bottom, then left-to-right. For instance, the order in which units take their turns within a round is the reading order of their starting positions in that round, regardless of the type of unit or whether other units have moved after the round started. For example:

                 would take their
These units:   turns in this order:
  #######           #######
  #.G.E.#           #.1.2.#
  #E.G.E#           #3.4.5#
  #.G.E.#           #.6.7.#
  #######           #######

Each unit begins its turn by identifying all possible targets (enemy units). If no targets remain, combat ends.

Then, the unit identifies all of the open squares (.) that are in range of each target; these are the squares which are adjacent (immediately up, down, left, or right) to any target and which aren't already occupied by a wall or another unit. Alternatively, the unit might already be in range of a target. If the unit is not already in range of a target, and there are no open squares which are in range of a target, the unit ends its turn.

If the unit is already in range of a target, it does not move, but continues its turn with an attack. Otherwise, since it is not in range of a target, it moves.

To move, the unit first considers the squares that are in range and determines which of those squares it could reach in the fewest steps. A step is a single movement to any adjacent (immediately up, down, left, or right) open (.) square. Units cannot move into walls or other units. The unit does this while considering the current positions of units and does not do any prediction about where units will be later. If the unit cannot reach (find an open path to) any of the squares that are in range, it ends its turn. If multiple squares are in range and tied for being reachable in the fewest steps, the square which is first in reading order is chosen. For example:

Targets:      In range:     Reachable:    Nearest:      Chosen:
#######       #######       #######       #######       #######
#E..G.#       #E.?G?#       #E.@G.#       #E.!G.#       #E.+G.#
#...#.#  -->  #.?.#?#  -->  #.@.#.#  -->  #.!.#.#  -->  #...#.#
#.G.#G#       #?G?#G#       #@G@#G#       #!G.#G#       #.G.#G#
#######       #######       #######       #######       #######

In the above scenario, the Elf has three targets (the three Goblins):

    Each of the Goblins has open, adjacent squares which are in range (marked with a ? on the map).
    Of those squares, four are reachable (marked @); the other two (on the right) would require moving through a wall or unit to reach.
    Three of these reachable squares are nearest, requiring the fewest steps (only 2) to reach (marked !).
    Of those, the square which is first in reading order is chosen (+).

The unit then takes a single step toward the chosen square along the shortest path to that square. If multiple steps would put the unit equally closer to its destination, the unit chooses the step which is first in reading order. (This requires knowing when there is more than one shortest path so that you can consider the first step of each such path.) For example:

In range:     Nearest:      Chosen:       Distance:     Step:
#######       #######       #######       #######       #######
#.E...#       #.E...#       #.E...#       #4E212#       #..E..#
#...?.#  -->  #...!.#  -->  #...+.#  -->  #32101#  -->  #.....#
#..?G?#       #..!G.#       #...G.#       #432G2#       #...G.#
#######       #######       #######       #######       #######

The Elf sees three squares in range of a target (?), two of which are nearest (!), and so the first in reading order is chosen (+). Under "Distance", each open square is marked with its distance from the destination square; the two squares to which the Elf could move on this turn (down and to the right) are both equally good moves and would leave the Elf 2 steps from being in range of the Goblin. Because the step which is first in reading order is chosen, the Elf moves right one square.

Here's a larger example of movement:

Initially:
#########
#G..G..G#
#.......#
#.......#
#G..E..G#
#.......#
#.......#
#G..G..G#
#########

After 1 round:
#########
#.G...G.#
#...G...#
#...E..G#
#.G.....#
#.......#
#G..G..G#
#.......#
#########

After 2 rounds:
#########
#..G.G..#
#...G...#
#.G.E.G.#
#.......#
#G..G..G#
#.......#
#.......#
#########

After 3 rounds:
#########
#.......#
#..GGG..#
#..GEG..#
#G..G...#
#......G#
#.......#
#.......#
#########

Once the Goblins and Elf reach the positions above, they all are either in range of a target or cannot find any square in range of a target, and so none of the units can move until a unit dies.

After moving (or if the unit began its turn in range of a target), the unit attacks.

To attack, the unit first determines all of the targets that are in range of it by being immediately adjacent to it. If there are no such targets, the unit ends its turn. Otherwise, the adjacent target with the fewest hit points is selected; in a tie, the adjacent target with the fewest hit points which is first in reading order is selected.

The unit deals damage equal to its attack power to the selected target, reducing its hit points by that amount. If this reduces its hit points to 0 or fewer, the selected target dies: its square becomes . and it takes no further turns.

Each unit, either Goblin or Elf, has 3 attack power and starts with 200 hit points.

For example, suppose the only Elf is about to attack:

       HP:            HP:
G....  9       G....  9  
..G..  4       ..G..  4  
..EG.  2  -->  ..E..     
..G..  2       ..G..  2  
...G.  1       ...G.  1  

The "HP" column shows the hit points of the Goblin to the left in the corresponding row. The Elf is in range of three targets: the Goblin above it (with 4 hit points), the Goblin to its right (with 2 hit points), and the Goblin below it (also with 2 hit points). Because three targets are in range, the ones with the lowest hit points are selected: the two Goblins with 2 hit points each (one to the right of the Elf and one below the Elf). Of those, the Goblin first in reading order (the one to the right of the Elf) is selected. The selected Goblin's hit points (2) are reduced by the Elf's attack power (3), reducing its hit points to -1, killing it.

After attacking, the unit's turn ends. Regardless of how the unit's turn ends, the next unit in the round takes its turn. If all units have taken turns in this round, the round ends, and a new round begins.

The Elves look quite outnumbered. You need to determine the outcome of the battle: the number of full rounds that were completed (not counting the round in which combat ends) multiplied by the sum of the hit points of all remaining units at the moment combat ends. (Combat only ends when a unit finds no targets during its turn.)

Below is an entire sample combat. Next to each map, each row's units' hit points are listed from left to right.

Initially:
#######   
#.G...#   G(200)
#...EG#   E(200), G(200)
#.#.#G#   G(200)
#..G#E#   G(200), E(200)
#.....#   
#######   

After 1 round:
#######   
#..G..#   G(200)
#...EG#   E(197), G(197)
#.#G#G#   G(200), G(197)
#...#E#   E(197)
#.....#   
#######   

After 2 rounds:
#######   
#...G.#   G(200)
#..GEG#   G(200), E(188), G(194)
#.#.#G#   G(194)
#...#E#   E(194)
#.....#   
#######   

Combat ensues; eventually, the top Elf dies:

After 23 rounds:
#######   
#...G.#   G(200)
#..G.G#   G(200), G(131)
#.#.#G#   G(131)
#...#E#   E(131)
#.....#   
#######   

After 24 rounds:
#######   
#..G..#   G(200)
#...G.#   G(131)
#.#G#G#   G(200), G(128)
#...#E#   E(128)
#.....#   
#######   

After 25 rounds:
#######   
#.G...#   G(200)
#..G..#   G(131)
#.#.#G#   G(125)
#..G#E#   G(200), E(125)
#.....#   
#######   

After 26 rounds:
#######   
#G....#   G(200)
#.G...#   G(131)
#.#.#G#   G(122)
#...#E#   E(122)
#..G..#   G(200)
#######   

After 27 rounds:
#######   
#G....#   G(200)
#.G...#   G(131)
#.#.#G#   G(119)
#...#E#   E(119)
#...G.#   G(200)
#######   

After 28 rounds:
#######   
#G....#   G(200)
#.G...#   G(131)
#.#.#G#   G(116)
#...#E#   E(113)
#....G#   G(200)
#######   

More combat ensues; eventually, the bottom Elf dies:

After 47 rounds:
#######   
#G....#   G(200)
#.G...#   G(131)
#.#.#G#   G(59)
#...#.#   
#....G#   G(200)
#######   

Before the 48th round can finish, the top-left Goblin finds that there are no targets remaining, and so combat ends. So, the number of full rounds that were completed is 47, and the sum of the hit points of all remaining units is 200+131+59+200 = 590. From these, the outcome of the battle is 47 * 590 = 27730.

Here are a few example summarized combats:

#######       #######
#G..#E#       #...#E#   E(200)
#E#E.E#       #E#...#   E(197)
#G.##.#  -->  #.E##.#   E(185)
#...#E#       #E..#E#   E(200), E(200)
#...E.#       #.....#
#######       #######

Combat ends after 37 full rounds
Elves win with 982 total hit points left
Outcome: 37 * 982 = 36334

#######       #######   
#E..EG#       #.E.E.#   E(164), E(197)
#.#G.E#       #.#E..#   E(200)
#E.##E#  -->  #E.##.#   E(98)
#G..#.#       #.E.#.#   E(200)
#..E#.#       #...#.#   
#######       #######   

Combat ends after 46 full rounds
Elves win with 859 total hit points left
Outcome: 46 * 859 = 39514

#######       #######   
#E.G#.#       #G.G#.#   G(200), G(98)
#.#G..#       #.#G..#   G(200)
#G.#.G#  -->  #..#..#   
#G..#.#       #...#G#   G(95)
#...E.#       #...G.#   G(200)
#######       #######   

Combat ends after 35 full rounds
Goblins win with 793 total hit points left
Outcome: 35 * 793 = 27755

#######       #######   
#.E...#       #.....#   
#.#..G#       #.#G..#   G(200)
#.###.#  -->  #.###.#   
#E#G#G#       #.#.#.#   
#...#G#       #G.G#G#   G(98), G(38), G(200)
#######       #######   

Combat ends after 54 full rounds
Goblins win with 536 total hit points left
Outcome: 54 * 536 = 28944

#########       #########   
#G......#       #.G.....#   G(137)
#.E.#...#       #G.G#...#   G(200), G(200)
#..##..G#       #.G##...#   G(200)
#...##..#  -->  #...##..#   
#...#...#       #.G.#...#   G(200)
#.G...G.#       #.......#   
#.....G.#       #.......#   
#########       #########   

Combat ends after 20 full rounds
Goblins win with 937 total hit points left
Outcome: 20 * 937 = 18740

What is the outcome of the combat described in your puzzle input?

Your puzzle answer was 248235.
--- Part Two ---

According to your calculations, the Elves are going to lose badly. Surely, you won't mess up the timeline too much if you give them just a little advanced technology, right?

You need to make sure the Elves not only win, but also suffer no losses: even the death of a single Elf is unacceptable.

However, you can't go too far: larger changes will be more likely to permanently alter spacetime.

So, you need to find the outcome of the battle in which the Elves have the lowest integer attack power (at least 4) that allows them to win without a single death. The Goblins always have an attack power of 3.

In the first summarized example above, the lowest attack power the Elves need to win without losses is 15:

#######       #######
#.G...#       #..E..#   E(158)
#...EG#       #...E.#   E(14)
#.#.#G#  -->  #.#.#.#
#..G#E#       #...#.#
#.....#       #.....#
#######       #######

Combat ends after 29 full rounds
Elves win with 172 total hit points left
Outcome: 29 * 172 = 4988

In the second example above, the Elves need only 4 attack power:

#######       #######
#E..EG#       #.E.E.#   E(200), E(23)
#.#G.E#       #.#E..#   E(200)
#E.##E#  -->  #E.##E#   E(125), E(200)
#G..#.#       #.E.#.#   E(200)
#..E#.#       #...#.#
#######       #######

Combat ends after 33 full rounds
Elves win with 948 total hit points left
Outcome: 33 * 948 = 31284

In the third example above, the Elves need 15 attack power:

#######       #######
#E.G#.#       #.E.#.#   E(8)
#.#G..#       #.#E..#   E(86)
#G.#.G#  -->  #..#..#
#G..#.#       #...#.#
#...E.#       #.....#
#######       #######

Combat ends after 37 full rounds
Elves win with 94 total hit points left
Outcome: 37 * 94 = 3478

In the fourth example above, the Elves need 12 attack power:

#######       #######
#.E...#       #...E.#   E(14)
#.#..G#       #.#..E#   E(152)
#.###.#  -->  #.###.#
#E#G#G#       #.#.#.#
#...#G#       #...#.#
#######       #######

Combat ends after 39 full rounds
Elves win with 166 total hit points left
Outcome: 39 * 166 = 6474

In the last example above, the lone Elf needs 34 attack power:

#########       #########   
#G......#       #.......#   
#.E.#...#       #.E.#...#   E(38)
#..##..G#       #..##...#   
#...##..#  -->  #...##..#   
#...#...#       #...#...#   
#.G...G.#       #.......#   
#.....G.#       #.......#   
#########       #########   

Combat ends after 30 full rounds
Elves win with 38 total hit points left
Outcome: 30 * 38 = 1140

After increasing the Elves' attack power until it is just barely enough for them to win without any Elves dying, what is the outcome of the combat described in your puzzle input?

Your puzzle answer was 46784.

Both parts of this puzzle are complete! They provide two gold stars: **
** part 1
 - <2018-12-16 Sun 14:22>
#+BEGIN_SRC python :results output
  import sys
  from collections import deque

  maxdist = 99999999

  def neighbors(xy):
    x, y = xy
    return [ (x, y-1), (x+1, y), (x, y+1), (x-1, y) ]

  def dists(area, start):
    dist = [ [ maxdist for _ in area[0]] for _ in area ]
    sx, sy = start
    dist[sy][sx] = 0
    queue = deque([start])
    while queue:
      x, y = queue.popleft()
      for nx,ny in neighbors((x,y)):
        if area[ny][nx] == "." and dist[ny][nx] == maxdist:
          dist[ny][nx] = dist[y][x] + 1
          queue.append((nx,ny))
    return dist

  def tiles(area, tile):
    out = []
    for y in xrange(len(area)):
      for x in xrange(len(area[0])):
        if area[y][x] in tile:
          out.append((x,y))
    return out

  def next_moves(area, start, end):
    dist = {}

    return 1

  def sortedxys(xys):
    return sorted(xys, cmp=lambda a, b: a[1] - b[1] if a[1] != b[1] else a[0] - b[0])

  def turn(area, hps, xy):
    x,y = xy
    enemy = "E" if area[y][x] == "G" else "G"

    dist = dists(area, (x,y))
    targets = [ e for sub in map(neighbors, tiles(area, enemy)) for e in sub ]
    #move
    if targets and (x,y) not in targets:
      min_dist = min([ dist[ty][tx] for tx,ty in targets ])
      closest_targets = [ (tx,ty) for tx,ty in targets if dist[ty][tx] == min_dist ]
      closest_target = sortedxys(closest_targets)[0]
      closest_dist = dists(area, closest_target)
      shortest_moves = [ (mx,my) for mx,my in neighbors((x,y)) 
                         if closest_dist[my][mx] == min_dist - 1 ]
      if shortest_moves:
        (mx, my) = sortedxys(shortest_moves)[0]
        area[my][mx] = area[y][x]
        area[y][x] = "."
        # print("%s(%2d,%2d): move to (%2d,%2d)" % (area[my][mx], x,y, mx,my))
        hps[(mx,my)] = hps[(x,y)]
        del hps[(x,y)]
        x,y = mx,my

    #attack
    if (x,y) in targets:
      enemies = [ (ex,ey) for ex,ey in neighbors((x,y)) if area[ey][ex] == enemy ]
      enemies_min_hp = min([ hps[(ex,ey)] for ex,ey in enemies ])
      enemies = [ (ex,ey) for ex,ey in enemies if hps[(ex,ey)] == enemies_min_hp ]
      ex, ey = sortedxys(enemies)[0]
      hps[(ex,ey)] -= 3

      # print("%s(%2d,%2d): attack (%2d,%2d) hp=%d" % (area[y][x], x,y, ex,ey, hps[(ex,ey)]))
      if hps[(ex,ey)] <= 0:
        area[ey][ex] = "."
        del hps[(ex,ey)]


  def printarea(area):
    for y in xrange(len(area)):
      for x in xrange(len(area[0])):
        c = "?"
        if type(area[y][x]) == int:
          if area[y][x] <= 9:
            c = str(area[y][x])
          elif area[y][x] <= 9 + 24:
            c = chr(ord('A') + area[y][x] - 10)
          else:
            c = "+"
        elif area[y][x] == False:
          c = "_"
        else:
          c = area[y][x]
        sys.stdout.write(c)
      print

  def f(input):
    area = [ list(line.strip("\n")) for line in input ]

    hps = {}
    for x,y in tiles(area, "EG"):
      hps[(x,y)] = 200

    # printarea(area)
    #printarea(dists(area, (1,1)))
    # print
    round = 0
    for _ in xrange(1, 1000):
      for ux,uy in sortedxys(tiles(area, "EG")):
        if area[uy][ux] not in "EG":
          continue # died
        turn(area, hps, (ux,uy))
        if not tiles(area, "E") or not tiles(area, "G"):
          return round * sum([ hps[uxy] for uxy in tiles(area, "EG") ])
      round += 1
      # print "After round %d" % round
      # printarea(area)
      # print hps
      # print

    # printarea(area)
    # unit = (4,4)
    # printarea(dists(area, unit))
    # turn(area, unit)
    # printarea(area)

    return None

  # print(f([
  # "#########",
  # "#G..G..G#",
  # "#.......#",
  # "#.......#",
  # "#G..E..G#",
  # "#.......#",
  # "#.......#",
  # "#G..G..G#",
  # "#########"]))

  # print(f([
  # "#######",
  # "#.G...#",
  # "#...EG#",
  # "#.#.#G#",
  # "#..G#E#",
  # "#.....#",
  # "#######"]))

  # print(f([
  # "#######",
  # "#G..#E#",
  # "#E#E.E#",
  # "#G.##.#",
  # "#...#E#",
  # "#...E.#",
  # "#######"]))

  # print(f([
  # "#######",
  # "#E..EG#",
  # "#.#G.E#",
  # "#E.##E#",
  # "#G..#.#",
  # "#..E#.#",
  # "#######"]))

  print(f(list(open("15.txt"))))
#+END_SRC

#+RESULTS:
: 248235

 - 250848 too high <2018-12-16 Sun 16:31>
 - <2018-12-16 Sun 16:46>

** part 2
 - <2018-12-16 Sun 14:22>
#+BEGIN_SRC python :results output
  import sys
  from collections import deque

  maxdist = 99999999

  def neighbors(xy):
    x, y = xy
    return [ (x, y-1), (x+1, y), (x, y+1), (x-1, y) ]

  def dists(area, start):
    dist = [ [ maxdist for _ in area[0]] for _ in area ]
    sx, sy = start
    dist[sy][sx] = 0
    queue = deque([start])
    while queue:
      x, y = queue.popleft()
      for nx,ny in neighbors((x,y)):
        if area[ny][nx] == "." and dist[ny][nx] == maxdist:
          dist[ny][nx] = dist[y][x] + 1
          queue.append((nx,ny))
    return dist

  def tiles(area, tile):
    out = []
    for y in xrange(len(area)):
      for x in xrange(len(area[0])):
        if area[y][x] in tile:
          out.append((x,y))
    return out

  def next_moves(area, start, end):
    dist = {}

    return 1

  def sortedxys(xys):
    return sorted(xys, cmp=lambda a, b: a[1] - b[1] if a[1] != b[1] else a[0] - b[0])

  def turn(area, hps, xy, elfpower):
    x,y = xy
    enemy = "E" if area[y][x] == "G" else "G"

    dist = dists(area, (x,y))
    targets = [ e for sub in map(neighbors, tiles(area, enemy)) for e in sub ]
    #move
    if targets and (x,y) not in targets:
      min_dist = min([ dist[ty][tx] for tx,ty in targets ])
      closest_targets = [ (tx,ty) for tx,ty in targets if dist[ty][tx] == min_dist ]
      closest_target = sortedxys(closest_targets)[0]
      closest_dist = dists(area, closest_target)
      shortest_moves = [ (mx,my) for mx,my in neighbors((x,y)) 
                         if closest_dist[my][mx] == min_dist - 1 ]
      if shortest_moves:
        (mx, my) = sortedxys(shortest_moves)[0]
        area[my][mx] = area[y][x]
        area[y][x] = "."
        # print("%s(%2d,%2d): move to (%2d,%2d)" % (area[my][mx], x,y, mx,my))
        hps[(mx,my)] = hps[(x,y)]
        del hps[(x,y)]
        x,y = mx,my

    #attack
    if (x,y) in targets:
      enemies = [ (ex,ey) for ex,ey in neighbors((x,y)) if area[ey][ex] == enemy ]
      enemies_min_hp = min([ hps[(ex,ey)] for ex,ey in enemies ])
      enemies = [ (ex,ey) for ex,ey in enemies if hps[(ex,ey)] == enemies_min_hp ]
      ex, ey = sortedxys(enemies)[0]
      hps[(ex,ey)] -= 3 if area[y][x] == "G" else elfpower

      # print("%s(%2d,%2d): attack (%2d,%2d) hp=%d" % (area[y][x], x,y, ex,ey, hps[(ex,ey)]))
      if hps[(ex,ey)] <= 0:
        area[ey][ex] = "."
        del hps[(ex,ey)]


  def printarea(area):
    for y in xrange(len(area)):
      for x in xrange(len(area[0])):
        c = "?"
        if type(area[y][x]) == int:
          if area[y][x] <= 9:
            c = str(area[y][x])
          elif area[y][x] <= 9 + 24:
            c = chr(ord('A') + area[y][x] - 10)
          else:
            c = "+"
        elif area[y][x] == False:
          c = "_"
        else:
          c = area[y][x]
        sys.stdout.write(c)
      print

  def ff(input, elfpower):
    area = [ list(line.strip("\n")) for line in input ]
    hps = {}
    for x,y in tiles(area, "EG"):
      hps[(x,y)] = 200

    startelves = len(tiles(area, "E"))
    round = 0
    for _ in xrange(1, 1000):
      for ux,uy in sortedxys(tiles(area, "EG")):
        if area[uy][ux] not in "EG":
          continue # died
        turn(area, hps, (ux,uy), elfpower)
        if len(tiles(area, "E")) < startelves:
          return False
        if not tiles(area, "E") or not tiles(area, "G"):
          print("elfpower=%d E=%d, G=%d, round=%d" 
                % (elfpower, len(tiles(area, "E")), len(tiles(area, "G")), round))
          print("score=%d" % (round * sum([ hps[uxy] for uxy in tiles(area, "EG") ])))
          if not tiles(area, "G"):
            return True
      round += 1
    raise "argh"

  def f(input):
    for elfpower in xrange(4, 1000):
      if ff(input, elfpower):
        return elfpower

    return None

  # print(f([
  # "#######",
  # "#.G...#",
  # "#...EG#",
  # "#.#.#G#",
  # "#..G#E#",
  # "#.....#",
  # "#######"]))

  # print(f([
  # "#######",
  # "#E..EG#",
  # "#.#G.E#",
  # "#E.##E#",
  # "#G..#.#",
  # "#..E#.#",
  # "#######"]))

  print(f(list(open("15.txt"))))
#+END_SRC

#+RESULTS:
: elfpower=25 E=10, G=0, round=34
: score=46784
: 25

 - <2018-12-16 Sun 16:56>
