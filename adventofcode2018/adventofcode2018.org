* setup
(require 'ob-org)
(require 'ob-python)
* make work
 - tangle file: C-c C-v t
 - C-c C-c code src

* day 1
** puzzle
--- Day 1: Chronal Calibration ---

"We've detected some temporal anomalies," one of Santa's Elves at the Temporal Anomaly Research and Detection Instrument Station tells you. She sounded pretty worried when she called you down here. "At 500-year intervals into the past, someone has been changing Santa's history!"

"The good news is that the changes won't propagate to our time stream for another 25 days, and we have a device" - she attaches something to your wrist - "that will let you fix the changes with no such propagation delay. It's configured to send you 500 years further into the past every few days; that was the best we could do on such short notice."

"The bad news is that we are detecting roughly fifty anomalies throughout time; the device will indicate fixed anomalies with stars. The other bad news is that we only have one device and you're the best person for the job! Good lu--" She taps a button on the device and you suddenly feel like you're falling. To save Christmas, you need to get all fifty stars by December 25th.

Collect stars by solving puzzles. Two puzzles will be made available on each day in the advent calendar; the second puzzle is unlocked when you complete the first. Each puzzle grants one star. Good luck!

After feeling like you've been falling for a few minutes, you look at the device's tiny screen. "Error: Device must be calibrated before first use. Frequency drift detected. Cannot maintain destination lock." Below the message, the device shows a sequence of changes in frequency (your puzzle input). A value like +6 means the current frequency increases by 6; a value like -3 means the current frequency decreases by 3.

For example, if the device displays frequency changes of +1, -2, +3, +1, then starting from a frequency of zero, the following changes would occur:

    Current frequency  0, change of +1; resulting frequency  1.
    Current frequency  1, change of -2; resulting frequency -1.
    Current frequency -1, change of +3; resulting frequency  2.
    Current frequency  2, change of +1; resulting frequency  3.

In this example, the resulting frequency is 3.

Here are other example situations:

    +1, +1, +1 results in  3
    +1, +1, -2 results in  0
    -1, -2, -3 results in -6

Starting with a frequency of zero, what is the resulting frequency after all of the changes in frequency have been applied?

Your puzzle answer was 454.
--- Part Two ---

You notice that the device repeats the same frequency change list over and over. To calibrate the device, you need to find the first frequency it reaches twice.

For example, using the same list of changes above, the device would loop as follows:

    Current frequency  0, change of +1; resulting frequency  1.
    Current frequency  1, change of -2; resulting frequency -1.
    Current frequency -1, change of +3; resulting frequency  2.
    Current frequency  2, change of +1; resulting frequency  3.
    (At this point, the device continues from the start of the list.)
    Current frequency  3, change of +1; resulting frequency  4.
    Current frequency  4, change of -2; resulting frequency  2, which has already been seen.

In this example, the first frequency reached twice is 2. Note that your device might need to repeat its list of frequency changes many times before a duplicate frequency is found, and that duplicates might be found while in the middle of processing the list.

Here are other examples:

    +1, -1 first reaches 0 twice.
    +3, +3, +4, -2, -4 first reaches 10 twice.
    -6, +3, +8, +5, -6 first reaches 5 twice.
    +7, +7, -2, -7, -4 first reaches 14 twice.

What is the first frequency your device reaches twice?

Your puzzle answer was 566.

Both parts of this puzzle are complete! They provide two gold stars: **
** star 1
#+BEGIN_SRC python :results output
sum = 0
for line in open("01.txt", "r"):
    sum += int(line)
print(sum)
#+END_SRC

#+RESULTS:
: 454

** star 2
#+BEGIN_SRC python :results output
def f(lines):
  seens = set()
  sum = 0
  while True:
    for line in lines:
      seens.add(sum)
      sum += int(line)
      if sum in seens:
        return sum

assert f(["+1", "-1"]) is 0
assert f(["+3", "+3", "+4", "-2", "-4"]) is 10

print(f(list(open("01.txt", "r"))))
#+END_SRC

#+RESULTS:
: 566

* day 2
** puzzle
--- Day 2: Inventory Management System ---

You stop falling through time, catch your breath, and check the screen on the device. "Destination reached. Current Year: 1518. Current Location: North Pole Utility Closet 83N10." You made it! Now, to find those anomalies.

Outside the utility closet, you hear footsteps and a voice. "...I'm not sure either. But now that so many people have chimneys, maybe he could sneak in that way?" Another voice responds, "Actually, we've been working on a new kind of suit that would let him fit through tight spaces like that. But, I heard that a few days ago, they lost the prototype fabric, the design plans, everything! Nobody on the team can even seem to remember important details of the project!"

"Wouldn't they have had enough fabric to fill several boxes in the warehouse? They'd be stored together, so the box IDs should be similar. Too bad it would take forever to search the warehouse for two similar box IDs..." They walk too far away to hear any more.

Late at night, you sneak to the warehouse - who knows what kinds of paradoxes you could cause if you were discovered - and use your fancy wrist device to quickly scan every box and produce a list of the likely candidates (your puzzle input).

To make sure you didn't miss any, you scan the likely candidate boxes again, counting the number that have an ID containing exactly two of any letter and then separately counting those with exactly three of any letter. You can multiply those two counts together to get a rudimentary checksum and compare it to what your device predicts.

For example, if you see the following box IDs:

    abcdef contains no letters that appear exactly two or three times.
    bababc contains two a and three b, so it counts for both.
    abbcde contains two b, but no letter appears exactly three times.
    abcccd contains three c, but no letter appears exactly two times.
    aabcdd contains two a and two d, but it only counts once.
    abcdee contains two e.
    ababab contains three a and three b, but it only counts once.

Of these box IDs, four of them contain a letter which appears exactly twice, and three of them contain a letter which appears exactly three times. Multiplying these together produces a checksum of 4 * 3 = 12.

What is the checksum for your list of box IDs?

Your puzzle answer was 6150.
--- Part Two ---

Confident that your list of box IDs is complete, you're ready to find the boxes full of prototype fabric.

The boxes will have IDs which differ by exactly one character at the same position in both strings. For example, given the following box IDs:

abcde
fghij
klmno
pqrst
fguij
axcye
wvxyz

The IDs abcde and axcye are close, but they differ by two characters (the second and fourth). However, the IDs fghij and fguij differ by exactly one character, the third (h and u). Those must be the correct boxes.

What letters are common between the two correct box IDs? (In the example above, this is found by removing the differing character from either ID, producing fgij.)

Your puzzle answer was rteotyxzbodglnpkudawhijsc.

Both parts of this puzzle are complete! They provide two gold stars: **
** part 1
#+BEGIN_SRC python :results output
  def f(lines):
    twos = 0
    threes = 0
    for line in lines:
      seenLetters = {}
      for char in line:
        seenLetters[char] = seenLetters.get(char, 0) + 1

      if 2 in seenLetters.values():
        twos = twos + 1
      if 3 in seenLetters.values():
        threes = threes + 1
    return twos * threes

  assert f(["abcdef", "bababc", "abbcde", "abcccd", "aabcdd", "abcdee", "ababab"]) == 12

  print(f(list(open("02.txt", "r"))))
#+END_SRC

#+RESULTS:
: 6150

** part 1 B
#+BEGIN_SRC python :results output
  from collections import Counter
  def f(lines):
    twos = 0
    threes = 0
    for line in lines:
      counter = Counter(line)
      if 2 in counter.values():
        twos = twos + 1
      if 3 in counter.values():
        threes = threes + 1
    return twos * threes

  assert f(["abcdef", "bababc", "abbcde", "abcccd", "aabcdd", "abcdee", "ababab"]) == 12

  print(f(list(open("02.txt"))))
#+END_SRC

#+RESULTS:
: 6150


** part 2
#+BEGIN_SRC python :results output
def f(lines):
  sortedLines = sorted(lines)
  for i in range(1, len(sortedLines)):
    a = sortedLines[i-1]
    b = sortedLines[i]
    diffs = 0;
    diff = 0;
    for j in range(max(len(a), len(b))):
      if a[j] != b[j]:
        diffs += 1
        diff = j
    if diffs == 1:
      return a[:diff] + a[diff+1:]


assert f(["abcde", "fghij", "klmno", "pqrst", "fguij", "axcye", "wvxyz"]) == "fgij"

print(f(list(open("02.txt", "r"))))
#+END_SRC

#+RESULTS:
: rteotyxzbodglnpkudawhijsc
: 

** part 2 B
#+BEGIN_SRC python :results output
from collections import Counter
def f(lines):
  sortedLines = sorted(lines)
  for a, b in zip(sorted(lines), sorted(lines)[1:]):
    diffs = map(lambda (a,b): a != b, zip(a, b))
    if Counter(diffs)[True] == 1:
      diff = diffs.index(1)
      return a[:diff] + a[diff+1:]

assert f(["abcde", "fghij", "klmno", "pqrst", "fguij", "axcye", "wvxyz"]) == "fgij"

print(f(list(open("02.txt"))))
#+END_SRC

#+RESULTS:
: rteotyxzbodglnpkudawhijsc
: 

* day 3
** text
--- Day 3: No Matter How You Slice It ---

The Elves managed to locate the chimney-squeeze prototype fabric for Santa's suit (thanks to someone who helpfully wrote its box IDs on the wall of the warehouse in the middle of the night). Unfortunately, anomalies are still affecting them - nobody can even agree on how to cut the fabric.

The whole piece of fabric they're working on is a very large square - at least 1000 inches on each side.

Each Elf has made a claim about which area of fabric would be ideal for Santa's suit. All claims have an ID and consist of a single rectangle with edges parallel to the edges of the fabric. Each claim's rectangle is defined as follows:

    The number of inches between the left edge of the fabric and the left edge of the rectangle.
    The number of inches between the top edge of the fabric and the top edge of the rectangle.
    The width of the rectangle in inches.
    The height of the rectangle in inches.

A claim like #123 @ 3,2: 5x4 means that claim ID 123 specifies a rectangle 3 inches from the left edge, 2 inches from the top edge, 5 inches wide, and 4 inches tall. Visually, it claims the square inches of fabric represented by # (and ignores the square inches of fabric represented by .) in the diagram below:

...........
...........
...#####...
...#####...
...#####...
...#####...
...........
...........
...........

The problem is that many of the claims overlap, causing two or more claims to cover part of the same areas. For example, consider the following claims:

#1 @ 1,3: 4x4
#2 @ 3,1: 4x4
#3 @ 5,5: 2x2

Visually, these claim the following areas:

........
...2222.
...2222.
.11XX22.
.11XX22.
.111133.
.111133.
........

The four square inches marked with X are claimed by both 1 and 2. (Claim 3, while adjacent to the others, does not overlap either of them.)

If the Elves all proceed with their own plans, none of them will have enough fabric. How many square inches of fabric are within two or more claims?

Your puzzle answer was 101196.
--- Part Two ---

Amidst the chaos, you notice that exactly one claim doesn't overlap by even a single square inch of fabric with any other claim. If you can somehow draw attention to it, maybe the Elves will be able to make Santa's suit after all!

For example, in the claims above, only claim 3 is intact after all claims are made.

What is the ID of the only claim that doesn't overlap?

Your puzzle answer was 243.

Both parts of this puzzle are complete! They provide two gold stars: **
** part 1
#+BEGIN_SRC python :results output
import re

def f(lines):
  grid = {}
  for line in lines:
    m = re.search("#([0-9]+) @ ([0-9]+),([0-9]+): ([0-9]+)x([0-9]+)", line)
    x = int(m.group(2))
    y = int(m.group(3))
    w = int(m.group(4))
    h = int(m.group(5))
    for xx in range(x, x+w):
      for yy in range(y, y+h):
        key = str((xx, yy))
        grid[key] = grid.get(key, 0) + 1
  return len([c for c in grid.values() if c >= 2])

assert f(["#1 @ 1,3: 4x4", "#2 @ 3,1: 4x4", "#3 @ 5,5: 2x2"]) == 4
print(f(list(open("03.txt"))))
#+END_SRC

#+RESULTS:
: 101196

** part 2
#+BEGIN_SRC python :results output
  import re

  def liner(line):
    m = re.search("#([0-9]+) @ ([0-9]+),([0-9]+): ([0-9]+)x([0-9]+)", line)
    return {"id": int(m.group(1)), \
            "x": int(m.group(2)), \
            "y": int(m.group(3)), \
            "w": int(m.group(4)), \
            "h": int(m.group(5))}

  def f(lines):
    grid = {}
    for line in lines:
      l = liner(line)
      for x in range(l["x"], l["x"]+l["w"]):
        for y in range(l["y"], l["y"]+l["h"]):
          key = str((x, y))
          grid[key] = grid.get(key, 0) + 1

    for line in lines:
      l = liner(line)
      keys = [str((x, y)) for x in range(l["x"], l["x"]+l["w"]) 
                          for y in range(l["y"], l["y"]+l["h"])]
      if len([grid[key] for key in keys if grid[key] >= 2]) == 0:
        return l["id"]
    return None

  assert f(["#1 @ 1,3: 4x4", "#2 @ 3,1: 4x4", "#3 @ 5,5: 2x2"]) == 3
  print(f(list(open("03.txt"))))
#+END_SRC

#+RESULTS:
: 243

** part 2 B
#+BEGIN_SRC python :results output
  import re
  from collections import defaultdict

  def f(lines):
    grid = defaultdict()
    datas = [map(int, re.findall("[0-9]+", line)) for line in lines]
    for (id, x, y, w, h) in datas:
      for xx in xrange(x, x+w):
        for yy in xrange(y, y+h):
          key = (xx, yy)
          grid[key] = grid.get(key, 0) + 1

    for (id, x, y, w, h) in datas:
      keys = [(xx, yy) for xx in xrange(x, x+w) 
                       for yy in xrange(y, y+h)]
      if len([grid[key] for key in keys if grid[key] >= 2]) == 0:
        return id
    return None

  assert f(["#1 @ 1,3: 4x4", "#2 @ 3,1: 4x4", "#3 @ 5,5: 2x2"]) == 3
  print(f(list(open("03.txt"))))
#+END_SRC

#+RESULTS:
: 243
* day 4
** text
--- Day 4: Repose Record ---

You've sneaked into another supply closet - this time, it's across from the prototype suit manufacturing lab. You need to sneak inside and fix the issues with the suit, but there's a guard stationed outside the lab, so this is as close as you can safely get.

As you search the closet for anything that might help, you discover that you're not the first person to want to sneak in. Covering the walls, someone has spent an hour starting every midnight for the past few months secretly observing this guard post! They've been writing down the ID of the one guard on duty that night - the Elves seem to have decided that one guard was enough for the overnight shift - as well as when they fall asleep or wake up while at their post (your puzzle input).

For example, consider the following records, which have already been organized into chronological order:

[1518-11-01 00:00] Guard #10 begins shift
[1518-11-01 00:05] falls asleep
[1518-11-01 00:25] wakes up
[1518-11-01 00:30] falls asleep
[1518-11-01 00:55] wakes up
[1518-11-01 23:58] Guard #99 begins shift
[1518-11-02 00:40] falls asleep
[1518-11-02 00:50] wakes up
[1518-11-03 00:05] Guard #10 begins shift
[1518-11-03 00:24] falls asleep
[1518-11-03 00:29] wakes up
[1518-11-04 00:02] Guard #99 begins shift
[1518-11-04 00:36] falls asleep
[1518-11-04 00:46] wakes up
[1518-11-05 00:03] Guard #99 begins shift
[1518-11-05 00:45] falls asleep
[1518-11-05 00:55] wakes up

Timestamps are written using year-month-day hour:minute format. The guard falling asleep or waking up is always the one whose shift most recently started. Because all asleep/awake times are during the midnight hour (00:00 - 00:59), only the minute portion (00 - 59) is relevant for those events.

Visually, these records show that the guards are asleep at these times:

Date   ID   Minute
            000000000011111111112222222222333333333344444444445555555555
            012345678901234567890123456789012345678901234567890123456789
11-01  #10  .....####################.....#########################.....
11-02  #99  ........................................##########..........
11-03  #10  ........................#####...............................
11-04  #99  ....................................##########..............
11-05  #99  .............................................##########.....

The columns are Date, which shows the month-day portion of the relevant day; ID, which shows the guard on duty that day; and Minute, which shows the minutes during which the guard was asleep within the midnight hour. (The Minute column's header shows the minute's ten's digit in the first row and the one's digit in the second row.) Awake is shown as ., and asleep is shown as #.

Note that guards count as asleep on the minute they fall asleep, and they count as awake on the minute they wake up. For example, because Guard #10 wakes up at 00:25 on 1518-11-01, minute 25 is marked as awake.

If you can figure out the guard most likely to be asleep at a specific time, you might be able to trick that guard into working tonight so you can have the best chance of sneaking in. You have two strategies for choosing the best guard/minute combination.

Strategy 1: Find the guard that has the most minutes asleep. What minute does that guard spend asleep the most?

In the example above, Guard #10 spent the most minutes asleep, a total of 50 minutes (20+25+5), while Guard #99 only slept for a total of 30 minutes (10+10+10). Guard #10 was asleep most during minute 24 (on two days, whereas any other minute the guard was asleep was only seen on one day).

While this example listed the entries in chronological order, your entries are in the order you found them. You'll need to organize them before they can be analyzed.

What is the ID of the guard you chose multiplied by the minute you chose? (In the above example, the answer would be 10 * 24 = 240.)

Your puzzle answer was 95199.
--- Part Two ---

Strategy 2: Of all guards, which guard is most frequently asleep on the same minute?

In the example above, Guard #99 spent minute 45 asleep more than any other guard or minute - three times in total. (In all other cases, any guard spent any minute asleep at most twice.)

What is the ID of the guard you chose multiplied by the minute you chose? (In the above example, the answer would be 99 * 45 = 4455.)

Your puzzle answer was 7887.

Both parts of this puzzle are complete! They provide two gold stars: **
** part 1
#+BEGIN_SRC python :results output
import re
def f(lines):
  guard = {}
  id = None
  start = -1
  end = -1
  for line in sorted(lines):
    if line.strip().endswith("shift"):
      id = int(re.search('[0-9]+', line[26:]).group())
    elif line.strip().endswith("asleep"):
      start = int(line[15:17])
    else:
      sleeps = guard.get(id, {});
      end = int(line[15:17])
      for min in xrange(start, end):
        sleeps[min] = sleeps.get(min, 0) + 1
      guard[id] = sleeps
  id, sleeps = max(guard.items(), key=lambda g: sum(g[1].values()))
  m = max(sleeps.items(), key=lambda m: m[1])[0]
  return id * m

assert f([
"[1518-11-01 00:00] Guard #10 begins shift",
"[1518-11-01 00:05] falls asleep",
"[1518-11-01 00:25] wakes up",
"[1518-11-01 00:30] falls asleep",
"[1518-11-01 00:55] wakes up",
"[1518-11-01 23:58] Guard #99 begins shift",
"[1518-11-02 00:40] falls asleep",
"[1518-11-02 00:50] wakes up",
"[1518-11-03 00:05] Guard #10 begins shift",
"[1518-11-03 00:24] falls asleep",
"[1518-11-03 00:29] wakes up",
"[1518-11-04 00:02] Guard #99 begins shift",
"[1518-11-04 00:36] falls asleep",
"[1518-11-04 00:46] wakes up",
"[1518-11-05 00:03] Guard #99 begins shift",
"[1518-11-05 00:45] falls asleep",
"[1518-11-05 00:55] wakes up"]) == 240
print(f(list(open("04.txt"))))
#+END_SRC

#+RESULTS:
: 95199

 - guess: 39

** part 2
#+BEGIN_SRC python :results output
import re
def f(lines):
  guard = {}
  id = None
  start = -1
  end = -1
  for line in sorted(lines):
    if line.strip().endswith("shift"):
      id = int(re.search('[0-9]+', line[26:]).group())
    elif line.strip().endswith("asleep"):
      start = int(line[15:17])
    else:
      sleeps = guard.get(id, {});
      end = int(line[15:17])
      for min in xrange(start, end):
        sleeps[min] = sleeps.get(min, 0) + 1
      guard[id] = sleeps
  id, sleeps = max(guard.items(), key=lambda g: max(g[1].values()))
  m = max(sleeps.items(), key=lambda m: m[1])[0]
  return id * m

assert f([
"[1518-11-01 00:00] Guard #10 begins shift",
"[1518-11-01 00:05] falls asleep",
"[1518-11-01 00:25] wakes up",
"[1518-11-01 00:30] falls asleep",
"[1518-11-01 00:55] wakes up",
"[1518-11-01 23:58] Guard #99 begins shift",
"[1518-11-02 00:40] falls asleep",
"[1518-11-02 00:50] wakes up",
"[1518-11-03 00:05] Guard #10 begins shift",
"[1518-11-03 00:24] falls asleep",
"[1518-11-03 00:29] wakes up",
"[1518-11-04 00:02] Guard #99 begins shift",
"[1518-11-04 00:36] falls asleep",
"[1518-11-04 00:46] wakes up",
"[1518-11-05 00:03] Guard #99 begins shift",
"[1518-11-05 00:45] falls asleep",
"[1518-11-05 00:55] wakes up"]) == 4455
print(f(list(open("04.txt"))))
#+END_SRC

#+RESULTS:
: 7887

 - guess: 39
   
** part 2 B
#+BEGIN_SRC python :results output
import re
def f(lines):
  guard = {}
  id = None
  start = -1
  end = -1
  for line in sorted(lines):
    numbers = [ int(n) for n in re.findall("[0-9]+", line) ]
    if "shift" in line:
      id = numbers[5]
    elif "asleep" in line:
      start = numbers[4]
    else:
      sleeps = guard.get(id, {});
      end = numbers[4]
      for min in xrange(start, end):
        sleeps[min] = sleeps.get(min, 0) + 1
      guard[id] = sleeps
  id, sleeps = max(guard.items(), key=lambda g: max(g[1].values()))
  m = max(sleeps.items(), key=lambda m: m[1])[0]
  return id * m

assert f([
"[1518-11-01 00:00] Guard #10 begins shift",
"[1518-11-01 00:05] falls asleep",
"[1518-11-01 00:25] wakes up",
"[1518-11-01 00:30] falls asleep",
"[1518-11-01 00:55] wakes up",
"[1518-11-01 23:58] Guard #99 begins shift",
"[1518-11-02 00:40] falls asleep",
"[1518-11-02 00:50] wakes up",
"[1518-11-03 00:05] Guard #10 begins shift",
"[1518-11-03 00:24] falls asleep",
"[1518-11-03 00:29] wakes up",
"[1518-11-04 00:02] Guard #99 begins shift",
"[1518-11-04 00:36] falls asleep",
"[1518-11-04 00:46] wakes up",
"[1518-11-05 00:03] Guard #99 begins shift",
"[1518-11-05 00:45] falls asleep",
"[1518-11-05 00:55] wakes up"]) == 4455
print(f(list(open("04.txt"))))
#+END_SRC

#+RESULTS:
: 7887

 - guess: 39
   
